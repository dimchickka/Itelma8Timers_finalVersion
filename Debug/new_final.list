
new_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08003400  08003400  00004400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080035ac  080035ac  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080035ac  080035ac  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ac  080035ac  000045ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035b0  080035b0  000045b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080035b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  08003610  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08003610  000052fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b843  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a36  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00012300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000947  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1d  00000000  00000000  000137e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d33c  00000000  00000000  0002b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a54f  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2a8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  000c2ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c60b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033e8 	.word	0x080033e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080033e8 	.word	0x080033e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fde2 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80a 	bl	800016c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f926 	bl	80003a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8f8 	bl	8000354 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8a2 	bl	80002ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	bf00      	nop
 800016a:	e7fd      	b.n	8000168 <main+0x1c>

0800016c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b090      	sub	sp, #64	@ 0x40
 8000170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000172:	f107 0318 	add.w	r3, r7, #24
 8000176:	2228      	movs	r2, #40	@ 0x28
 8000178:	2100      	movs	r1, #0
 800017a:	4618      	mov	r0, r3
 800017c:	f002 fca6 	bl	8002acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
 8000186:	605a      	str	r2, [r3, #4]
 8000188:	609a      	str	r2, [r3, #8]
 800018a:	60da      	str	r2, [r3, #12]
 800018c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018e:	2301      	movs	r3, #1
 8000190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000192:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000198:	2300      	movs	r3, #0
 800019a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019c:	2301      	movs	r3, #1
 800019e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a0:	2302      	movs	r3, #2
 80001a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 f8d3 	bl	8001360 <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c0:	f000 fc1e 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c4:	230f      	movs	r3, #15
 80001c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c8:	2302      	movs	r3, #2
 80001ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2102      	movs	r1, #2
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 fb40 	bl	8001864 <HAL_RCC_ClockConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ea:	f000 fc09 	bl	8000a00 <Error_Handler>
  }
}
 80001ee:	bf00      	nop
 80001f0:	3740      	adds	r7, #64	@ 0x40
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800020c:	463b      	mov	r3, r7
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000216:	4a24      	ldr	r2, [pc, #144]	@ (80002a8 <MX_TIM1_Init+0xb0>)
 8000218:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800021a:	4b22      	ldr	r3, [pc, #136]	@ (80002a4 <MX_TIM1_Init+0xac>)
 800021c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000220:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000222:	4b20      	ldr	r3, [pc, #128]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000228:	4b1e      	ldr	r3, [pc, #120]	@ (80002a4 <MX_TIM1_Init+0xac>)
 800022a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800022e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000230:	4b1c      	ldr	r3, [pc, #112]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000232:	2200      	movs	r2, #0
 8000234:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000236:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800023c:	4b19      	ldr	r3, [pc, #100]	@ (80002a4 <MX_TIM1_Init+0xac>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000242:	4818      	ldr	r0, [pc, #96]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000244:	f001 fc9c 	bl	8001b80 <HAL_TIM_Base_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800024e:	f000 fbd7 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000256:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000258:	f107 0308 	add.w	r3, r7, #8
 800025c:	4619      	mov	r1, r3
 800025e:	4811      	ldr	r0, [pc, #68]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000260:	f001 fea7 	bl	8001fb2 <HAL_TIM_ConfigClockSource>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800026a:	f000 fbc9 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800026e:	2108      	movs	r1, #8
 8000270:	480c      	ldr	r0, [pc, #48]	@ (80002a4 <MX_TIM1_Init+0xac>)
 8000272:	f001 fd55 	bl	8001d20 <HAL_TIM_OnePulse_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800027c:	f000 fbc0 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000280:	2310      	movs	r3, #16
 8000282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000284:	2380      	movs	r3, #128	@ 0x80
 8000286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000288:	463b      	mov	r3, r7
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_TIM1_Init+0xac>)
 800028e:	f002 f953 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000298:	f000 fbb2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000078 	.word	0x20000078
 80002a8:	40012c00 	.word	0x40012c00

080002ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ca:	4b21      	ldr	r3, [pc, #132]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80002de:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b19      	ldr	r3, [pc, #100]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f0:	4817      	ldr	r0, [pc, #92]	@ (8000350 <MX_TIM2_Init+0xa4>)
 80002f2:	f001 fc45 	bl	8001b80 <HAL_TIM_Base_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002fc:	f000 fb80 	bl	8000a00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000300:	2307      	movs	r3, #7
 8000302:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000304:	2370      	movs	r3, #112	@ 0x70
 8000306:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	4619      	mov	r1, r3
 800031a:	480d      	ldr	r0, [pc, #52]	@ (8000350 <MX_TIM2_Init+0xa4>)
 800031c:	f001 ff10 	bl	8002140 <HAL_TIM_SlaveConfigSynchro>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000326:	f000 fb6b 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800032a:	2320      	movs	r3, #32
 800032c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4619      	mov	r1, r3
 8000336:	4806      	ldr	r0, [pc, #24]	@ (8000350 <MX_TIM2_Init+0xa4>)
 8000338:	f002 f8fe 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000342:	f000 fb5d 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000c0 	.word	0x200000c0

08000354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000358:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 800035a:	4a12      	ldr	r2, [pc, #72]	@ (80003a4 <MX_USART2_UART_Init+0x50>)
 800035c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035e:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_USART2_UART_Init+0x4c>)
 800038c:	f002 f944 	bl	8002618 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000396:	f000 fb33 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000108 	.word	0x20000108
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b39      	ldr	r3, [pc, #228]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a38      	ldr	r2, [pc, #224]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b36      	ldr	r3, [pc, #216]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b33      	ldr	r3, [pc, #204]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a32      	ldr	r2, [pc, #200]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b30      	ldr	r3, [pc, #192]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a2c      	ldr	r2, [pc, #176]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b2a      	ldr	r3, [pc, #168]	@ (80004a4 <MX_GPIO_Init+0xfc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 800040a:	4827      	ldr	r0, [pc, #156]	@ (80004a8 <MX_GPIO_Init+0x100>)
 800040c:	f000 ff78 	bl	8001300 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000416:	4825      	ldr	r0, [pc, #148]	@ (80004ac <MX_GPIO_Init+0x104>)
 8000418:	f000 ff72 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800041c:	2302      	movs	r3, #2
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000420:	4b23      	ldr	r3, [pc, #140]	@ (80004b0 <MX_GPIO_Init+0x108>)
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000424:	2302      	movs	r3, #2
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	481e      	ldr	r0, [pc, #120]	@ (80004a8 <MX_GPIO_Init+0x100>)
 8000430:	f000 fde2 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000434:	23f0      	movs	r3, #240	@ 0xf0
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4817      	ldr	r0, [pc, #92]	@ (80004a8 <MX_GPIO_Init+0x100>)
 800044c:	f000 fdd4 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000450:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	4810      	ldr	r0, [pc, #64]	@ (80004ac <MX_GPIO_Init+0x104>)
 800046a:	f000 fdc5 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800046e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2302      	movs	r3, #2
 800047e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	4808      	ldr	r0, [pc, #32]	@ (80004a8 <MX_GPIO_Init+0x100>)
 8000488:	f000 fdb6 	bl	8000ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	2007      	movs	r0, #7
 8000492:	f000 fd7a 	bl	8000f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000496:	2007      	movs	r0, #7
 8000498:	f000 fd93 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	10110000 	.word	0x10110000

080004b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b0bc      	sub	sp, #240	@ 0xf0
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	uint32_t countFirstTimer = __HAL_TIM_GET_COUNTER(&htim1); // значение в счётчике таймера №1
 80004bc:	4bb0      	ldr	r3, [pc, #704]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    char buffer[64]; // Буфер для формирования строки
    int len = snprintf(buffer, sizeof(buffer), "yes\r\n");
 80004c6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80004ca:	4aae      	ldr	r2, [pc, #696]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	4618      	mov	r0, r3
 80004d0:	f002 fac6 	bl	8002a60 <sniprintf>
 80004d4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80004d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80004dc:	b29a      	uxth	r2, r3
 80004de:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	48a8      	ldr	r0, [pc, #672]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80004e8:	f002 f8e6 	bl	80026b8 <HAL_UART_Transmit>
	if(htim == &htim2){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4aa7      	ldr	r2, [pc, #668]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	f040 80df 	bne.w	80006b4 <HAL_TIM_PeriodElapsedCallback+0x200>
		char buffer1[64]; // Буфер для формирования строки
		    int len1 = snprintf(buffer1, sizeof(buffer), "gaga\r\n");
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	4aa5      	ldr	r2, [pc, #660]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80004fc:	2140      	movs	r1, #64	@ 0x40
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 faae 	bl	8002a60 <sniprintf>
 8000504:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
		    HAL_UART_Transmit(&huart2, (uint8_t*)buffer1, len1, HAL_MAX_DELAY);
 8000508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800050c:	b29a      	uxth	r2, r3
 800050e:	f107 010c 	add.w	r1, r7, #12
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	489c      	ldr	r0, [pc, #624]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000518:	f002 f8ce 	bl	80026b8 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim1);
 800051c:	4898      	ldr	r0, [pc, #608]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800051e:	f001 fbd1 	bl	8001cc4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000522:	489a      	ldr	r0, [pc, #616]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000524:	f001 fbce 	bl	8001cc4 <HAL_TIM_Base_Stop_IT>
		if(capture_count < MAX_SAMPLES){
 8000528:	4b9a      	ldr	r3, [pc, #616]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b0a      	cmp	r3, #10
 800052e:	d832      	bhi.n	8000596 <HAL_TIM_PeriodElapsedCallback+0xe2>
			//uint32_t countFirstTimer = __HAL_TIM_GET_COUNTER(&htim1); // значение в счётчике таймера №1
			char buffer2[64]; // Буфер для формирования строки

			int len2 = snprintf(buffer2, sizeof(buffer2), "count = %lu\r\n", countFirstTimer);
 8000530:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000538:	4a97      	ldr	r2, [pc, #604]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800053a:	2140      	movs	r1, #64	@ 0x40
 800053c:	f002 fa90 	bl	8002a60 <sniprintf>
 8000540:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer2, len2, HAL_MAX_DELAY);
 8000544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000548:	b29a      	uxth	r2, r3
 800054a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	488d      	ldr	r0, [pc, #564]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000554:	f002 f8b0 	bl	80026b8 <HAL_UART_Transmit>
			frequenciesForCurrentSensor[capture_count] = 10000/countFirstTimer; // вычисляем
 8000558:	4b8e      	ldr	r3, [pc, #568]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000560:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000564:	fbb1 f2f2 	udiv	r2, r1, r2
 8000568:	498c      	ldr	r1, [pc, #560]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800056a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


			//////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 800056e:	4b84      	ldr	r3, [pc, #528]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8000576:	4b85      	ldr	r3, [pc, #532]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
			capture_count++;
 800057e:	4b85      	ldr	r3, [pc, #532]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	4a83      	ldr	r2, [pc, #524]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000586:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000588:	487d      	ldr	r0, [pc, #500]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800058a:	f001 fb49 	bl	8001c20 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 800058e:	487f      	ldr	r0, [pc, #508]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000590:	f001 fb46 	bl	8001c20 <HAL_TIM_Base_Start_IT>
		    capture_count = 0;
		    currentSensor = 0;
			isProccess = 0;
		}
	}
}
 8000594:	e0ef      	b.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x2c2>
			HAL_TIM_Base_Stop_IT(&htim1);                 // Остановить
 8000596:	487a      	ldr	r0, [pc, #488]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000598:	f001 fb94 	bl	8001cc4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim2);
 800059c:	487b      	ldr	r0, [pc, #492]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800059e:	f001 fb91 	bl	8001cc4 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);             // обнуляем таймеры
 80005a2:	4b77      	ldr	r3, [pc, #476]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80005aa:	4b78      	ldr	r3, [pc, #480]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
			for (int i = 1; i < MAX_SAMPLES; i++) {
 80005b2:	2301      	movs	r3, #1
 80005b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80005b8:	e036      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x174>
				uint32_t key = frequenciesForCurrentSensor[i];
 80005ba:	4a78      	ldr	r2, [pc, #480]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80005c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				int j = i - 1;
 80005c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80005cc:	3b01      	subs	r3, #1
 80005ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 80005d2:	e00f      	b.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0x140>
					frequenciesForCurrentSensor[j + 1] = frequenciesForCurrentSensor[j];
 80005d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80005d8:	3301      	adds	r3, #1
 80005da:	4970      	ldr	r1, [pc, #448]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80005e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005e4:	496d      	ldr	r1, [pc, #436]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					j--;
 80005ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80005ee:	3b01      	subs	r3, #1
 80005f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 80005f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db08      	blt.n	800060e <HAL_TIM_PeriodElapsedCallback+0x15a>
 80005fc:	4a67      	ldr	r2, [pc, #412]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80005fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800060a:	429a      	cmp	r2, r3
 800060c:	d3e2      	bcc.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x120>
				frequenciesForCurrentSensor[j + 1] = key;
 800060e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000612:	3301      	adds	r3, #1
 8000614:	4961      	ldr	r1, [pc, #388]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 1; i < MAX_SAMPLES; i++) {
 800061e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000622:	3301      	adds	r3, #1
 8000624:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000628:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800062c:	2b0a      	cmp	r3, #10
 800062e:	ddc4      	ble.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x106>
			uint32_t frequency_median = frequenciesForCurrentSensor[MAX_SAMPLES / 2];
 8000630:	4b5a      	ldr	r3, [pc, #360]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			frequenciesResults[currentSensor] = frequency_median;
 8000638:	4b59      	ldr	r3, [pc, #356]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4a59      	ldr	r2, [pc, #356]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000644:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			capture_count = 0;
 8000648:	4b52      	ldr	r3, [pc, #328]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
			currentSensor++;
 800064e:	4b54      	ldr	r3, [pc, #336]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b52      	ldr	r3, [pc, #328]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000658:	701a      	strb	r2, [r3, #0]
			if(currentSensor < NUMBER_OF_SENSORS){
 800065a:	4b51      	ldr	r3, [pc, #324]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d80b      	bhi.n	800067a <HAL_TIM_PeriodElapsedCallback+0x1c6>
				SelectMuxChannel(currentSensor);
 8000662:	4b4f      	ldr	r3, [pc, #316]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f8f8 	bl	800085c <SelectMuxChannel>
				HAL_TIM_Base_Start_IT(&htim1);
 800066c:	4844      	ldr	r0, [pc, #272]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800066e:	f001 fad7 	bl	8001c20 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim2);
 8000672:	4846      	ldr	r0, [pc, #280]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000674:	f001 fad4 	bl	8001c20 <HAL_TIM_Base_Start_IT>
}
 8000678:	e07d      	b.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x2c2>
				PrintSensorFrequencies();
 800067a:	f000 f983 	bl	8000984 <PrintSensorFrequencies>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	210f      	movs	r1, #15
 8000682:	4849      	ldr	r0, [pc, #292]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000684:	f000 fe3c 	bl	8001300 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800068e:	4846      	ldr	r0, [pc, #280]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000690:	f000 fe36 	bl	8001300 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800069a:	4844      	ldr	r0, [pc, #272]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800069c:	f000 fe30 	bl	8001300 <HAL_GPIO_WritePin>
			    capture_count = 0;
 80006a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
			    currentSensor = 0;
 80006a6:	4b3e      	ldr	r3, [pc, #248]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
				isProccess = 0;
 80006ac:	4b40      	ldr	r3, [pc, #256]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	e060      	b.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x2c2>
	else if(htim == &htim1){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d15c      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x2c2>
		    int len1 = snprintf(buffer1, sizeof(buffer), "lala\r\n");
 80006bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006c0:	4a3c      	ldr	r2, [pc, #240]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80006c2:	2140      	movs	r1, #64	@ 0x40
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f9cb 	bl	8002a60 <sniprintf>
 80006ca:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
		    HAL_UART_Transmit(&huart2, (uint8_t*)buffer1, len1, HAL_MAX_DELAY);
 80006ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	482a      	ldr	r0, [pc, #168]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006de:	f001 ffeb 	bl	80026b8 <HAL_UART_Transmit>
		HAL_TIM_Base_Stop_IT(&htim1);                 // Остановить
 80006e2:	4827      	ldr	r0, [pc, #156]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006e4:	f001 faee 	bl	8001cc4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 80006e8:	4828      	ldr	r0, [pc, #160]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006ea:	f001 faeb 	bl	8001cc4 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);             // обнуляем таймеры
 80006ee:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
		capture_count = 0;
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
		frequenciesResults[currentSensor] = 0;
 8000704:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800070c:	2200      	movs	r2, #0
 800070e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		currentSensor++;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800071c:	701a      	strb	r2, [r3, #0]
		if(currentSensor < NUMBER_OF_SENSORS){
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d80b      	bhi.n	800073e <HAL_TIM_PeriodElapsedCallback+0x28a>
			SelectMuxChannel(currentSensor);
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f896 	bl	800085c <SelectMuxChannel>
			HAL_TIM_Base_Start_IT(&htim1);
 8000730:	4813      	ldr	r0, [pc, #76]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000732:	f001 fa75 	bl	8001c20 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8000736:	4815      	ldr	r0, [pc, #84]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000738:	f001 fa72 	bl	8001c20 <HAL_TIM_Base_Start_IT>
}
 800073c:	e01b      	b.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x2c2>
			PrintSensorFrequencies();
 800073e:	f000 f921 	bl	8000984 <PrintSensorFrequencies>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	210f      	movs	r1, #15
 8000746:	4818      	ldr	r0, [pc, #96]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000748:	f000 fdda 	bl	8001300 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000752:	4815      	ldr	r0, [pc, #84]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000754:	f000 fdd4 	bl	8001300 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800075e:	4813      	ldr	r0, [pc, #76]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000760:	f000 fdce 	bl	8001300 <HAL_GPIO_WritePin>
		    capture_count = 0;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
		    currentSensor = 0;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
			isProccess = 0;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	37f0      	adds	r7, #240	@ 0xf0
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000078 	.word	0x20000078
 8000784:	08003400 	.word	0x08003400
 8000788:	20000108 	.word	0x20000108
 800078c:	200000c0 	.word	0x200000c0
 8000790:	08003408 	.word	0x08003408
 8000794:	20000180 	.word	0x20000180
 8000798:	08003410 	.word	0x08003410
 800079c:	20000154 	.word	0x20000154
 80007a0:	20000188 	.word	0x20000188
 80007a4:	2000018c 	.word	0x2000018c
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40010800 	.word	0x40010800
 80007b0:	20000150 	.word	0x20000150
 80007b4:	08003420 	.word	0x08003420

080007b8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 80007c2:	f000 fb01 	bl	8000dc8 <HAL_GetTick>
 80007c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (now - lastInterruptTime < 200) return;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x88>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80007d2:	d92f      	bls.n	8000834 <HAL_GPIO_EXTI_Callback+0x7c>
	lastInterruptTime = now;
 80007d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x88>)
 80007d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007d8:	6013      	str	r3, [r2, #0]
	if(isProccess) return;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d129      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x80>

  if (GPIO_Pin == GPIO_PIN_1 && !isProccess){
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d127      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0x82>
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d122      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0x82>
		isProccess = 1;
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x8c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
	    char buffer[64]; // Буфер для формирования строки
	    int len = snprintf(buffer, sizeof(buffer), "Counter is started\r\n");
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x90>)
 8000800:	2140      	movs	r1, #64	@ 0x40
 8000802:	4618      	mov	r0, r3
 8000804:	f002 f92c 	bl	8002a60 <sniprintf>
 8000808:	64b8      	str	r0, [r7, #72]	@ 0x48
	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800080a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 0108 	add.w	r1, r7, #8
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <HAL_GPIO_EXTI_Callback+0x94>)
 8000818:	f001 ff4e 	bl	80026b8 <HAL_UART_Transmit>
		SelectMuxChannel(currentSensor);
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x98>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f81b 	bl	800085c <SelectMuxChannel>

		HAL_TIM_Base_Start_IT(&htim1);
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000828:	f001 f9fa 	bl	8001c20 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 800082c:	480a      	ldr	r0, [pc, #40]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xa0>)
 800082e:	f001 f9f7 	bl	8001c20 <HAL_TIM_Base_Start_IT>
 8000832:	e002      	b.n	800083a <HAL_GPIO_EXTI_Callback+0x82>
	if (now - lastInterruptTime < 200) return;
 8000834:	bf00      	nop
 8000836:	e000      	b.n	800083a <HAL_GPIO_EXTI_Callback+0x82>
	if(isProccess) return;
 8000838:	bf00      	nop
  }
}
 800083a:	3750      	adds	r7, #80	@ 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000184 	.word	0x20000184
 8000844:	20000150 	.word	0x20000150
 8000848:	08003428 	.word	0x08003428
 800084c:	20000108 	.word	0x20000108
 8000850:	20000188 	.word	0x20000188
 8000854:	20000078 	.word	0x20000078
 8000858:	200000c0 	.word	0x200000c0

0800085c <SelectMuxChannel>:


void SelectMuxChannel(uint8_t channel) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    // 1. Отключаем все датчики (опционально, если нужно строгое управление)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800086c:	4842      	ldr	r0, [pc, #264]	@ (8000978 <SelectMuxChannel+0x11c>)
 800086e:	f000 fd47 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000878:	4840      	ldr	r0, [pc, #256]	@ (800097c <SelectMuxChannel+0x120>)
 800087a:	f000 fd41 	bl	8001300 <HAL_GPIO_WritePin>

    // 2. Устанавливаем канал мультиплексора
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, muxChannels[channel].s0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	493f      	ldr	r1, [pc, #252]	@ (8000980 <SelectMuxChannel+0x124>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf14      	ite	ne
 8000892:	2301      	movne	r3, #1
 8000894:	2300      	moveq	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	2180      	movs	r1, #128	@ 0x80
 800089c:	4837      	ldr	r0, [pc, #220]	@ (800097c <SelectMuxChannel+0x120>)
 800089e:	f000 fd2f 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, muxChannels[channel].s1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	4936      	ldr	r1, [pc, #216]	@ (8000980 <SelectMuxChannel+0x124>)
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	3301      	adds	r3, #1
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	2140      	movs	r1, #64	@ 0x40
 80008c2:	482e      	ldr	r0, [pc, #184]	@ (800097c <SelectMuxChannel+0x120>)
 80008c4:	f000 fd1c 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, muxChannels[channel].s2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	492d      	ldr	r1, [pc, #180]	@ (8000980 <SelectMuxChannel+0x124>)
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	3302      	adds	r3, #2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	2120      	movs	r1, #32
 80008e8:	4824      	ldr	r0, [pc, #144]	@ (800097c <SelectMuxChannel+0x120>)
 80008ea:	f000 fd09 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, muxChannels[channel].s3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4923      	ldr	r1, [pc, #140]	@ (8000980 <SelectMuxChannel+0x124>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	440b      	add	r3, r1
 80008fc:	3303      	adds	r3, #3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	2110      	movs	r1, #16
 800090e:	481b      	ldr	r0, [pc, #108]	@ (800097c <SelectMuxChannel+0x120>)
 8000910:	f000 fcf6 	bl	8001300 <HAL_GPIO_WritePin>

    // 3. Включаем питание датчика, если указаны порт и пин
    if (muxChannels[channel].power_port != NULL) {
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	491a      	ldr	r1, [pc, #104]	@ (8000980 <SelectMuxChannel+0x124>)
 8000918:	4613      	mov	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	4413      	add	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	3304      	adds	r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d015      	beq.n	8000956 <SelectMuxChannel+0xfa>
        HAL_GPIO_WritePin(muxChannels[channel].power_port, muxChannels[channel].power_pin, GPIO_PIN_SET);
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	4914      	ldr	r1, [pc, #80]	@ (8000980 <SelectMuxChannel+0x124>)
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	3304      	adds	r3, #4
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	4910      	ldr	r1, [pc, #64]	@ (8000980 <SelectMuxChannel+0x124>)
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	3308      	adds	r3, #8
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	2201      	movs	r2, #1
 8000950:	4619      	mov	r1, r3
 8000952:	f000 fcd5 	bl	8001300 <HAL_GPIO_WritePin>
    }

    // 4. Задержка для стабилизации
    for (volatile int i = 0; i < 10000; i++);
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	e002      	b.n	8000962 <SelectMuxChannel+0x106>
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000968:	4293      	cmp	r3, r2
 800096a:	ddf7      	ble.n	800095c <SelectMuxChannel+0x100>
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010c00 	.word	0x40010c00
 800097c:	40010800 	.word	0x40010800
 8000980:	0800348c 	.word	0x0800348c

08000984 <PrintSensorFrequencies>:


void PrintSensorFrequencies() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b096      	sub	sp, #88	@ 0x58
 8000988:	af02      	add	r7, sp, #8
    char buffer[64]; // Буфер для формирования строки

    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800098e:	e018      	b.n	80009c2 <PrintSensorFrequencies+0x3e>
        // Форматируем строку для каждого датчика
        int len = snprintf(buffer, sizeof(buffer), "Датчик %d: частота %lu Гц\r\n",
 8000990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	4916      	ldr	r1, [pc, #88]	@ (80009f0 <PrintSensorFrequencies+0x6c>)
 8000996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800099c:	1d38      	adds	r0, r7, #4
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <PrintSensorFrequencies+0x70>)
 80009a4:	2140      	movs	r1, #64	@ 0x40
 80009a6:	f002 f85b 	bl	8002a60 <sniprintf>
 80009aa:	6478      	str	r0, [r7, #68]	@ 0x44
                          i + 1, frequenciesResults[i]);

        // Отправляем в UART
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80009ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <PrintSensorFrequencies+0x74>)
 80009b8:	f001 fe7e 	bl	80026b8 <HAL_UART_Transmit>
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 80009bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009be:	3301      	adds	r3, #1
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80009c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	dde3      	ble.n	8000990 <PrintSensorFrequencies+0xc>
    }

    int len = snprintf(buffer, sizeof(buffer), "-------------------------\r\n\r\n");
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4a0c      	ldr	r2, [pc, #48]	@ (80009fc <PrintSensorFrequencies+0x78>)
 80009cc:	2140      	movs	r1, #64	@ 0x40
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 f846 	bl	8002a60 <sniprintf>
 80009d4:	64b8      	str	r0, [r7, #72]	@ 0x48
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80009d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009d8:	b29a      	uxth	r2, r3
 80009da:	1d39      	adds	r1, r7, #4
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <PrintSensorFrequencies+0x74>)
 80009e2:	f001 fe69 	bl	80026b8 <HAL_UART_Transmit>
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	@ 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000018c 	.word	0x2000018c
 80009f4:	08003440 	.word	0x08003440
 80009f8:	20000108 	.word	0x20000108
 80009fc:	0800346c 	.word	0x0800346c

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_MspInit+0x5c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <HAL_MspInit+0x5c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_MspInit+0x5c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_MspInit+0x5c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <HAL_MspInit+0x5c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_MspInit+0x5c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_MspInit+0x60>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_MspInit+0x60>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010000 	.word	0x40010000

08000a70 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a26      	ldr	r2, [pc, #152]	@ (8000b24 <HAL_TIM_Base_MspInit+0xb4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d114      	bne.n	8000aba <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a90:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a24      	ldr	r2, [pc, #144]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000a96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2019      	movs	r0, #25
 8000aae:	f000 fa6c 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 fa85 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab8:	e030      	b.n	8000b1c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ac2:	d12b      	bne.n	8000b1c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	61d3      	str	r3, [r2, #28]
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_TIM_Base_MspInit+0xb8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <HAL_TIM_Base_MspInit+0xbc>)
 8000b08:	f000 fa76 	bl	8000ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	201c      	movs	r0, #28
 8000b12:	f000 fa3a 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b16:	201c      	movs	r0, #28
 8000b18:	f000 fa53 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800

08000b30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d12f      	bne.n	8000bb0 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5a:	61d3      	str	r3, [r2, #28]
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_UART_MspInit+0x8c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b80:	2304      	movs	r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <HAL_UART_MspInit+0x90>)
 8000b94:	f000 fa30 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_UART_MspInit+0x90>)
 8000bac:	f000 fa24 	bl	8000ff8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8c6 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f000 fb85 	bl	8001330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//    char msg[64];
//    int len = snprintf(msg, sizeof(msg), "РАБОТАЕТ!!!");
//    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c30:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <TIM1_UP_IRQHandler+0x10>)
 8000c32:	f001 f8ce 	bl	8001dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000078 	.word	0x20000078

08000c40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM2_IRQHandler+0x10>)
 8000c46:	f001 f8c4 	bl	8001dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000c0 	.word	0x200000c0

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f001 ff2a 	bl	8002adc <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005000 	.word	0x20005000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200001ac 	.word	0x200001ac
 8000cbc:	20000300 	.word	0x20000300

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff fff8 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd2:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ce8:	4c09      	ldr	r4, [pc, #36]	@ (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f001 fef7 	bl	8002ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fa27 	bl	800014c <main>
  bx lr
 8000cfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d08:	080035b4 	.word	0x080035b4
  ldr r2, =_sbss
 8000d0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d10:	200002fc 	.word	0x200002fc

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f923 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f000 f808 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fe6a 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x54>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f93b 	bl	8000fde <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00e      	b.n	8000d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d80a      	bhi.n	8000d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 f903 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <HAL_InitTick+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_IncTick+0x1c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001b0 	.word	0x200001b0

08000dc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <HAL_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	200001b0 	.word	0x200001b0

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4906      	ldr	r1, [pc, #24]	@ (8000e74 <__NVIC_EnableIRQ+0x34>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	@ (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff90 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff2d 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff42 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff35 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa2 	bl	8000f30 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b08b      	sub	sp, #44	@ 0x2c
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	e169      	b.n	80012e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800100c:	2201      	movs	r2, #1
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8158 	bne.w	80012da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a9a      	ldr	r2, [pc, #616]	@ (8001298 <HAL_GPIO_Init+0x2a0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d05e      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001034:	4a98      	ldr	r2, [pc, #608]	@ (8001298 <HAL_GPIO_Init+0x2a0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d875      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800103a:	4a98      	ldr	r2, [pc, #608]	@ (800129c <HAL_GPIO_Init+0x2a4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d058      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001040:	4a96      	ldr	r2, [pc, #600]	@ (800129c <HAL_GPIO_Init+0x2a4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d86f      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001046:	4a96      	ldr	r2, [pc, #600]	@ (80012a0 <HAL_GPIO_Init+0x2a8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d052      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 800104c:	4a94      	ldr	r2, [pc, #592]	@ (80012a0 <HAL_GPIO_Init+0x2a8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d869      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001052:	4a94      	ldr	r2, [pc, #592]	@ (80012a4 <HAL_GPIO_Init+0x2ac>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d04c      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001058:	4a92      	ldr	r2, [pc, #584]	@ (80012a4 <HAL_GPIO_Init+0x2ac>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d863      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800105e:	4a92      	ldr	r2, [pc, #584]	@ (80012a8 <HAL_GPIO_Init+0x2b0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d046      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001064:	4a90      	ldr	r2, [pc, #576]	@ (80012a8 <HAL_GPIO_Init+0x2b0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d85d      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d82a      	bhi.n	80010c4 <HAL_GPIO_Init+0xcc>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d859      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001072:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <HAL_GPIO_Init+0x80>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	080010f3 	.word	0x080010f3
 800107c:	080010cd 	.word	0x080010cd
 8001080:	080010df 	.word	0x080010df
 8001084:	08001121 	.word	0x08001121
 8001088:	08001127 	.word	0x08001127
 800108c:	08001127 	.word	0x08001127
 8001090:	08001127 	.word	0x08001127
 8001094:	08001127 	.word	0x08001127
 8001098:	08001127 	.word	0x08001127
 800109c:	08001127 	.word	0x08001127
 80010a0:	08001127 	.word	0x08001127
 80010a4:	08001127 	.word	0x08001127
 80010a8:	08001127 	.word	0x08001127
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001127 	.word	0x08001127
 80010b4:	08001127 	.word	0x08001127
 80010b8:	08001127 	.word	0x08001127
 80010bc:	080010d5 	.word	0x080010d5
 80010c0:	080010e9 	.word	0x080010e9
 80010c4:	4a79      	ldr	r2, [pc, #484]	@ (80012ac <HAL_GPIO_Init+0x2b4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ca:	e02c      	b.n	8001126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	623b      	str	r3, [r7, #32]
          break;
 80010d2:	e029      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e024      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	3308      	adds	r3, #8
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e01f      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	330c      	adds	r3, #12
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e01a      	b.n	8001128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fa:	2304      	movs	r3, #4
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e013      	b.n	8001128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001108:	2308      	movs	r3, #8
 800110a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	611a      	str	r2, [r3, #16]
          break;
 8001112:	e009      	b.n	8001128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	615a      	str	r2, [r3, #20]
          break;
 800111e:	e003      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x130>
          break;
 8001126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2bff      	cmp	r3, #255	@ 0xff
 800112c:	d801      	bhi.n	8001132 <HAL_GPIO_Init+0x13a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	e001      	b.n	8001136 <HAL_GPIO_Init+0x13e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3304      	adds	r3, #4
 8001136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	@ 0xff
 800113c:	d802      	bhi.n	8001144 <HAL_GPIO_Init+0x14c>
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x152>
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	3b08      	subs	r3, #8
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	210f      	movs	r1, #15
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
 800115c:	6a39      	ldr	r1, [r7, #32]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80b1 	beq.w	80012da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001178:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <HAL_GPIO_Init+0x2b8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <HAL_GPIO_Init+0x2b8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b4a      	ldr	r3, [pc, #296]	@ (80012b0 <HAL_GPIO_Init+0x2b8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001190:	4a48      	ldr	r2, [pc, #288]	@ (80012b4 <HAL_GPIO_Init+0x2bc>)
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a40      	ldr	r2, [pc, #256]	@ (80012b8 <HAL_GPIO_Init+0x2c0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d013      	beq.n	80011e4 <HAL_GPIO_Init+0x1ec>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3f      	ldr	r2, [pc, #252]	@ (80012bc <HAL_GPIO_Init+0x2c4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1e8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <HAL_GPIO_Init+0x2c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <HAL_GPIO_Init+0x2cc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1e0>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011d8:	2304      	movs	r3, #4
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011e4:	2300      	movs	r3, #0
 80011e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f6:	492f      	ldr	r1, [pc, #188]	@ (80012b4 <HAL_GPIO_Init+0x2bc>)
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001210:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	492c      	ldr	r1, [pc, #176]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4928      	ldr	r1, [pc, #160]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001228:	4013      	ands	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	4922      	ldr	r1, [pc, #136]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	60cb      	str	r3, [r1, #12]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	491e      	ldr	r1, [pc, #120]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001250:	4013      	ands	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4918      	ldr	r1, [pc, #96]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800126e:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d021      	beq.n	80012cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	490e      	ldr	r1, [pc, #56]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
 8001294:	e021      	b.n	80012da <HAL_GPIO_Init+0x2e2>
 8001296:	bf00      	nop
 8001298:	10320000 	.word	0x10320000
 800129c:	10310000 	.word	0x10310000
 80012a0:	10220000 	.word	0x10220000
 80012a4:	10210000 	.word	0x10210000
 80012a8:	10120000 	.word	0x10120000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40011400 	.word	0x40011400
 80012c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <HAL_GPIO_Init+0x304>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4909      	ldr	r1, [pc, #36]	@ (80012fc <HAL_GPIO_Init+0x304>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f47f ae8e 	bne.w	800100c <HAL_GPIO_Init+0x14>
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	372c      	adds	r7, #44	@ 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fa32 	bl	80007b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e272      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8087 	beq.w	800148e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001380:	4b92      	ldr	r3, [pc, #584]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b04      	cmp	r3, #4
 800138a:	d00c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800138c:	4b8f      	ldr	r3, [pc, #572]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d112      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
 8001398:	4b8c      	ldr	r3, [pc, #560]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a4:	d10b      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	4b89      	ldr	r3, [pc, #548]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d06c      	beq.n	800148c <HAL_RCC_OscConfig+0x12c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d168      	bne.n	800148c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e24c      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x76>
 80013c8:	4b80      	ldr	r3, [pc, #512]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a7f      	ldr	r2, [pc, #508]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e02e      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b7b      	ldr	r3, [pc, #492]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7a      	ldr	r2, [pc, #488]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b78      	ldr	r3, [pc, #480]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a77      	ldr	r2, [pc, #476]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0xbc>
 8001402:	4b72      	ldr	r3, [pc, #456]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a71      	ldr	r2, [pc, #452]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6f      	ldr	r3, [pc, #444]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6e      	ldr	r2, [pc, #440]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 800141c:	4b6b      	ldr	r3, [pc, #428]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6a      	ldr	r2, [pc, #424]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a67      	ldr	r2, [pc, #412]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fcc4 	bl	8000dc8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fcc0 	bl	8000dc8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e200      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xe4>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcb0 	bl	8000dc8 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcac 	bl	8000dc8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1ec      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x10c>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149a:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c0      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4939      	ldr	r1, [pc, #228]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc65 	bl	8000dc8 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fc61 	bl	8000dc8 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4927      	ldr	r1, [pc, #156]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc44 	bl	8000dc8 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc40 	bl	8000dc8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e180      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03a      	beq.n	80015e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_RCC_OscConfig+0x274>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fc24 	bl	8000dc8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fc20 	bl	8000dc8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e160      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 face 	bl	8001b44 <RCC_Delay>
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_RCC_OscConfig+0x274>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fc0a 	bl	8000dc8 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	e00f      	b.n	80015d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc06 	bl	8000dc8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d908      	bls.n	80015d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e146      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	42420000 	.word	0x42420000
 80015d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b92      	ldr	r3, [pc, #584]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e9      	bne.n	80015b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a6 	beq.w	800173e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a87      	ldr	r2, [pc, #540]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b85      	ldr	r3, [pc, #532]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b82      	ldr	r3, [pc, #520]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7e      	ldr	r2, [pc, #504]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fbc7 	bl	8000dc8 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fbc3 	bl	8000dc8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	@ 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e103      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b75      	ldr	r3, [pc, #468]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x312>
 8001664:	4b6f      	ldr	r3, [pc, #444]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a6e      	ldr	r2, [pc, #440]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x334>
 800167a:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a69      	ldr	r2, [pc, #420]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a66      	ldr	r2, [pc, #408]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x356>
 800169c:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a60      	ldr	r2, [pc, #384]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 80016b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb77 	bl	8000dc8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb73 	bl	8000dc8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0b1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x37e>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb61 	bl	8000dc8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb5d 	bl	8000dc8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e09b      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b3c      	ldr	r3, [pc, #240]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a3b      	ldr	r2, [pc, #236]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8087 	beq.w	8001856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d061      	beq.n	8001818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d146      	bne.n	80017ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <HAL_RCC_OscConfig+0x4cc>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fb31 	bl	8000dc8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fb2d 	bl	8000dc8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e06d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4921      	ldr	r1, [pc, #132]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a19      	ldr	r1, [r3, #32]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	430b      	orrs	r3, r1
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb01 	bl	8000dc8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fafd 	bl	8000dc8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x46a>
 80017e8:	e035      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff faea 	bl	8000dc8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fae6 	bl	8000dc8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e026      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x498>
 8001816:	e01e      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e019      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 8001824:	40021000 	.word	0x40021000
 8001828:	40007000 	.word	0x40007000
 800182c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_RCC_OscConfig+0x500>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa38 	bl	8000dc8 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa34 	bl	8000dc8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	@ (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f996 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	0800354c 	.word	0x0800354c
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x30>
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x36>
 8001a66:	e027      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6a:	613b      	str	r3, [r7, #16]
      break;
 8001a6c:	e027      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0c5b      	lsrs	r3, r3, #17
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9a:	fb03 f202 	mul.w	r2, r3, r2
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e004      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
      break;
 8001ab6:	e002      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	613b      	str	r3, [r7, #16]
      break;
 8001abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001abe:	693b      	ldr	r3, [r7, #16]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	08003564 	.word	0x08003564
 8001ad8:	08003574 	.word	0x08003574
 8001adc:	003d0900 	.word	0x003d0900

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	@ (8001af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af8:	f7ff fff2 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	@ (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	0800355c 	.word	0x0800355c

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0adb      	lsrs	r3, r3, #11
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	0800355c 	.word	0x0800355c

08001b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <RCC_Delay+0x34>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <RCC_Delay+0x38>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b60:	bf00      	nop
  }
  while (Delay --);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <RCC_Delay+0x1c>
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e041      	b.n	8001c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe ff62 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 fb24 	bl	800220c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e03a      	b.n	8001cae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <HAL_TIM_Base_Start_IT+0x98>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00e      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x58>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c62:	d009      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x58>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <HAL_TIM_Base_Start_IT+0x9c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x58>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d010      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9a:	e007      	b.n	8001cac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40012c00 	.word	0x40012c00
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10f      	bne.n	8001d0c <HAL_TIM_Base_Stop_IT+0x48>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	f240 4344 	movw	r3, #1092	@ 0x444
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_Base_Stop_IT+0x48>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e041      	b.n	8001db8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f839 	bl	8001dc0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f000 fa53 	bl	800220c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0208 	bic.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01b      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0202 	mvn.w	r2, #2
 8001e06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f9da 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
 8001e22:	e005      	b.n	8001e30 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f9cd 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f9dc 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01b      	beq.n	8001e82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0204 	mvn.w	r2, #4
 8001e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f9b4 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
 8001e6e:	e005      	b.n	8001e7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f9a7 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f9b6 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01b      	beq.n	8001ece <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f06f 0208 	mvn.w	r2, #8
 8001e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f98e 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
 8001eba:	e005      	b.n	8001ec8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f981 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f990 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01b      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0210 	mvn.w	r2, #16
 8001eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f968 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
 8001f06:	e005      	b.n	8001f14 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f95b 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f96a 	bl	80021e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00c      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0201 	mvn.w	r2, #1
 8001f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fabb 	bl	80004b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00c      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fb52 	bl	8002606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00c      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f93a 	bl	80021fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00c      	beq.n	8001faa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f06f 0220 	mvn.w	r2, #32
 8001fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb25 	bl	80025f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_ConfigClockSource+0x1c>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e0b4      	b.n	8002138 <HAL_TIM_ConfigClockSource+0x186>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001fec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ff4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002006:	d03e      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xd4>
 8002008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800200c:	f200 8087 	bhi.w	800211e <HAL_TIM_ConfigClockSource+0x16c>
 8002010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002014:	f000 8086 	beq.w	8002124 <HAL_TIM_ConfigClockSource+0x172>
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800201c:	d87f      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 800201e:	2b70      	cmp	r3, #112	@ 0x70
 8002020:	d01a      	beq.n	8002058 <HAL_TIM_ConfigClockSource+0xa6>
 8002022:	2b70      	cmp	r3, #112	@ 0x70
 8002024:	d87b      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 8002026:	2b60      	cmp	r3, #96	@ 0x60
 8002028:	d050      	beq.n	80020cc <HAL_TIM_ConfigClockSource+0x11a>
 800202a:	2b60      	cmp	r3, #96	@ 0x60
 800202c:	d877      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 800202e:	2b50      	cmp	r3, #80	@ 0x50
 8002030:	d03c      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0xfa>
 8002032:	2b50      	cmp	r3, #80	@ 0x50
 8002034:	d873      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 8002036:	2b40      	cmp	r3, #64	@ 0x40
 8002038:	d058      	beq.n	80020ec <HAL_TIM_ConfigClockSource+0x13a>
 800203a:	2b40      	cmp	r3, #64	@ 0x40
 800203c:	d86f      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 800203e:	2b30      	cmp	r3, #48	@ 0x30
 8002040:	d064      	beq.n	800210c <HAL_TIM_ConfigClockSource+0x15a>
 8002042:	2b30      	cmp	r3, #48	@ 0x30
 8002044:	d86b      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 8002046:	2b20      	cmp	r3, #32
 8002048:	d060      	beq.n	800210c <HAL_TIM_ConfigClockSource+0x15a>
 800204a:	2b20      	cmp	r3, #32
 800204c:	d867      	bhi.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d05c      	beq.n	800210c <HAL_TIM_ConfigClockSource+0x15a>
 8002052:	2b10      	cmp	r3, #16
 8002054:	d05a      	beq.n	800210c <HAL_TIM_ConfigClockSource+0x15a>
 8002056:	e062      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002068:	f000 fa46 	bl	80024f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800207a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
      break;
 8002084:	e04f      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	f000 fa2f 	bl	80024f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020a8:	609a      	str	r2, [r3, #8]
      break;
 80020aa:	e03c      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b8:	461a      	mov	r2, r3
 80020ba:	f000 f9a6 	bl	800240a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2150      	movs	r1, #80	@ 0x50
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f9fd 	bl	80024c4 <TIM_ITRx_SetConfig>
      break;
 80020ca:	e02c      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d8:	461a      	mov	r2, r3
 80020da:	f000 f9c4 	bl	8002466 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2160      	movs	r1, #96	@ 0x60
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f9ed 	bl	80024c4 <TIM_ITRx_SetConfig>
      break;
 80020ea:	e01c      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f8:	461a      	mov	r2, r3
 80020fa:	f000 f986 	bl	800240a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2140      	movs	r1, #64	@ 0x40
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f9dd 	bl	80024c4 <TIM_ITRx_SetConfig>
      break;
 800210a:	e00c      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f000 f9d4 	bl	80024c4 <TIM_ITRx_SetConfig>
      break;
 800211c:	e003      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      break;
 8002122:	e000      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002154:	2302      	movs	r3, #2
 8002156:	e031      	b.n	80021bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8bc 	bl	80022e8 <TIM_SlaveTimer_SetConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e018      	b.n	80021bc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002198:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a2f      	ldr	r2, [pc, #188]	@ (80022dc <TIM_Base_SetConfig+0xd0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00b      	beq.n	800223c <TIM_Base_SetConfig+0x30>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222a:	d007      	beq.n	800223c <TIM_Base_SetConfig+0x30>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a2c      	ldr	r2, [pc, #176]	@ (80022e0 <TIM_Base_SetConfig+0xd4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0x30>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a2b      	ldr	r2, [pc, #172]	@ (80022e4 <TIM_Base_SetConfig+0xd8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d108      	bne.n	800224e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a22      	ldr	r2, [pc, #136]	@ (80022dc <TIM_Base_SetConfig+0xd0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00b      	beq.n	800226e <TIM_Base_SetConfig+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800225c:	d007      	beq.n	800226e <TIM_Base_SetConfig+0x62>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <TIM_Base_SetConfig+0xd4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d003      	beq.n	800226e <TIM_Base_SetConfig+0x62>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <TIM_Base_SetConfig+0xd8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d108      	bne.n	8002280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <TIM_Base_SetConfig+0xd0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d103      	bne.n	80022b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f023 0201 	bic.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]
  }
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40000800 	.word	0x40000800

080022e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002304:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f023 0307 	bic.w	r3, r3, #7
 8002316:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b70      	cmp	r3, #112	@ 0x70
 8002330:	d01a      	beq.n	8002368 <TIM_SlaveTimer_SetConfig+0x80>
 8002332:	2b70      	cmp	r3, #112	@ 0x70
 8002334:	d860      	bhi.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
 8002336:	2b60      	cmp	r3, #96	@ 0x60
 8002338:	d054      	beq.n	80023e4 <TIM_SlaveTimer_SetConfig+0xfc>
 800233a:	2b60      	cmp	r3, #96	@ 0x60
 800233c:	d85c      	bhi.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
 800233e:	2b50      	cmp	r3, #80	@ 0x50
 8002340:	d046      	beq.n	80023d0 <TIM_SlaveTimer_SetConfig+0xe8>
 8002342:	2b50      	cmp	r3, #80	@ 0x50
 8002344:	d858      	bhi.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
 8002346:	2b40      	cmp	r3, #64	@ 0x40
 8002348:	d019      	beq.n	800237e <TIM_SlaveTimer_SetConfig+0x96>
 800234a:	2b40      	cmp	r3, #64	@ 0x40
 800234c:	d854      	bhi.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
 800234e:	2b30      	cmp	r3, #48	@ 0x30
 8002350:	d055      	beq.n	80023fe <TIM_SlaveTimer_SetConfig+0x116>
 8002352:	2b30      	cmp	r3, #48	@ 0x30
 8002354:	d850      	bhi.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
 8002356:	2b20      	cmp	r3, #32
 8002358:	d051      	beq.n	80023fe <TIM_SlaveTimer_SetConfig+0x116>
 800235a:	2b20      	cmp	r3, #32
 800235c:	d84c      	bhi.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
 800235e:	2b00      	cmp	r3, #0
 8002360:	d04d      	beq.n	80023fe <TIM_SlaveTimer_SetConfig+0x116>
 8002362:	2b10      	cmp	r3, #16
 8002364:	d04b      	beq.n	80023fe <TIM_SlaveTimer_SetConfig+0x116>
 8002366:	e047      	b.n	80023f8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002378:	f000 f8be 	bl	80024f8 <TIM_ETR_SetConfig>
      break;
 800237c:	e040      	b.n	8002400 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d101      	bne.n	800238a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e03b      	b.n	8002402 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023b0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]
      break;
 80023ce:	e017      	b.n	8002400 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023dc:	461a      	mov	r2, r3
 80023de:	f000 f814 	bl	800240a <TIM_TI1_ConfigInputStage>
      break;
 80023e2:	e00d      	b.n	8002400 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f0:	461a      	mov	r2, r3
 80023f2:	f000 f838 	bl	8002466 <TIM_TI2_ConfigInputStage>
      break;
 80023f6:	e003      	b.n	8002400 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
      break;
 80023fc:	e000      	b.n	8002400 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80023fe:	bf00      	nop
  }

  return status;
 8002400:	7dfb      	ldrb	r3, [r7, #23]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f023 0201 	bic.w	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 030a 	bic.w	r3, r3, #10
 8002446:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	621a      	str	r2, [r3, #32]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002466:	b480      	push	{r7}
 8002468:	b087      	sub	sp, #28
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f023 0210 	bic.w	r2, r3, #16
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	031b      	lsls	r3, r3, #12
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f043 0307 	orr.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	021a      	lsls	r2, r3, #8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	431a      	orrs	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	609a      	str	r2, [r3, #8]
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800254c:	2302      	movs	r3, #2
 800254e:	e046      	b.n	80025de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259c:	d009      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a10      	ldr	r2, [pc, #64]	@ (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10c      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800

080025f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e042      	b.n	80026b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fa76 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	@ 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800265a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f971 	bl	8002944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d175      	bne.n	80027c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_UART_Transmit+0x2c>
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e06e      	b.n	80027c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	@ 0x21
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fb67 	bl	8000dc8 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	88fa      	ldrh	r2, [r7, #6]
 8002706:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x6c>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800272c:	e02e      	b.n	800278c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	@ 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f848 	bl	80027ce <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e03a      	b.n	80027c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3302      	adds	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e007      	b.n	800277e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3301      	adds	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1cb      	bne.n	800272e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2200      	movs	r2, #0
 800279e:	2140      	movs	r1, #64	@ 0x40
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f814 	bl	80027ce <UART_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e006      	b.n	80027c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027de:	e03b      	b.n	8002858 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d037      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e8:	f7fe faee 	bl	8000dc8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	6a3a      	ldr	r2, [r7, #32]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d302      	bcc.n	80027fe <UART_WaitOnFlagUntilTimeout+0x30>
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03a      	b.n	8002878 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b80      	cmp	r3, #128	@ 0x80
 8002814:	d020      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b40      	cmp	r3, #64	@ 0x40
 800281a:	d01d      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d116      	bne.n	8002858 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f81d 	bl	8002880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2208      	movs	r2, #8
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e00f      	b.n	8002878 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	429a      	cmp	r2, r3
 8002874:	d0b4      	beq.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002880:	b480      	push	{r7}
 8002882:	b095      	sub	sp, #84	@ 0x54
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002892:	e853 3f00 	ldrex	r3, [r3]
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800289e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80028aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028b0:	e841 2300 	strex	r3, r2, [r1]
 80028b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e5      	bne.n	8002888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3314      	adds	r3, #20
 80028c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3314      	adds	r3, #20
 80028da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e5      	bne.n	80028bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d119      	bne.n	800292c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	e853 3f00 	ldrex	r3, [r3]
 8002906:	60bb      	str	r3, [r7, #8]
   return(result);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f023 0310 	bic.w	r3, r3, #16
 800290e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	330c      	adds	r3, #12
 8002916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002918:	61ba      	str	r2, [r7, #24]
 800291a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	6979      	ldr	r1, [r7, #20]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	e841 2300 	strex	r3, r2, [r1]
 8002924:	613b      	str	r3, [r7, #16]
   return(result);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e5      	bne.n	80028f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800293a:	bf00      	nop
 800293c:	3754      	adds	r7, #84	@ 0x54
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800297e:	f023 030c 	bic.w	r3, r3, #12
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	430b      	orrs	r3, r1
 800298a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a58 <UART_SetConfig+0x114>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029ac:	f7ff f8b6 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	e002      	b.n	80029ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029b4:	f7ff f89e 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 80029b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	009a      	lsls	r2, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <UART_SetConfig+0x118>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	0119      	lsls	r1, r3, #4
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009a      	lsls	r2, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <UART_SetConfig+0x118>)
 80029f2:	fba3 0302 	umull	r0, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2064      	movs	r0, #100	@ 0x64
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	@ 0x32
 8002a04:	4a15      	ldr	r2, [pc, #84]	@ (8002a5c <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a10:	4419      	add	r1, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <UART_SetConfig+0x118>)
 8002a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2064      	movs	r0, #100	@ 0x64
 8002a32:	fb00 f303 	mul.w	r3, r0, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	3332      	adds	r3, #50	@ 0x32
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <UART_SetConfig+0x118>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	51eb851f 	.word	0x51eb851f

08002a60 <sniprintf>:
 8002a60:	b40c      	push	{r2, r3}
 8002a62:	b530      	push	{r4, r5, lr}
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <sniprintf+0x68>)
 8002a66:	1e0c      	subs	r4, r1, #0
 8002a68:	681d      	ldr	r5, [r3, #0]
 8002a6a:	b09d      	sub	sp, #116	@ 0x74
 8002a6c:	da08      	bge.n	8002a80 <sniprintf+0x20>
 8002a6e:	238b      	movs	r3, #139	@ 0x8b
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	b01d      	add	sp, #116	@ 0x74
 8002a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a7c:	b002      	add	sp, #8
 8002a7e:	4770      	bx	lr
 8002a80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002a8e:	bf0c      	ite	eq
 8002a90:	4623      	moveq	r3, r4
 8002a92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a96:	9304      	str	r3, [sp, #16]
 8002a98:	9307      	str	r3, [sp, #28]
 8002a9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a9e:	9002      	str	r0, [sp, #8]
 8002aa0:	9006      	str	r0, [sp, #24]
 8002aa2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	ab21      	add	r3, sp, #132	@ 0x84
 8002aaa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002aac:	a902      	add	r1, sp, #8
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	f000 f992 	bl	8002dd8 <_svfiprintf_r>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	bfbc      	itt	lt
 8002ab8:	238b      	movlt	r3, #139	@ 0x8b
 8002aba:	602b      	strlt	r3, [r5, #0]
 8002abc:	2c00      	cmp	r4, #0
 8002abe:	d0da      	beq.n	8002a76 <sniprintf+0x16>
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	9b02      	ldr	r3, [sp, #8]
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e7d6      	b.n	8002a76 <sniprintf+0x16>
 8002ac8:	2000000c 	.word	0x2000000c

08002acc <memset>:
 8002acc:	4603      	mov	r3, r0
 8002ace:	4402      	add	r2, r0
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <memset+0xa>
 8002ad4:	4770      	bx	lr
 8002ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ada:	e7f9      	b.n	8002ad0 <memset+0x4>

08002adc <__errno>:
 8002adc:	4b01      	ldr	r3, [pc, #4]	@ (8002ae4 <__errno+0x8>)
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <__libc_init_array>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	2600      	movs	r6, #0
 8002aec:	4d0c      	ldr	r5, [pc, #48]	@ (8002b20 <__libc_init_array+0x38>)
 8002aee:	4c0d      	ldr	r4, [pc, #52]	@ (8002b24 <__libc_init_array+0x3c>)
 8002af0:	1b64      	subs	r4, r4, r5
 8002af2:	10a4      	asrs	r4, r4, #2
 8002af4:	42a6      	cmp	r6, r4
 8002af6:	d109      	bne.n	8002b0c <__libc_init_array+0x24>
 8002af8:	f000 fc76 	bl	80033e8 <_init>
 8002afc:	2600      	movs	r6, #0
 8002afe:	4d0a      	ldr	r5, [pc, #40]	@ (8002b28 <__libc_init_array+0x40>)
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <__libc_init_array+0x44>)
 8002b02:	1b64      	subs	r4, r4, r5
 8002b04:	10a4      	asrs	r4, r4, #2
 8002b06:	42a6      	cmp	r6, r4
 8002b08:	d105      	bne.n	8002b16 <__libc_init_array+0x2e>
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}
 8002b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b10:	4798      	blx	r3
 8002b12:	3601      	adds	r6, #1
 8002b14:	e7ee      	b.n	8002af4 <__libc_init_array+0xc>
 8002b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1a:	4798      	blx	r3
 8002b1c:	3601      	adds	r6, #1
 8002b1e:	e7f2      	b.n	8002b06 <__libc_init_array+0x1e>
 8002b20:	080035ac 	.word	0x080035ac
 8002b24:	080035ac 	.word	0x080035ac
 8002b28:	080035ac 	.word	0x080035ac
 8002b2c:	080035b0 	.word	0x080035b0

08002b30 <__retarget_lock_acquire_recursive>:
 8002b30:	4770      	bx	lr

08002b32 <__retarget_lock_release_recursive>:
 8002b32:	4770      	bx	lr

08002b34 <_free_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d040      	beq.n	8002bbe <_free_r+0x8a>
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f0c      	subs	r4, r1, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfb8      	it	lt
 8002b46:	18e4      	addlt	r4, r4, r3
 8002b48:	f000 f8de 	bl	8002d08 <__malloc_lock>
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <_free_r+0x8c>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	b933      	cbnz	r3, 8002b60 <_free_r+0x2c>
 8002b52:	6063      	str	r3, [r4, #4]
 8002b54:	6014      	str	r4, [r2, #0]
 8002b56:	4628      	mov	r0, r5
 8002b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5c:	f000 b8da 	b.w	8002d14 <__malloc_unlock>
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	d908      	bls.n	8002b76 <_free_r+0x42>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	1821      	adds	r1, r4, r0
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	bf01      	itttt	eq
 8002b6c:	6819      	ldreq	r1, [r3, #0]
 8002b6e:	685b      	ldreq	r3, [r3, #4]
 8002b70:	1809      	addeq	r1, r1, r0
 8002b72:	6021      	streq	r1, [r4, #0]
 8002b74:	e7ed      	b.n	8002b52 <_free_r+0x1e>
 8002b76:	461a      	mov	r2, r3
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b10b      	cbz	r3, 8002b80 <_free_r+0x4c>
 8002b7c:	42a3      	cmp	r3, r4
 8002b7e:	d9fa      	bls.n	8002b76 <_free_r+0x42>
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	1850      	adds	r0, r2, r1
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d10b      	bne.n	8002ba0 <_free_r+0x6c>
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	4401      	add	r1, r0
 8002b8c:	1850      	adds	r0, r2, r1
 8002b8e:	4283      	cmp	r3, r0
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	d1e0      	bne.n	8002b56 <_free_r+0x22>
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4408      	add	r0, r1
 8002b9a:	6010      	str	r0, [r2, #0]
 8002b9c:	6053      	str	r3, [r2, #4]
 8002b9e:	e7da      	b.n	8002b56 <_free_r+0x22>
 8002ba0:	d902      	bls.n	8002ba8 <_free_r+0x74>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	e7d6      	b.n	8002b56 <_free_r+0x22>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	1821      	adds	r1, r4, r0
 8002bac:	428b      	cmp	r3, r1
 8002bae:	bf01      	itttt	eq
 8002bb0:	6819      	ldreq	r1, [r3, #0]
 8002bb2:	685b      	ldreq	r3, [r3, #4]
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6063      	str	r3, [r4, #4]
 8002bba:	6054      	str	r4, [r2, #4]
 8002bbc:	e7cb      	b.n	8002b56 <_free_r+0x22>
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	200002f8 	.word	0x200002f8

08002bc4 <sbrk_aligned>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8002c04 <sbrk_aligned+0x40>)
 8002bc8:	460c      	mov	r4, r1
 8002bca:	6831      	ldr	r1, [r6, #0]
 8002bcc:	4605      	mov	r5, r0
 8002bce:	b911      	cbnz	r1, 8002bd6 <sbrk_aligned+0x12>
 8002bd0:	f000 fba8 	bl	8003324 <_sbrk_r>
 8002bd4:	6030      	str	r0, [r6, #0]
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 fba3 	bl	8003324 <_sbrk_r>
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d103      	bne.n	8002bea <sbrk_aligned+0x26>
 8002be2:	f04f 34ff 	mov.w	r4, #4294967295
 8002be6:	4620      	mov	r0, r4
 8002be8:	bd70      	pop	{r4, r5, r6, pc}
 8002bea:	1cc4      	adds	r4, r0, #3
 8002bec:	f024 0403 	bic.w	r4, r4, #3
 8002bf0:	42a0      	cmp	r0, r4
 8002bf2:	d0f8      	beq.n	8002be6 <sbrk_aligned+0x22>
 8002bf4:	1a21      	subs	r1, r4, r0
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 fb94 	bl	8003324 <_sbrk_r>
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	d1f2      	bne.n	8002be6 <sbrk_aligned+0x22>
 8002c00:	e7ef      	b.n	8002be2 <sbrk_aligned+0x1e>
 8002c02:	bf00      	nop
 8002c04:	200002f4 	.word	0x200002f4

08002c08 <_malloc_r>:
 8002c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c0c:	1ccd      	adds	r5, r1, #3
 8002c0e:	f025 0503 	bic.w	r5, r5, #3
 8002c12:	3508      	adds	r5, #8
 8002c14:	2d0c      	cmp	r5, #12
 8002c16:	bf38      	it	cc
 8002c18:	250c      	movcc	r5, #12
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	db01      	blt.n	8002c24 <_malloc_r+0x1c>
 8002c20:	42a9      	cmp	r1, r5
 8002c22:	d904      	bls.n	8002c2e <_malloc_r+0x26>
 8002c24:	230c      	movs	r3, #12
 8002c26:	6033      	str	r3, [r6, #0]
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d04 <_malloc_r+0xfc>
 8002c32:	f000 f869 	bl	8002d08 <__malloc_lock>
 8002c36:	f8d8 3000 	ldr.w	r3, [r8]
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	bb44      	cbnz	r4, 8002c90 <_malloc_r+0x88>
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4630      	mov	r0, r6
 8002c42:	f7ff ffbf 	bl	8002bc4 <sbrk_aligned>
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	4604      	mov	r4, r0
 8002c4a:	d158      	bne.n	8002cfe <_malloc_r+0xf6>
 8002c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8002c50:	4627      	mov	r7, r4
 8002c52:	2f00      	cmp	r7, #0
 8002c54:	d143      	bne.n	8002cde <_malloc_r+0xd6>
 8002c56:	2c00      	cmp	r4, #0
 8002c58:	d04b      	beq.n	8002cf2 <_malloc_r+0xea>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4639      	mov	r1, r7
 8002c5e:	4630      	mov	r0, r6
 8002c60:	eb04 0903 	add.w	r9, r4, r3
 8002c64:	f000 fb5e 	bl	8003324 <_sbrk_r>
 8002c68:	4581      	cmp	r9, r0
 8002c6a:	d142      	bne.n	8002cf2 <_malloc_r+0xea>
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	4630      	mov	r0, r6
 8002c70:	1a6d      	subs	r5, r5, r1
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7ff ffa6 	bl	8002bc4 <sbrk_aligned>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d03a      	beq.n	8002cf2 <_malloc_r+0xea>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	442b      	add	r3, r5
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	f8d8 3000 	ldr.w	r3, [r8]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	bb62      	cbnz	r2, 8002ce4 <_malloc_r+0xdc>
 8002c8a:	f8c8 7000 	str.w	r7, [r8]
 8002c8e:	e00f      	b.n	8002cb0 <_malloc_r+0xa8>
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	1b52      	subs	r2, r2, r5
 8002c94:	d420      	bmi.n	8002cd8 <_malloc_r+0xd0>
 8002c96:	2a0b      	cmp	r2, #11
 8002c98:	d917      	bls.n	8002cca <_malloc_r+0xc2>
 8002c9a:	1961      	adds	r1, r4, r5
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	6025      	str	r5, [r4, #0]
 8002ca0:	bf18      	it	ne
 8002ca2:	6059      	strne	r1, [r3, #4]
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	bf08      	it	eq
 8002ca8:	f8c8 1000 	streq.w	r1, [r8]
 8002cac:	5162      	str	r2, [r4, r5]
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f000 f82f 	bl	8002d14 <__malloc_unlock>
 8002cb6:	f104 000b 	add.w	r0, r4, #11
 8002cba:	1d23      	adds	r3, r4, #4
 8002cbc:	f020 0007 	bic.w	r0, r0, #7
 8002cc0:	1ac2      	subs	r2, r0, r3
 8002cc2:	bf1c      	itt	ne
 8002cc4:	1a1b      	subne	r3, r3, r0
 8002cc6:	50a3      	strne	r3, [r4, r2]
 8002cc8:	e7af      	b.n	8002c2a <_malloc_r+0x22>
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	bf0c      	ite	eq
 8002cd0:	f8c8 2000 	streq.w	r2, [r8]
 8002cd4:	605a      	strne	r2, [r3, #4]
 8002cd6:	e7eb      	b.n	8002cb0 <_malloc_r+0xa8>
 8002cd8:	4623      	mov	r3, r4
 8002cda:	6864      	ldr	r4, [r4, #4]
 8002cdc:	e7ae      	b.n	8002c3c <_malloc_r+0x34>
 8002cde:	463c      	mov	r4, r7
 8002ce0:	687f      	ldr	r7, [r7, #4]
 8002ce2:	e7b6      	b.n	8002c52 <_malloc_r+0x4a>
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d1fb      	bne.n	8002ce4 <_malloc_r+0xdc>
 8002cec:	2300      	movs	r3, #0
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e7de      	b.n	8002cb0 <_malloc_r+0xa8>
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	6033      	str	r3, [r6, #0]
 8002cf8:	f000 f80c 	bl	8002d14 <__malloc_unlock>
 8002cfc:	e794      	b.n	8002c28 <_malloc_r+0x20>
 8002cfe:	6005      	str	r5, [r0, #0]
 8002d00:	e7d6      	b.n	8002cb0 <_malloc_r+0xa8>
 8002d02:	bf00      	nop
 8002d04:	200002f8 	.word	0x200002f8

08002d08 <__malloc_lock>:
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <__malloc_lock+0x8>)
 8002d0a:	f7ff bf11 	b.w	8002b30 <__retarget_lock_acquire_recursive>
 8002d0e:	bf00      	nop
 8002d10:	200002f0 	.word	0x200002f0

08002d14 <__malloc_unlock>:
 8002d14:	4801      	ldr	r0, [pc, #4]	@ (8002d1c <__malloc_unlock+0x8>)
 8002d16:	f7ff bf0c 	b.w	8002b32 <__retarget_lock_release_recursive>
 8002d1a:	bf00      	nop
 8002d1c:	200002f0 	.word	0x200002f0

08002d20 <__ssputs_r>:
 8002d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d24:	461f      	mov	r7, r3
 8002d26:	688e      	ldr	r6, [r1, #8]
 8002d28:	4682      	mov	sl, r0
 8002d2a:	42be      	cmp	r6, r7
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	4690      	mov	r8, r2
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	d82d      	bhi.n	8002d90 <__ssputs_r+0x70>
 8002d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002d3c:	d026      	beq.n	8002d8c <__ssputs_r+0x6c>
 8002d3e:	6965      	ldr	r5, [r4, #20]
 8002d40:	6909      	ldr	r1, [r1, #16]
 8002d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d46:	eba3 0901 	sub.w	r9, r3, r1
 8002d4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d4e:	1c7b      	adds	r3, r7, #1
 8002d50:	444b      	add	r3, r9
 8002d52:	106d      	asrs	r5, r5, #1
 8002d54:	429d      	cmp	r5, r3
 8002d56:	bf38      	it	cc
 8002d58:	461d      	movcc	r5, r3
 8002d5a:	0553      	lsls	r3, r2, #21
 8002d5c:	d527      	bpl.n	8002dae <__ssputs_r+0x8e>
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7ff ff52 	bl	8002c08 <_malloc_r>
 8002d64:	4606      	mov	r6, r0
 8002d66:	b360      	cbz	r0, 8002dc2 <__ssputs_r+0xa2>
 8002d68:	464a      	mov	r2, r9
 8002d6a:	6921      	ldr	r1, [r4, #16]
 8002d6c:	f000 faf8 	bl	8003360 <memcpy>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7a:	81a3      	strh	r3, [r4, #12]
 8002d7c:	6126      	str	r6, [r4, #16]
 8002d7e:	444e      	add	r6, r9
 8002d80:	6026      	str	r6, [r4, #0]
 8002d82:	463e      	mov	r6, r7
 8002d84:	6165      	str	r5, [r4, #20]
 8002d86:	eba5 0509 	sub.w	r5, r5, r9
 8002d8a:	60a5      	str	r5, [r4, #8]
 8002d8c:	42be      	cmp	r6, r7
 8002d8e:	d900      	bls.n	8002d92 <__ssputs_r+0x72>
 8002d90:	463e      	mov	r6, r7
 8002d92:	4632      	mov	r2, r6
 8002d94:	4641      	mov	r1, r8
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	f000 faaa 	bl	80032f0 <memmove>
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	68a3      	ldr	r3, [r4, #8]
 8002da0:	1b9b      	subs	r3, r3, r6
 8002da2:	60a3      	str	r3, [r4, #8]
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	4433      	add	r3, r6
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dae:	462a      	mov	r2, r5
 8002db0:	f000 fae4 	bl	800337c <_realloc_r>
 8002db4:	4606      	mov	r6, r0
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d1e0      	bne.n	8002d7c <__ssputs_r+0x5c>
 8002dba:	4650      	mov	r0, sl
 8002dbc:	6921      	ldr	r1, [r4, #16]
 8002dbe:	f7ff feb9 	bl	8002b34 <_free_r>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	f8ca 3000 	str.w	r3, [sl]
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	f04f 30ff 	mov.w	r0, #4294967295
 8002dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd2:	81a3      	strh	r3, [r4, #12]
 8002dd4:	e7e9      	b.n	8002daa <__ssputs_r+0x8a>
	...

08002dd8 <_svfiprintf_r>:
 8002dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ddc:	4698      	mov	r8, r3
 8002dde:	898b      	ldrh	r3, [r1, #12]
 8002de0:	4607      	mov	r7, r0
 8002de2:	061b      	lsls	r3, r3, #24
 8002de4:	460d      	mov	r5, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	b09d      	sub	sp, #116	@ 0x74
 8002dea:	d510      	bpl.n	8002e0e <_svfiprintf_r+0x36>
 8002dec:	690b      	ldr	r3, [r1, #16]
 8002dee:	b973      	cbnz	r3, 8002e0e <_svfiprintf_r+0x36>
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	f7ff ff09 	bl	8002c08 <_malloc_r>
 8002df6:	6028      	str	r0, [r5, #0]
 8002df8:	6128      	str	r0, [r5, #16]
 8002dfa:	b930      	cbnz	r0, 8002e0a <_svfiprintf_r+0x32>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	b01d      	add	sp, #116	@ 0x74
 8002e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0a:	2340      	movs	r3, #64	@ 0x40
 8002e0c:	616b      	str	r3, [r5, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e12:	2320      	movs	r3, #32
 8002e14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e18:	2330      	movs	r3, #48	@ 0x30
 8002e1a:	f04f 0901 	mov.w	r9, #1
 8002e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002fbc <_svfiprintf_r+0x1e4>
 8002e26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	469a      	mov	sl, r3
 8002e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e32:	b10a      	cbz	r2, 8002e38 <_svfiprintf_r+0x60>
 8002e34:	2a25      	cmp	r2, #37	@ 0x25
 8002e36:	d1f9      	bne.n	8002e2c <_svfiprintf_r+0x54>
 8002e38:	ebba 0b04 	subs.w	fp, sl, r4
 8002e3c:	d00b      	beq.n	8002e56 <_svfiprintf_r+0x7e>
 8002e3e:	465b      	mov	r3, fp
 8002e40:	4622      	mov	r2, r4
 8002e42:	4629      	mov	r1, r5
 8002e44:	4638      	mov	r0, r7
 8002e46:	f7ff ff6b 	bl	8002d20 <__ssputs_r>
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	f000 80a7 	beq.w	8002f9e <_svfiprintf_r+0x1c6>
 8002e50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e52:	445a      	add	r2, fp
 8002e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e56:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 809f 	beq.w	8002f9e <_svfiprintf_r+0x1c6>
 8002e60:	2300      	movs	r3, #0
 8002e62:	f04f 32ff 	mov.w	r2, #4294967295
 8002e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e6a:	f10a 0a01 	add.w	sl, sl, #1
 8002e6e:	9304      	str	r3, [sp, #16]
 8002e70:	9307      	str	r3, [sp, #28]
 8002e72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e76:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e78:	4654      	mov	r4, sl
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e80:	484e      	ldr	r0, [pc, #312]	@ (8002fbc <_svfiprintf_r+0x1e4>)
 8002e82:	f000 fa5f 	bl	8003344 <memchr>
 8002e86:	9a04      	ldr	r2, [sp, #16]
 8002e88:	b9d8      	cbnz	r0, 8002ec2 <_svfiprintf_r+0xea>
 8002e8a:	06d0      	lsls	r0, r2, #27
 8002e8c:	bf44      	itt	mi
 8002e8e:	2320      	movmi	r3, #32
 8002e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e94:	0711      	lsls	r1, r2, #28
 8002e96:	bf44      	itt	mi
 8002e98:	232b      	movmi	r3, #43	@ 0x2b
 8002e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ea4:	d015      	beq.n	8002ed2 <_svfiprintf_r+0xfa>
 8002ea6:	4654      	mov	r4, sl
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f04f 0c0a 	mov.w	ip, #10
 8002eae:	9a07      	ldr	r2, [sp, #28]
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eb6:	3b30      	subs	r3, #48	@ 0x30
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	d94b      	bls.n	8002f54 <_svfiprintf_r+0x17c>
 8002ebc:	b1b0      	cbz	r0, 8002eec <_svfiprintf_r+0x114>
 8002ebe:	9207      	str	r2, [sp, #28]
 8002ec0:	e014      	b.n	8002eec <_svfiprintf_r+0x114>
 8002ec2:	eba0 0308 	sub.w	r3, r0, r8
 8002ec6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	46a2      	mov	sl, r4
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	e7d2      	b.n	8002e78 <_svfiprintf_r+0xa0>
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	1d19      	adds	r1, r3, #4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	9103      	str	r1, [sp, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bfbb      	ittet	lt
 8002ede:	425b      	neglt	r3, r3
 8002ee0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ee4:	9307      	strge	r3, [sp, #28]
 8002ee6:	9307      	strlt	r3, [sp, #28]
 8002ee8:	bfb8      	it	lt
 8002eea:	9204      	strlt	r2, [sp, #16]
 8002eec:	7823      	ldrb	r3, [r4, #0]
 8002eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ef0:	d10a      	bne.n	8002f08 <_svfiprintf_r+0x130>
 8002ef2:	7863      	ldrb	r3, [r4, #1]
 8002ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ef6:	d132      	bne.n	8002f5e <_svfiprintf_r+0x186>
 8002ef8:	9b03      	ldr	r3, [sp, #12]
 8002efa:	3402      	adds	r4, #2
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	9203      	str	r2, [sp, #12]
 8002f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f06:	9305      	str	r3, [sp, #20]
 8002f08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002fc0 <_svfiprintf_r+0x1e8>
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4650      	mov	r0, sl
 8002f10:	7821      	ldrb	r1, [r4, #0]
 8002f12:	f000 fa17 	bl	8003344 <memchr>
 8002f16:	b138      	cbz	r0, 8002f28 <_svfiprintf_r+0x150>
 8002f18:	2240      	movs	r2, #64	@ 0x40
 8002f1a:	9b04      	ldr	r3, [sp, #16]
 8002f1c:	eba0 000a 	sub.w	r0, r0, sl
 8002f20:	4082      	lsls	r2, r0
 8002f22:	4313      	orrs	r3, r2
 8002f24:	3401      	adds	r4, #1
 8002f26:	9304      	str	r3, [sp, #16]
 8002f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	4825      	ldr	r0, [pc, #148]	@ (8002fc4 <_svfiprintf_r+0x1ec>)
 8002f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f34:	f000 fa06 	bl	8003344 <memchr>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d036      	beq.n	8002faa <_svfiprintf_r+0x1d2>
 8002f3c:	4b22      	ldr	r3, [pc, #136]	@ (8002fc8 <_svfiprintf_r+0x1f0>)
 8002f3e:	bb1b      	cbnz	r3, 8002f88 <_svfiprintf_r+0x1b0>
 8002f40:	9b03      	ldr	r3, [sp, #12]
 8002f42:	3307      	adds	r3, #7
 8002f44:	f023 0307 	bic.w	r3, r3, #7
 8002f48:	3308      	adds	r3, #8
 8002f4a:	9303      	str	r3, [sp, #12]
 8002f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f4e:	4433      	add	r3, r6
 8002f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f52:	e76a      	b.n	8002e2a <_svfiprintf_r+0x52>
 8002f54:	460c      	mov	r4, r1
 8002f56:	2001      	movs	r0, #1
 8002f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f5c:	e7a8      	b.n	8002eb0 <_svfiprintf_r+0xd8>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f04f 0c0a 	mov.w	ip, #10
 8002f64:	4619      	mov	r1, r3
 8002f66:	3401      	adds	r4, #1
 8002f68:	9305      	str	r3, [sp, #20]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f70:	3a30      	subs	r2, #48	@ 0x30
 8002f72:	2a09      	cmp	r2, #9
 8002f74:	d903      	bls.n	8002f7e <_svfiprintf_r+0x1a6>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0c6      	beq.n	8002f08 <_svfiprintf_r+0x130>
 8002f7a:	9105      	str	r1, [sp, #20]
 8002f7c:	e7c4      	b.n	8002f08 <_svfiprintf_r+0x130>
 8002f7e:	4604      	mov	r4, r0
 8002f80:	2301      	movs	r3, #1
 8002f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f86:	e7f0      	b.n	8002f6a <_svfiprintf_r+0x192>
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4638      	mov	r0, r7
 8002f90:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <_svfiprintf_r+0x1f4>)
 8002f92:	a904      	add	r1, sp, #16
 8002f94:	f3af 8000 	nop.w
 8002f98:	1c42      	adds	r2, r0, #1
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	d1d6      	bne.n	8002f4c <_svfiprintf_r+0x174>
 8002f9e:	89ab      	ldrh	r3, [r5, #12]
 8002fa0:	065b      	lsls	r3, r3, #25
 8002fa2:	f53f af2d 	bmi.w	8002e00 <_svfiprintf_r+0x28>
 8002fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fa8:	e72c      	b.n	8002e04 <_svfiprintf_r+0x2c>
 8002faa:	ab03      	add	r3, sp, #12
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	462a      	mov	r2, r5
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <_svfiprintf_r+0x1f4>)
 8002fb4:	a904      	add	r1, sp, #16
 8002fb6:	f000 f87d 	bl	80030b4 <_printf_i>
 8002fba:	e7ed      	b.n	8002f98 <_svfiprintf_r+0x1c0>
 8002fbc:	08003576 	.word	0x08003576
 8002fc0:	0800357c 	.word	0x0800357c
 8002fc4:	08003580 	.word	0x08003580
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	08002d21 	.word	0x08002d21

08002fd0 <_printf_common>:
 8002fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	4616      	mov	r6, r2
 8002fd6:	4698      	mov	r8, r3
 8002fd8:	688a      	ldr	r2, [r1, #8]
 8002fda:	690b      	ldr	r3, [r1, #16]
 8002fdc:	4607      	mov	r7, r0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bfb8      	it	lt
 8002fe2:	4613      	movlt	r3, r2
 8002fe4:	6033      	str	r3, [r6, #0]
 8002fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fea:	460c      	mov	r4, r1
 8002fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ff0:	b10a      	cbz	r2, 8002ff6 <_printf_common+0x26>
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	6033      	str	r3, [r6, #0]
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	0699      	lsls	r1, r3, #26
 8002ffa:	bf42      	ittt	mi
 8002ffc:	6833      	ldrmi	r3, [r6, #0]
 8002ffe:	3302      	addmi	r3, #2
 8003000:	6033      	strmi	r3, [r6, #0]
 8003002:	6825      	ldr	r5, [r4, #0]
 8003004:	f015 0506 	ands.w	r5, r5, #6
 8003008:	d106      	bne.n	8003018 <_printf_common+0x48>
 800300a:	f104 0a19 	add.w	sl, r4, #25
 800300e:	68e3      	ldr	r3, [r4, #12]
 8003010:	6832      	ldr	r2, [r6, #0]
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	42ab      	cmp	r3, r5
 8003016:	dc2b      	bgt.n	8003070 <_printf_common+0xa0>
 8003018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	3b00      	subs	r3, #0
 8003020:	bf18      	it	ne
 8003022:	2301      	movne	r3, #1
 8003024:	0692      	lsls	r2, r2, #26
 8003026:	d430      	bmi.n	800308a <_printf_common+0xba>
 8003028:	4641      	mov	r1, r8
 800302a:	4638      	mov	r0, r7
 800302c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003030:	47c8      	blx	r9
 8003032:	3001      	adds	r0, #1
 8003034:	d023      	beq.n	800307e <_printf_common+0xae>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	6922      	ldr	r2, [r4, #16]
 800303a:	f003 0306 	and.w	r3, r3, #6
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf14      	ite	ne
 8003042:	2500      	movne	r5, #0
 8003044:	6833      	ldreq	r3, [r6, #0]
 8003046:	f04f 0600 	mov.w	r6, #0
 800304a:	bf08      	it	eq
 800304c:	68e5      	ldreq	r5, [r4, #12]
 800304e:	f104 041a 	add.w	r4, r4, #26
 8003052:	bf08      	it	eq
 8003054:	1aed      	subeq	r5, r5, r3
 8003056:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800305a:	bf08      	it	eq
 800305c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003060:	4293      	cmp	r3, r2
 8003062:	bfc4      	itt	gt
 8003064:	1a9b      	subgt	r3, r3, r2
 8003066:	18ed      	addgt	r5, r5, r3
 8003068:	42b5      	cmp	r5, r6
 800306a:	d11a      	bne.n	80030a2 <_printf_common+0xd2>
 800306c:	2000      	movs	r0, #0
 800306e:	e008      	b.n	8003082 <_printf_common+0xb2>
 8003070:	2301      	movs	r3, #1
 8003072:	4652      	mov	r2, sl
 8003074:	4641      	mov	r1, r8
 8003076:	4638      	mov	r0, r7
 8003078:	47c8      	blx	r9
 800307a:	3001      	adds	r0, #1
 800307c:	d103      	bne.n	8003086 <_printf_common+0xb6>
 800307e:	f04f 30ff 	mov.w	r0, #4294967295
 8003082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003086:	3501      	adds	r5, #1
 8003088:	e7c1      	b.n	800300e <_printf_common+0x3e>
 800308a:	2030      	movs	r0, #48	@ 0x30
 800308c:	18e1      	adds	r1, r4, r3
 800308e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003098:	4422      	add	r2, r4
 800309a:	3302      	adds	r3, #2
 800309c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030a0:	e7c2      	b.n	8003028 <_printf_common+0x58>
 80030a2:	2301      	movs	r3, #1
 80030a4:	4622      	mov	r2, r4
 80030a6:	4641      	mov	r1, r8
 80030a8:	4638      	mov	r0, r7
 80030aa:	47c8      	blx	r9
 80030ac:	3001      	adds	r0, #1
 80030ae:	d0e6      	beq.n	800307e <_printf_common+0xae>
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7d9      	b.n	8003068 <_printf_common+0x98>

080030b4 <_printf_i>:
 80030b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030b8:	7e0f      	ldrb	r7, [r1, #24]
 80030ba:	4691      	mov	r9, r2
 80030bc:	2f78      	cmp	r7, #120	@ 0x78
 80030be:	4680      	mov	r8, r0
 80030c0:	460c      	mov	r4, r1
 80030c2:	469a      	mov	sl, r3
 80030c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030ca:	d807      	bhi.n	80030dc <_printf_i+0x28>
 80030cc:	2f62      	cmp	r7, #98	@ 0x62
 80030ce:	d80a      	bhi.n	80030e6 <_printf_i+0x32>
 80030d0:	2f00      	cmp	r7, #0
 80030d2:	f000 80d1 	beq.w	8003278 <_printf_i+0x1c4>
 80030d6:	2f58      	cmp	r7, #88	@ 0x58
 80030d8:	f000 80b8 	beq.w	800324c <_printf_i+0x198>
 80030dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030e4:	e03a      	b.n	800315c <_printf_i+0xa8>
 80030e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030ea:	2b15      	cmp	r3, #21
 80030ec:	d8f6      	bhi.n	80030dc <_printf_i+0x28>
 80030ee:	a101      	add	r1, pc, #4	@ (adr r1, 80030f4 <_printf_i+0x40>)
 80030f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030f4:	0800314d 	.word	0x0800314d
 80030f8:	08003161 	.word	0x08003161
 80030fc:	080030dd 	.word	0x080030dd
 8003100:	080030dd 	.word	0x080030dd
 8003104:	080030dd 	.word	0x080030dd
 8003108:	080030dd 	.word	0x080030dd
 800310c:	08003161 	.word	0x08003161
 8003110:	080030dd 	.word	0x080030dd
 8003114:	080030dd 	.word	0x080030dd
 8003118:	080030dd 	.word	0x080030dd
 800311c:	080030dd 	.word	0x080030dd
 8003120:	0800325f 	.word	0x0800325f
 8003124:	0800318b 	.word	0x0800318b
 8003128:	08003219 	.word	0x08003219
 800312c:	080030dd 	.word	0x080030dd
 8003130:	080030dd 	.word	0x080030dd
 8003134:	08003281 	.word	0x08003281
 8003138:	080030dd 	.word	0x080030dd
 800313c:	0800318b 	.word	0x0800318b
 8003140:	080030dd 	.word	0x080030dd
 8003144:	080030dd 	.word	0x080030dd
 8003148:	08003221 	.word	0x08003221
 800314c:	6833      	ldr	r3, [r6, #0]
 800314e:	1d1a      	adds	r2, r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6032      	str	r2, [r6, #0]
 8003154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800315c:	2301      	movs	r3, #1
 800315e:	e09c      	b.n	800329a <_printf_i+0x1e6>
 8003160:	6833      	ldr	r3, [r6, #0]
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	1d19      	adds	r1, r3, #4
 8003166:	6031      	str	r1, [r6, #0]
 8003168:	0606      	lsls	r6, r0, #24
 800316a:	d501      	bpl.n	8003170 <_printf_i+0xbc>
 800316c:	681d      	ldr	r5, [r3, #0]
 800316e:	e003      	b.n	8003178 <_printf_i+0xc4>
 8003170:	0645      	lsls	r5, r0, #25
 8003172:	d5fb      	bpl.n	800316c <_printf_i+0xb8>
 8003174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003178:	2d00      	cmp	r5, #0
 800317a:	da03      	bge.n	8003184 <_printf_i+0xd0>
 800317c:	232d      	movs	r3, #45	@ 0x2d
 800317e:	426d      	negs	r5, r5
 8003180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003184:	230a      	movs	r3, #10
 8003186:	4858      	ldr	r0, [pc, #352]	@ (80032e8 <_printf_i+0x234>)
 8003188:	e011      	b.n	80031ae <_printf_i+0xfa>
 800318a:	6821      	ldr	r1, [r4, #0]
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	0608      	lsls	r0, r1, #24
 8003190:	f853 5b04 	ldr.w	r5, [r3], #4
 8003194:	d402      	bmi.n	800319c <_printf_i+0xe8>
 8003196:	0649      	lsls	r1, r1, #25
 8003198:	bf48      	it	mi
 800319a:	b2ad      	uxthmi	r5, r5
 800319c:	2f6f      	cmp	r7, #111	@ 0x6f
 800319e:	6033      	str	r3, [r6, #0]
 80031a0:	bf14      	ite	ne
 80031a2:	230a      	movne	r3, #10
 80031a4:	2308      	moveq	r3, #8
 80031a6:	4850      	ldr	r0, [pc, #320]	@ (80032e8 <_printf_i+0x234>)
 80031a8:	2100      	movs	r1, #0
 80031aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031ae:	6866      	ldr	r6, [r4, #4]
 80031b0:	2e00      	cmp	r6, #0
 80031b2:	60a6      	str	r6, [r4, #8]
 80031b4:	db05      	blt.n	80031c2 <_printf_i+0x10e>
 80031b6:	6821      	ldr	r1, [r4, #0]
 80031b8:	432e      	orrs	r6, r5
 80031ba:	f021 0104 	bic.w	r1, r1, #4
 80031be:	6021      	str	r1, [r4, #0]
 80031c0:	d04b      	beq.n	800325a <_printf_i+0x1a6>
 80031c2:	4616      	mov	r6, r2
 80031c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80031c8:	fb03 5711 	mls	r7, r3, r1, r5
 80031cc:	5dc7      	ldrb	r7, [r0, r7]
 80031ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031d2:	462f      	mov	r7, r5
 80031d4:	42bb      	cmp	r3, r7
 80031d6:	460d      	mov	r5, r1
 80031d8:	d9f4      	bls.n	80031c4 <_printf_i+0x110>
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d10b      	bne.n	80031f6 <_printf_i+0x142>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	07df      	lsls	r7, r3, #31
 80031e2:	d508      	bpl.n	80031f6 <_printf_i+0x142>
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	6861      	ldr	r1, [r4, #4]
 80031e8:	4299      	cmp	r1, r3
 80031ea:	bfde      	ittt	le
 80031ec:	2330      	movle	r3, #48	@ 0x30
 80031ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031f6:	1b92      	subs	r2, r2, r6
 80031f8:	6122      	str	r2, [r4, #16]
 80031fa:	464b      	mov	r3, r9
 80031fc:	4621      	mov	r1, r4
 80031fe:	4640      	mov	r0, r8
 8003200:	f8cd a000 	str.w	sl, [sp]
 8003204:	aa03      	add	r2, sp, #12
 8003206:	f7ff fee3 	bl	8002fd0 <_printf_common>
 800320a:	3001      	adds	r0, #1
 800320c:	d14a      	bne.n	80032a4 <_printf_i+0x1f0>
 800320e:	f04f 30ff 	mov.w	r0, #4294967295
 8003212:	b004      	add	sp, #16
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f043 0320 	orr.w	r3, r3, #32
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	2778      	movs	r7, #120	@ 0x78
 8003222:	4832      	ldr	r0, [pc, #200]	@ (80032ec <_printf_i+0x238>)
 8003224:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	6831      	ldr	r1, [r6, #0]
 800322c:	061f      	lsls	r7, r3, #24
 800322e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003232:	d402      	bmi.n	800323a <_printf_i+0x186>
 8003234:	065f      	lsls	r7, r3, #25
 8003236:	bf48      	it	mi
 8003238:	b2ad      	uxthmi	r5, r5
 800323a:	6031      	str	r1, [r6, #0]
 800323c:	07d9      	lsls	r1, r3, #31
 800323e:	bf44      	itt	mi
 8003240:	f043 0320 	orrmi.w	r3, r3, #32
 8003244:	6023      	strmi	r3, [r4, #0]
 8003246:	b11d      	cbz	r5, 8003250 <_printf_i+0x19c>
 8003248:	2310      	movs	r3, #16
 800324a:	e7ad      	b.n	80031a8 <_printf_i+0xf4>
 800324c:	4826      	ldr	r0, [pc, #152]	@ (80032e8 <_printf_i+0x234>)
 800324e:	e7e9      	b.n	8003224 <_printf_i+0x170>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	f023 0320 	bic.w	r3, r3, #32
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	e7f6      	b.n	8003248 <_printf_i+0x194>
 800325a:	4616      	mov	r6, r2
 800325c:	e7bd      	b.n	80031da <_printf_i+0x126>
 800325e:	6833      	ldr	r3, [r6, #0]
 8003260:	6825      	ldr	r5, [r4, #0]
 8003262:	1d18      	adds	r0, r3, #4
 8003264:	6961      	ldr	r1, [r4, #20]
 8003266:	6030      	str	r0, [r6, #0]
 8003268:	062e      	lsls	r6, r5, #24
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	d501      	bpl.n	8003272 <_printf_i+0x1be>
 800326e:	6019      	str	r1, [r3, #0]
 8003270:	e002      	b.n	8003278 <_printf_i+0x1c4>
 8003272:	0668      	lsls	r0, r5, #25
 8003274:	d5fb      	bpl.n	800326e <_printf_i+0x1ba>
 8003276:	8019      	strh	r1, [r3, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	4616      	mov	r6, r2
 800327c:	6123      	str	r3, [r4, #16]
 800327e:	e7bc      	b.n	80031fa <_printf_i+0x146>
 8003280:	6833      	ldr	r3, [r6, #0]
 8003282:	2100      	movs	r1, #0
 8003284:	1d1a      	adds	r2, r3, #4
 8003286:	6032      	str	r2, [r6, #0]
 8003288:	681e      	ldr	r6, [r3, #0]
 800328a:	6862      	ldr	r2, [r4, #4]
 800328c:	4630      	mov	r0, r6
 800328e:	f000 f859 	bl	8003344 <memchr>
 8003292:	b108      	cbz	r0, 8003298 <_printf_i+0x1e4>
 8003294:	1b80      	subs	r0, r0, r6
 8003296:	6060      	str	r0, [r4, #4]
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	6123      	str	r3, [r4, #16]
 800329c:	2300      	movs	r3, #0
 800329e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032a2:	e7aa      	b.n	80031fa <_printf_i+0x146>
 80032a4:	4632      	mov	r2, r6
 80032a6:	4649      	mov	r1, r9
 80032a8:	4640      	mov	r0, r8
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	47d0      	blx	sl
 80032ae:	3001      	adds	r0, #1
 80032b0:	d0ad      	beq.n	800320e <_printf_i+0x15a>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	079b      	lsls	r3, r3, #30
 80032b6:	d413      	bmi.n	80032e0 <_printf_i+0x22c>
 80032b8:	68e0      	ldr	r0, [r4, #12]
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	4298      	cmp	r0, r3
 80032be:	bfb8      	it	lt
 80032c0:	4618      	movlt	r0, r3
 80032c2:	e7a6      	b.n	8003212 <_printf_i+0x15e>
 80032c4:	2301      	movs	r3, #1
 80032c6:	4632      	mov	r2, r6
 80032c8:	4649      	mov	r1, r9
 80032ca:	4640      	mov	r0, r8
 80032cc:	47d0      	blx	sl
 80032ce:	3001      	adds	r0, #1
 80032d0:	d09d      	beq.n	800320e <_printf_i+0x15a>
 80032d2:	3501      	adds	r5, #1
 80032d4:	68e3      	ldr	r3, [r4, #12]
 80032d6:	9903      	ldr	r1, [sp, #12]
 80032d8:	1a5b      	subs	r3, r3, r1
 80032da:	42ab      	cmp	r3, r5
 80032dc:	dcf2      	bgt.n	80032c4 <_printf_i+0x210>
 80032de:	e7eb      	b.n	80032b8 <_printf_i+0x204>
 80032e0:	2500      	movs	r5, #0
 80032e2:	f104 0619 	add.w	r6, r4, #25
 80032e6:	e7f5      	b.n	80032d4 <_printf_i+0x220>
 80032e8:	08003587 	.word	0x08003587
 80032ec:	08003598 	.word	0x08003598

080032f0 <memmove>:
 80032f0:	4288      	cmp	r0, r1
 80032f2:	b510      	push	{r4, lr}
 80032f4:	eb01 0402 	add.w	r4, r1, r2
 80032f8:	d902      	bls.n	8003300 <memmove+0x10>
 80032fa:	4284      	cmp	r4, r0
 80032fc:	4623      	mov	r3, r4
 80032fe:	d807      	bhi.n	8003310 <memmove+0x20>
 8003300:	1e43      	subs	r3, r0, #1
 8003302:	42a1      	cmp	r1, r4
 8003304:	d008      	beq.n	8003318 <memmove+0x28>
 8003306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800330a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800330e:	e7f8      	b.n	8003302 <memmove+0x12>
 8003310:	4601      	mov	r1, r0
 8003312:	4402      	add	r2, r0
 8003314:	428a      	cmp	r2, r1
 8003316:	d100      	bne.n	800331a <memmove+0x2a>
 8003318:	bd10      	pop	{r4, pc}
 800331a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800331e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003322:	e7f7      	b.n	8003314 <memmove+0x24>

08003324 <_sbrk_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	2300      	movs	r3, #0
 8003328:	4d05      	ldr	r5, [pc, #20]	@ (8003340 <_sbrk_r+0x1c>)
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	f7fd fc90 	bl	8000c54 <_sbrk>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_sbrk_r+0x1a>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	b103      	cbz	r3, 800333e <_sbrk_r+0x1a>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	200002ec 	.word	0x200002ec

08003344 <memchr>:
 8003344:	4603      	mov	r3, r0
 8003346:	b510      	push	{r4, lr}
 8003348:	b2c9      	uxtb	r1, r1
 800334a:	4402      	add	r2, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	4618      	mov	r0, r3
 8003350:	d101      	bne.n	8003356 <memchr+0x12>
 8003352:	2000      	movs	r0, #0
 8003354:	e003      	b.n	800335e <memchr+0x1a>
 8003356:	7804      	ldrb	r4, [r0, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	428c      	cmp	r4, r1
 800335c:	d1f6      	bne.n	800334c <memchr+0x8>
 800335e:	bd10      	pop	{r4, pc}

08003360 <memcpy>:
 8003360:	440a      	add	r2, r1
 8003362:	4291      	cmp	r1, r2
 8003364:	f100 33ff 	add.w	r3, r0, #4294967295
 8003368:	d100      	bne.n	800336c <memcpy+0xc>
 800336a:	4770      	bx	lr
 800336c:	b510      	push	{r4, lr}
 800336e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003372:	4291      	cmp	r1, r2
 8003374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003378:	d1f9      	bne.n	800336e <memcpy+0xe>
 800337a:	bd10      	pop	{r4, pc}

0800337c <_realloc_r>:
 800337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003380:	4607      	mov	r7, r0
 8003382:	4614      	mov	r4, r2
 8003384:	460d      	mov	r5, r1
 8003386:	b921      	cbnz	r1, 8003392 <_realloc_r+0x16>
 8003388:	4611      	mov	r1, r2
 800338a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800338e:	f7ff bc3b 	b.w	8002c08 <_malloc_r>
 8003392:	b92a      	cbnz	r2, 80033a0 <_realloc_r+0x24>
 8003394:	f7ff fbce 	bl	8002b34 <_free_r>
 8003398:	4625      	mov	r5, r4
 800339a:	4628      	mov	r0, r5
 800339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a0:	f000 f81a 	bl	80033d8 <_malloc_usable_size_r>
 80033a4:	4284      	cmp	r4, r0
 80033a6:	4606      	mov	r6, r0
 80033a8:	d802      	bhi.n	80033b0 <_realloc_r+0x34>
 80033aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033ae:	d8f4      	bhi.n	800339a <_realloc_r+0x1e>
 80033b0:	4621      	mov	r1, r4
 80033b2:	4638      	mov	r0, r7
 80033b4:	f7ff fc28 	bl	8002c08 <_malloc_r>
 80033b8:	4680      	mov	r8, r0
 80033ba:	b908      	cbnz	r0, 80033c0 <_realloc_r+0x44>
 80033bc:	4645      	mov	r5, r8
 80033be:	e7ec      	b.n	800339a <_realloc_r+0x1e>
 80033c0:	42b4      	cmp	r4, r6
 80033c2:	4622      	mov	r2, r4
 80033c4:	4629      	mov	r1, r5
 80033c6:	bf28      	it	cs
 80033c8:	4632      	movcs	r2, r6
 80033ca:	f7ff ffc9 	bl	8003360 <memcpy>
 80033ce:	4629      	mov	r1, r5
 80033d0:	4638      	mov	r0, r7
 80033d2:	f7ff fbaf 	bl	8002b34 <_free_r>
 80033d6:	e7f1      	b.n	80033bc <_realloc_r+0x40>

080033d8 <_malloc_usable_size_r>:
 80033d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033dc:	1f18      	subs	r0, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bfbc      	itt	lt
 80033e2:	580b      	ldrlt	r3, [r1, r0]
 80033e4:	18c0      	addlt	r0, r0, r3
 80033e6:	4770      	bx	lr

080033e8 <_init>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr

080033f4 <_fini>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	bf00      	nop
 80033f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fa:	bc08      	pop	{r3}
 80033fc:	469e      	mov	lr, r3
 80033fe:	4770      	bx	lr
