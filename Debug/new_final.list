
new_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003190  08003190  00004190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031f8  080031f8  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031f8  080031f8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003200  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  0800325c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800325c  00005320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b698  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0c  00000000  00000000  0001071d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00012130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000915  00000000  00000000  00012cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b21  00000000  00000000  000135d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d42c  00000000  00000000  0002b0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a498  00000000  00000000  00038522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c29ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  000c2a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c5f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003178 	.word	0x08003178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003178 	.word	0x08003178

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc52 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80c 	bl	8000170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f98e 	bl	8000478 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f84e 	bl	80001fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f960 	bl	8000424 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8a4 	bl	80002b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f90c 	bl	8000384 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	bf00      	nop
 800016e:	e7fd      	b.n	800016c <main+0x20>

08000170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b090      	sub	sp, #64	@ 0x40
 8000174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000176:	f107 0318 	add.w	r3, r7, #24
 800017a:	2228      	movs	r2, #40	@ 0x28
 800017c:	2100      	movs	r1, #0
 800017e:	4618      	mov	r0, r3
 8000180:	f002 fb6c 	bl	800285c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000192:	2301      	movs	r3, #1
 8000194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800019a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	2300      	movs	r3, #0
 800019e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 ff29 	bl	8001010 <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c4:	f000 fa8a 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c8:	230f      	movs	r3, #15
 80001ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2102      	movs	r1, #2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 f996 	bl	8001514 <HAL_RCC_ClockConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ee:	f000 fa75 	bl	80006dc <Error_Handler>
  }
}
 80001f2:	bf00      	nop
 80001f4:	3740      	adds	r7, #64	@ 0x40
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000218:	4b23      	ldr	r3, [pc, #140]	@ (80002a8 <MX_TIM1_Init+0xac>)
 800021a:	4a24      	ldr	r2, [pc, #144]	@ (80002ac <MX_TIM1_Init+0xb0>)
 800021c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800021e:	4b22      	ldr	r3, [pc, #136]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000220:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000226:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000228:	2210      	movs	r2, #16
 800022a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800022c:	4b1e      	ldr	r3, [pc, #120]	@ (80002a8 <MX_TIM1_Init+0xac>)
 800022e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000232:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000234:	4b1c      	ldr	r3, [pc, #112]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000236:	2200      	movs	r2, #0
 8000238:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800023a:	4b1b      	ldr	r3, [pc, #108]	@ (80002a8 <MX_TIM1_Init+0xac>)
 800023c:	2200      	movs	r2, #0
 800023e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000240:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000242:	2200      	movs	r2, #0
 8000244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000246:	4818      	ldr	r0, [pc, #96]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000248:	f001 faf2 	bl	8001830 <HAL_TIM_Base_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000252:	f000 fa43 	bl	80006dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800025a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	4619      	mov	r1, r3
 8000262:	4811      	ldr	r0, [pc, #68]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000264:	f001 fd6d 	bl	8001d42 <HAL_TIM_ConfigClockSource>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800026e:	f000 fa35 	bl	80006dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000272:	2108      	movs	r1, #8
 8000274:	480c      	ldr	r0, [pc, #48]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000276:	f001 fc1b 	bl	8001ab0 <HAL_TIM_OnePulse_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000280:	f000 fa2c 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000284:	2310      	movs	r3, #16
 8000286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000292:	f002 f819 	bl	80022c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800029c:	f000 fa1e 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000078 	.word	0x20000078
 80002ac:	40012c00 	.word	0x40012c00

080002b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08c      	sub	sp, #48	@ 0x30
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b6:	f107 0320 	add.w	r3, r7, #32
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002dc:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e4:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ea:	4b25      	ldr	r3, [pc, #148]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002f0:	4b23      	ldr	r3, [pc, #140]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f8:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fe:	4b20      	ldr	r3, [pc, #128]	@ (8000380 <MX_TIM2_Init+0xd0>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000304:	481e      	ldr	r0, [pc, #120]	@ (8000380 <MX_TIM2_Init+0xd0>)
 8000306:	f001 fa93 	bl	8001830 <HAL_TIM_Base_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000310:	f000 f9e4 	bl	80006dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000318:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	@ 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0320 	add.w	r3, r7, #32
 800032a:	4619      	mov	r1, r3
 800032c:	4814      	ldr	r0, [pc, #80]	@ (8000380 <MX_TIM2_Init+0xd0>)
 800032e:	f001 fd08 	bl	8001d42 <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000338:	f000 f9d0 	bl	80006dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800033c:	2305      	movs	r3, #5
 800033e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	480d      	ldr	r0, [pc, #52]	@ (8000380 <MX_TIM2_Init+0xd0>)
 800034c:	f001 fdc0 	bl	8001ed0 <HAL_TIM_SlaveConfigSynchro>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000356:	f000 f9c1 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800035a:	2320      	movs	r3, #32
 800035c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4806      	ldr	r0, [pc, #24]	@ (8000380 <MX_TIM2_Init+0xd0>)
 8000368:	f001 ffae 	bl	80022c8 <HAL_TIMEx_MasterConfigSynchronization>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000372:	f000 f9b3 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	3730      	adds	r7, #48	@ 0x30
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000c0 	.word	0x200000c0

08000384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a2:	4b1e      	ldr	r3, [pc, #120]	@ (800041c <MX_TIM3_Init+0x98>)
 80003a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <MX_TIM3_Init+0x9c>)
 80003a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <MX_TIM3_Init+0x98>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_TIM3_Init+0x98>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003b4:	4b19      	ldr	r3, [pc, #100]	@ (800041c <MX_TIM3_Init+0x98>)
 80003b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_TIM3_Init+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b16      	ldr	r3, [pc, #88]	@ (800041c <MX_TIM3_Init+0x98>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c8:	4814      	ldr	r0, [pc, #80]	@ (800041c <MX_TIM3_Init+0x98>)
 80003ca:	f001 fa31 	bl	8001830 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003d4:	f000 f982 	bl	80006dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80003d8:	2307      	movs	r3, #7
 80003da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80003dc:	2310      	movs	r3, #16
 80003de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	4619      	mov	r1, r3
 80003e6:	480d      	ldr	r0, [pc, #52]	@ (800041c <MX_TIM3_Init+0x98>)
 80003e8:	f001 fd72 	bl	8001ed0 <HAL_TIM_SlaveConfigSynchro>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80003f2:	f000 f973 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	@ (800041c <MX_TIM3_Init+0x98>)
 8000404:	f001 ff60 	bl	80022c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800040e:	f000 f965 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	3720      	adds	r7, #32
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000108 	.word	0x20000108
 8000420:	40000400 	.word	0x40000400

08000424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	@ (8000474 <MX_USART2_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042e:	4b10      	ldr	r3, [pc, #64]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800045c:	f001 ffa4 	bl	80023a8 <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 f939 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000150 	.word	0x20000150
 8000474:	40004400 	.word	0x40004400

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0308 	add.w	r3, r7, #8
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <MX_GPIO_Init+0x74>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <MX_GPIO_Init+0x74>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_GPIO_Init+0x74>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_GPIO_Init+0x74>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a10      	ldr	r2, [pc, #64]	@ (80004ec <MX_GPIO_Init+0x74>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_GPIO_Init+0x74>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80004bc:	2302      	movs	r3, #2
 80004be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_GPIO_Init+0x78>)
 80004c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004c4:	2302      	movs	r3, #2
 80004c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	4619      	mov	r1, r3
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <MX_GPIO_Init+0x7c>)
 80004d0:	f000 fc02 	bl	8000cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2100      	movs	r1, #0
 80004d8:	2007      	movs	r0, #7
 80004da:	f000 fbc6 	bl	8000c6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004de:	2007      	movs	r0, #7
 80004e0:	f000 fbdf 	bl	8000ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000
 80004f0:	10110000 	.word	0x10110000
 80004f4:	40010800 	.word	0x40010800

080004f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09a      	sub	sp, #104	@ 0x68
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a50      	ldr	r2, [pc, #320]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	f040 8099 	bne.w	800063c <HAL_TIM_PeriodElapsedCallback+0x144>
		HAL_TIM_Base_Stop_IT(&htim1);
 800050a:	484e      	ldr	r0, [pc, #312]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800050c:	f001 faa2 	bl	8001a54 <HAL_TIM_Base_Stop_IT>
		if(capture_count < MAX_SAMPLES){
 8000510:	4b4d      	ldr	r3, [pc, #308]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b0a      	cmp	r3, #10
 8000516:	d834      	bhi.n	8000582 <HAL_TIM_PeriodElapsedCallback+0x8a>
			uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2); // значение в счётчике таймера №2
 8000518:	4b4c      	ldr	r3, [pc, #304]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800051e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
			uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3); // значение в счётчике таймера №3
 8000522:	4b4b      	ldr	r3, [pc, #300]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000528:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
			uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2); // значение переполнения таймера №2 (65535)
 800052c:	4b47      	ldr	r3, [pc, #284]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000532:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			frequencies[capture_count] = (count_main + (count_secondary * (arr + 1)))*10; // вычисляем
 8000536:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800053a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800053e:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8000542:	3101      	adds	r1, #1
 8000544:	fb01 f303 	mul.w	r3, r1, r3
 8000548:	441a      	add	r2, r3
 800054a:	4613      	mov	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	461a      	mov	r2, r3
 8000554:	4b3c      	ldr	r3, [pc, #240]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4611      	mov	r1, r2
 800055a:	4a3e      	ldr	r2, [pc, #248]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800055c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// uint32_t freq = TIM2->CNT + (TIM3->CNT << 16); // это вариант на регистрах, предыдущие четыре строчки можно закомментить


			//////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8000560:	4b3a      	ldr	r3, [pc, #232]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000568:	4b39      	ldr	r3, [pc, #228]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	@ 0x24
			capture_count++;
 8000570:	4b35      	ldr	r3, [pc, #212]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a34      	ldr	r2, [pc, #208]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000578:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 800057a:	4832      	ldr	r0, [pc, #200]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800057c:	f001 fa18 	bl	80019b0 <HAL_TIM_Base_Start_IT>

			isProccess = 0;
			capture_count = 0;
		}
	}
}
 8000580:	e05c      	b.n	800063c <HAL_TIM_PeriodElapsedCallback+0x144>
			HAL_TIM_Base_Stop_IT(&htim1);                 // Остановить
 8000582:	4830      	ldr	r0, [pc, #192]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000584:	f001 fa66 	bl	8001a54 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim2);
 8000588:	4830      	ldr	r0, [pc, #192]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800058a:	f001 f9eb 	bl	8001964 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim3);
 800058e:	4830      	ldr	r0, [pc, #192]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000590:	f001 f9e8 	bl	8001964 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);             // обнуляем таймеры
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 800059c:	4b2b      	ldr	r3, [pc, #172]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 80005a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	625a      	str	r2, [r3, #36]	@ 0x24
			for (int i = 1; i < MAX_SAMPLES; i++) {
 80005ac:	2301      	movs	r3, #1
 80005ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80005b0:	e027      	b.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x10a>
				uint32_t key = frequencies[i];
 80005b2:	4a28      	ldr	r2, [pc, #160]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ba:	657b      	str	r3, [r7, #84]	@ 0x54
				int j = i - 1;
 80005bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005be:	3b01      	subs	r3, #1
 80005c0:	663b      	str	r3, [r7, #96]	@ 0x60
				while (j >= 0 && frequencies[j] > key) {
 80005c2:	e00b      	b.n	80005dc <HAL_TIM_PeriodElapsedCallback+0xe4>
					frequencies[j + 1] = frequencies[j];
 80005c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005c6:	3301      	adds	r3, #1
 80005c8:	4922      	ldr	r1, [pc, #136]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80005cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005d0:	4920      	ldr	r1, [pc, #128]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					j--;
 80005d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005d8:	3b01      	subs	r3, #1
 80005da:	663b      	str	r3, [r7, #96]	@ 0x60
				while (j >= 0 && frequencies[j] > key) {
 80005dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db06      	blt.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0xf8>
 80005e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d3e9      	bcc.n	80005c4 <HAL_TIM_PeriodElapsedCallback+0xcc>
				frequencies[j + 1] = key;
 80005f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005f2:	3301      	adds	r3, #1
 80005f4:	4917      	ldr	r1, [pc, #92]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80005f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80005f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 1; i < MAX_SAMPLES; i++) {
 80005fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005fe:	3301      	adds	r3, #1
 8000600:	667b      	str	r3, [r7, #100]	@ 0x64
 8000602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000604:	2b0a      	cmp	r3, #10
 8000606:	ddd4      	ble.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0xba>
			uint32_t frequency_median = frequencies[MAX_SAMPLES / 2];
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	65fb      	str	r3, [r7, #92]	@ 0x5c
			int len = snprintf(msg, sizeof(msg), "%lu\r\n", frequency_median);
 800060e:	f107 000c 	add.w	r0, r7, #12
 8000612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000614:	4a10      	ldr	r2, [pc, #64]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000616:	2140      	movs	r1, #64	@ 0x40
 8000618:	f002 f8ea 	bl	80027f0 <sniprintf>
 800061c:	65b8      	str	r0, [r7, #88]	@ 0x58
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 800061e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	480c      	ldr	r0, [pc, #48]	@ (800065c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800062c:	f001 ff0c 	bl	8002448 <HAL_UART_Transmit>
			isProccess = 0;
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			capture_count = 0;
 8000636:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	3768      	adds	r7, #104	@ 0x68
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000078 	.word	0x20000078
 8000648:	200001c8 	.word	0x200001c8
 800064c:	200000c0 	.word	0x200000c0
 8000650:	20000108 	.word	0x20000108
 8000654:	2000019c 	.word	0x2000019c
 8000658:	08003190 	.word	0x08003190
 800065c:	20000150 	.word	0x20000150
 8000660:	20000198 	.word	0x20000198

08000664 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 800066e:	f000 fa1b 	bl	8000aa8 <HAL_GetTick>
 8000672:	60f8      	str	r0, [r7, #12]
	if (now - lastInterruptTime < 200) return;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	2bc7      	cmp	r3, #199	@ 0xc7
 800067e:	d91c      	bls.n	80006ba <HAL_GPIO_EXTI_Callback+0x56>
	lastInterruptTime = now;
 8000680:	4a11      	ldr	r2, [pc, #68]	@ (80006c8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6013      	str	r3, [r2, #0]
	if(isProccess) return;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <HAL_GPIO_EXTI_Callback+0x68>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d116      	bne.n	80006be <HAL_GPIO_EXTI_Callback+0x5a>

  if (GPIO_Pin == GPIO_PIN_1 && !isProccess){
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d114      	bne.n	80006c0 <HAL_GPIO_EXTI_Callback+0x5c>
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <HAL_GPIO_EXTI_Callback+0x68>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10f      	bne.n	80006c0 <HAL_GPIO_EXTI_Callback+0x5c>
		isProccess = 1;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <HAL_GPIO_EXTI_Callback+0x68>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 80006a6:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80006a8:	f001 f982 	bl	80019b0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim2);
 80006ac:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <HAL_GPIO_EXTI_Callback+0x70>)
 80006ae:	f001 f90f 	bl	80018d0 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <HAL_GPIO_EXTI_Callback+0x74>)
 80006b4:	f001 f90c 	bl	80018d0 <HAL_TIM_Base_Start>
 80006b8:	e002      	b.n	80006c0 <HAL_GPIO_EXTI_Callback+0x5c>
	if (now - lastInterruptTime < 200) return;
 80006ba:	bf00      	nop
 80006bc:	e000      	b.n	80006c0 <HAL_GPIO_EXTI_Callback+0x5c>
	if(isProccess) return;
 80006be:	bf00      	nop
  }
}
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200001cc 	.word	0x200001cc
 80006cc:	20000198 	.word	0x20000198
 80006d0:	20000078 	.word	0x20000078
 80006d4:	200000c0 	.word	0x200000c0
 80006d8:	20000108 	.word	0x20000108

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_MspInit+0x5c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <HAL_MspInit+0x5c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_MspInit+0x5c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HAL_MspInit+0x5c>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <HAL_MspInit+0x60>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	4a04      	ldr	r2, [pc, #16]	@ (8000748 <HAL_MspInit+0x60>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40021000 	.word	0x40021000
 8000748:	40010000 	.word	0x40010000

0800074c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a2b      	ldr	r2, [pc, #172]	@ (8000814 <HAL_TIM_Base_MspInit+0xc8>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d114      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800076c:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a29      	ldr	r2, [pc, #164]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 8000772:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2019      	movs	r0, #25
 800078a:	f000 fa6e 	bl	8000c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800078e:	2019      	movs	r0, #25
 8000790:	f000 fa87 	bl	8000ca2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000794:	e03a      	b.n	800080c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM2)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800079e:	d124      	bne.n	80007ea <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	61d3      	str	r3, [r2, #28]
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a16      	ldr	r2, [pc, #88]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4619      	mov	r1, r3
 80007e2:	480e      	ldr	r0, [pc, #56]	@ (800081c <HAL_TIM_Base_MspInit+0xd0>)
 80007e4:	f000 fa78 	bl	8000cd8 <HAL_GPIO_Init>
}
 80007e8:	e010      	b.n	800080c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <HAL_TIM_Base_MspInit+0xd4>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d10b      	bne.n	800080c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_TIM_Base_MspInit+0xcc>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40012c00 	.word	0x40012c00
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800
 8000820:	40000400 	.word	0x40000400

08000824 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <HAL_UART_MspInit+0x88>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d12f      	bne.n	80008a4 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <HAL_UART_MspInit+0x8c>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <HAL_UART_MspInit+0x8c>)
 800084a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084e:	61d3      	str	r3, [r2, #28]
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_UART_MspInit+0x8c>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_UART_MspInit+0x8c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <HAL_UART_MspInit+0x8c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_UART_MspInit+0x8c>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000874:	2304      	movs	r3, #4
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <HAL_UART_MspInit+0x90>)
 8000888:	f000 fa26 	bl	8000cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800088c:	2308      	movs	r3, #8
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <HAL_UART_MspInit+0x90>)
 80008a0:	f000 fa1a 	bl	8000cd8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010800 	.word	0x40010800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f8bc 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000914:	2002      	movs	r0, #2
 8000916:	f000 fb63 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//    char msg[64];
//    int len = snprintf(msg, sizeof(msg), "РАБОТАЕТ!!!");
//    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <TIM1_UP_IRQHandler+0x10>)
 8000926:	f001 f91c 	bl	8001b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000078 	.word	0x20000078

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f001 ff82 	bl	800286c <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20005000 	.word	0x20005000
 8000994:	00000400 	.word	0x00000400
 8000998:	200001d0 	.word	0x200001d0
 800099c:	20000320 	.word	0x20000320

080009a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff fff8 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009b2:	490c      	ldr	r1, [pc, #48]	@ (80009e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b4:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c8:	4c09      	ldr	r4, [pc, #36]	@ (80009f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f001 ff4f 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fbb7 	bl	800014c <main>
  bx lr
 80009de:	4770      	bx	lr
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009e8:	08003200 	.word	0x08003200
  ldr r2, =_sbss
 80009ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009f0:	20000320 	.word	0x20000320

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_Init+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_Init+0x28>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f923 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe68 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f93b 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f903 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_IncTick+0x1c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a03      	ldr	r2, [pc, #12]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200001d4 	.word	0x200001d4

08000aa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b02      	ldr	r3, [pc, #8]	@ (8000ab8 <HAL_GetTick+0x10>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	200001d4 	.word	0x200001d4

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db0b      	blt.n	8000b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	4906      	ldr	r1, [pc, #24]	@ (8000b54 <__NVIC_EnableIRQ+0x34>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	@ 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff90 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff2d 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff42 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff90 	bl	8000bac <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5f 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff35 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffa2 	bl	8000c10 <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b08b      	sub	sp, #44	@ 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	e169      	b.n	8000fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cec:	2201      	movs	r2, #1
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	f040 8158 	bne.w	8000fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4a9a      	ldr	r2, [pc, #616]	@ (8000f78 <HAL_GPIO_Init+0x2a0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d05e      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d14:	4a98      	ldr	r2, [pc, #608]	@ (8000f78 <HAL_GPIO_Init+0x2a0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d875      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d1a:	4a98      	ldr	r2, [pc, #608]	@ (8000f7c <HAL_GPIO_Init+0x2a4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d058      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d20:	4a96      	ldr	r2, [pc, #600]	@ (8000f7c <HAL_GPIO_Init+0x2a4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d86f      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d26:	4a96      	ldr	r2, [pc, #600]	@ (8000f80 <HAL_GPIO_Init+0x2a8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d052      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d2c:	4a94      	ldr	r2, [pc, #592]	@ (8000f80 <HAL_GPIO_Init+0x2a8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d869      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d32:	4a94      	ldr	r2, [pc, #592]	@ (8000f84 <HAL_GPIO_Init+0x2ac>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d04c      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d38:	4a92      	ldr	r2, [pc, #584]	@ (8000f84 <HAL_GPIO_Init+0x2ac>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d863      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d3e:	4a92      	ldr	r2, [pc, #584]	@ (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d046      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d44:	4a90      	ldr	r2, [pc, #576]	@ (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d85d      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d82a      	bhi.n	8000da4 <HAL_GPIO_Init+0xcc>
 8000d4e:	2b12      	cmp	r3, #18
 8000d50:	d859      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <HAL_GPIO_Init+0x80>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000dd3 	.word	0x08000dd3
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000dbf 	.word	0x08000dbf
 8000d64:	08000e01 	.word	0x08000e01
 8000d68:	08000e07 	.word	0x08000e07
 8000d6c:	08000e07 	.word	0x08000e07
 8000d70:	08000e07 	.word	0x08000e07
 8000d74:	08000e07 	.word	0x08000e07
 8000d78:	08000e07 	.word	0x08000e07
 8000d7c:	08000e07 	.word	0x08000e07
 8000d80:	08000e07 	.word	0x08000e07
 8000d84:	08000e07 	.word	0x08000e07
 8000d88:	08000e07 	.word	0x08000e07
 8000d8c:	08000e07 	.word	0x08000e07
 8000d90:	08000e07 	.word	0x08000e07
 8000d94:	08000e07 	.word	0x08000e07
 8000d98:	08000e07 	.word	0x08000e07
 8000d9c:	08000db5 	.word	0x08000db5
 8000da0:	08000dc9 	.word	0x08000dc9
 8000da4:	4a79      	ldr	r2, [pc, #484]	@ (8000f8c <HAL_GPIO_Init+0x2b4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000daa:	e02c      	b.n	8000e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e029      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	3304      	adds	r3, #4
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e024      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e01f      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e01a      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e013      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de8:	2308      	movs	r3, #8
 8000dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	611a      	str	r2, [r3, #16]
          break;
 8000df2:	e009      	b.n	8000e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	615a      	str	r2, [r3, #20]
          break;
 8000dfe:	e003      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          break;
 8000e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2bff      	cmp	r3, #255	@ 0xff
 8000e0c:	d801      	bhi.n	8000e12 <HAL_GPIO_Init+0x13a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	e001      	b.n	8000e16 <HAL_GPIO_Init+0x13e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3304      	adds	r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2bff      	cmp	r3, #255	@ 0xff
 8000e1c:	d802      	bhi.n	8000e24 <HAL_GPIO_Init+0x14c>
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0x152>
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	3b08      	subs	r3, #8
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	210f      	movs	r1, #15
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	6a39      	ldr	r1, [r7, #32]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80b1 	beq.w	8000fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e58:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e70:	4a48      	ldr	r2, [pc, #288]	@ (8000f94 <HAL_GPIO_Init+0x2bc>)
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a40      	ldr	r2, [pc, #256]	@ (8000f98 <HAL_GPIO_Init+0x2c0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_GPIO_Init+0x1ec>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_GPIO_Init+0x1e8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fa0 <HAL_GPIO_Init+0x2c8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x1e4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3d      	ldr	r2, [pc, #244]	@ (8000fa4 <HAL_GPIO_Init+0x2cc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_GPIO_Init+0x1e0>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2304      	movs	r3, #4
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed6:	492f      	ldr	r1, [pc, #188]	@ (8000f94 <HAL_GPIO_Init+0x2bc>)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	492c      	ldr	r1, [pc, #176]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4928      	ldr	r1, [pc, #160]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	4922      	ldr	r1, [pc, #136]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60cb      	str	r3, [r1, #12]
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	491e      	ldr	r1, [pc, #120]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4918      	ldr	r1, [pc, #96]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4914      	ldr	r1, [pc, #80]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d021      	beq.n	8000fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e021      	b.n	8000fba <HAL_GPIO_Init+0x2e2>
 8000f76:	bf00      	nop
 8000f78:	10320000 	.word	0x10320000
 8000f7c:	10310000 	.word	0x10310000
 8000f80:	10220000 	.word	0x10220000
 8000f84:	10210000 	.word	0x10210000
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	10110000 	.word	0x10110000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	40011400 	.word	0x40011400
 8000fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	4909      	ldr	r1, [pc, #36]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f47f ae8e 	bne.w	8000cec <HAL_GPIO_Init+0x14>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	372c      	adds	r7, #44	@ 0x2c
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fb30 	bl	8000664 <HAL_GPIO_EXTI_Callback>
  }
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e272      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8087 	beq.w	800113e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001030:	4b92      	ldr	r3, [pc, #584]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b04      	cmp	r3, #4
 800103a:	d00c      	beq.n	8001056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103c:	4b8f      	ldr	r3, [pc, #572]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d112      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
 8001048:	4b8c      	ldr	r3, [pc, #560]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b89      	ldr	r3, [pc, #548]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06c      	beq.n	800113c <HAL_RCC_OscConfig+0x12c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d168      	bne.n	800113c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e24c      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x76>
 8001078:	4b80      	ldr	r3, [pc, #512]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a7f      	ldr	r2, [pc, #508]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e02e      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b7b      	ldr	r3, [pc, #492]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a7a      	ldr	r2, [pc, #488]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b78      	ldr	r3, [pc, #480]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a77      	ldr	r2, [pc, #476]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0xbc>
 80010b2:	4b72      	ldr	r3, [pc, #456]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a71      	ldr	r2, [pc, #452]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a6e      	ldr	r2, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a6a      	ldr	r2, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a67      	ldr	r2, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcdc 	bl	8000aa8 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fcd8 	bl	8000aa8 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	@ 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e200      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe4>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fcc8 	bl	8000aa8 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fcc4 	bl	8000aa8 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1ec      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	4b53      	ldr	r3, [pc, #332]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x10c>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d063      	beq.n	8001212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114a:	4b4c      	ldr	r3, [pc, #304]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001156:	4b49      	ldr	r3, [pc, #292]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b08      	cmp	r3, #8
 8001160:	d11c      	bne.n	800119c <HAL_RCC_OscConfig+0x18c>
 8001162:	4b46      	ldr	r3, [pc, #280]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d116      	bne.n	800119c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	4b43      	ldr	r3, [pc, #268]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_RCC_OscConfig+0x176>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d001      	beq.n	8001186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e1c0      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4939      	ldr	r1, [pc, #228]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	e03a      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_RCC_OscConfig+0x270>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fc7d 	bl	8000aa8 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc79 	bl	8000aa8 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1a1      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4927      	ldr	r1, [pc, #156]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_RCC_OscConfig+0x270>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc5c 	bl	8000aa8 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc58 	bl	8000aa8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e180      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d03a      	beq.n	8001294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d019      	beq.n	800125a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_RCC_OscConfig+0x274>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122c:	f7ff fc3c 	bl	8000aa8 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fc38 	bl	8000aa8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e160      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f000 face 	bl	80017f4 <RCC_Delay>
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_RCC_OscConfig+0x274>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff fc22 	bl	8000aa8 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001266:	e00f      	b.n	8001288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc1e 	bl	8000aa8 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d908      	bls.n	8001288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e146      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	42420000 	.word	0x42420000
 8001284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	4b92      	ldr	r3, [pc, #584]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e9      	bne.n	8001268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a6 	beq.w	80013ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a6:	4b8b      	ldr	r3, [pc, #556]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b88      	ldr	r3, [pc, #544]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a87      	ldr	r2, [pc, #540]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b85      	ldr	r3, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7e      	ldr	r2, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fbdf 	bl	8000aa8 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fbdb 	bl	8000aa8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	@ 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e103      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x312>
 8001314:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a6e      	ldr	r2, [pc, #440]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6213      	str	r3, [r2, #32]
 8001320:	e02d      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x334>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a69      	ldr	r2, [pc, #420]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x356>
 800134c:	4b61      	ldr	r3, [pc, #388]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a60      	ldr	r2, [pc, #384]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	4b5e      	ldr	r3, [pc, #376]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a5d      	ldr	r2, [pc, #372]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6213      	str	r3, [r2, #32]
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a5a      	ldr	r2, [pc, #360]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a57      	ldr	r2, [pc, #348]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb8f 	bl	8000aa8 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fb8b 	bl	8000aa8 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0b1      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4b4b      	ldr	r3, [pc, #300]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ee      	beq.n	800138e <HAL_RCC_OscConfig+0x37e>
 80013b0:	e014      	b.n	80013dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb79 	bl	8000aa8 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb75 	bl	8000aa8 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e09b      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a3b      	ldr	r2, [pc, #236]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d061      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d146      	bne.n	800149a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b33      	ldr	r3, [pc, #204]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb49 	bl	8000aa8 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb45 	bl	8000aa8 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e06d      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d108      	bne.n	8001454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4921      	ldr	r1, [pc, #132]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a19      	ldr	r1, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	430b      	orrs	r3, r1
 8001466:	491b      	ldr	r1, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb19 	bl	8000aa8 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb15 	bl	8000aa8 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e03d      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x46a>
 8001498:	e035      	b.n	8001506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb02 	bl	8000aa8 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fafe 	bl	8000aa8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e026      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x498>
 80014c6:	e01e      	b.n	8001506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e019      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x500>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa50 	bl	8000aa8 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fa4c 	bl	8000aa8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	@ (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f9ae 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08003198 	.word	0x08003198
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x30>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x36>
 8001716:	e027      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800171a:	613b      	str	r3, [r7, #16]
      break;
 800171c:	e027      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d010      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0c5b      	lsrs	r3, r3, #17
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800174a:	fb03 f202 	mul.w	r2, r3, r2
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e004      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <HAL_RCC_GetSysClockFreq+0xa4>)
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	613b      	str	r3, [r7, #16]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800176a:	613b      	str	r3, [r7, #16]
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	693b      	ldr	r3, [r7, #16]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200
 8001784:	080031b0 	.word	0x080031b0
 8001788:	080031c0 	.word	0x080031c0
 800178c:	003d0900 	.word	0x003d0900

08001790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001794:	4b02      	ldr	r3, [pc, #8]	@ (80017a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000000 	.word	0x20000000

080017a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a8:	f7ff fff2 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4903      	ldr	r1, [pc, #12]	@ (80017c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	080031a8 	.word	0x080031a8

080017cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d0:	f7ff ffde 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	0adb      	lsrs	r3, r3, #11
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	4903      	ldr	r1, [pc, #12]	@ (80017f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	080031a8 	.word	0x080031a8

080017f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <RCC_Delay+0x34>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <RCC_Delay+0x38>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001810:	bf00      	nop
  }
  while (Delay --);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	60fa      	str	r2, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <RCC_Delay+0x1c>
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000000 	.word	0x20000000
 800182c:	10624dd3 	.word	0x10624dd3

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e041      	b.n	80018c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe ff78 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f000 fb94 	bl	8001f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d001      	beq.n	80018e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e032      	b.n	800194e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a18      	ldr	r2, [pc, #96]	@ (8001958 <HAL_TIM_Base_Start+0x88>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00e      	beq.n	8001918 <HAL_TIM_Base_Start+0x48>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001902:	d009      	beq.n	8001918 <HAL_TIM_Base_Start+0x48>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <HAL_TIM_Base_Start+0x8c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_Base_Start+0x48>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <HAL_TIM_Base_Start+0x90>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b06      	cmp	r3, #6
 8001928:	d010      	beq.n	800194c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	e007      	b.n	800194c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40000400 	.word	0x40000400
 8001960:	40000800 	.word	0x40000800

08001964 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a1a      	ldr	r2, [r3, #32]
 8001972:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10f      	bne.n	800199c <HAL_TIM_Base_Stop+0x38>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	f240 4344 	movw	r3, #1092	@ 0x444
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_TIM_Base_Stop+0x38>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d001      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e03a      	b.n	8001a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_TIM_Base_Start_IT+0x98>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00e      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x58>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f2:	d009      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x58>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x58>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d111      	bne.n	8001a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d010      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2a:	e007      	b.n	8001a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a1a      	ldr	r2, [r3, #32]
 8001a72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_TIM_Base_Stop_IT+0x48>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a1a      	ldr	r2, [r3, #32]
 8001a82:	f240 4344 	movw	r3, #1092	@ 0x444
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <HAL_TIM_Base_Stop_IT+0x48>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e041      	b.n	8001b48 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f839 	bl	8001b50 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3304      	adds	r3, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f000 fa53 	bl	8001f9c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0208 	bic.w	r2, r2, #8
 8001b04:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01b      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0202 	mvn.w	r2, #2
 8001b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f9da 	bl	8001f66 <HAL_TIM_IC_CaptureCallback>
 8001bb2:	e005      	b.n	8001bc0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f9cd 	bl	8001f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f9dc 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01b      	beq.n	8001c12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0204 	mvn.w	r2, #4
 8001be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f9b4 	bl	8001f66 <HAL_TIM_IC_CaptureCallback>
 8001bfe:	e005      	b.n	8001c0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f9a7 	bl	8001f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f9b6 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01b      	beq.n	8001c5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0208 	mvn.w	r2, #8
 8001c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f98e 	bl	8001f66 <HAL_TIM_IC_CaptureCallback>
 8001c4a:	e005      	b.n	8001c58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f981 	bl	8001f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f990 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01b      	beq.n	8001caa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0210 	mvn.w	r2, #16
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f968 	bl	8001f66 <HAL_TIM_IC_CaptureCallback>
 8001c96:	e005      	b.n	8001ca4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f95b 	bl	8001f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f96a 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0201 	mvn.w	r2, #1
 8001cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fc15 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fb52 	bl	8002396 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00c      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f93a 	bl	8001f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00c      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0220 	mvn.w	r2, #32
 8001d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fb25 	bl	8002384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_ConfigClockSource+0x1c>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e0b4      	b.n	8001ec8 <HAL_TIM_ConfigClockSource+0x186>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d96:	d03e      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0xd4>
 8001d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d9c:	f200 8087 	bhi.w	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001da4:	f000 8086 	beq.w	8001eb4 <HAL_TIM_ConfigClockSource+0x172>
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dac:	d87f      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001dae:	2b70      	cmp	r3, #112	@ 0x70
 8001db0:	d01a      	beq.n	8001de8 <HAL_TIM_ConfigClockSource+0xa6>
 8001db2:	2b70      	cmp	r3, #112	@ 0x70
 8001db4:	d87b      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001db6:	2b60      	cmp	r3, #96	@ 0x60
 8001db8:	d050      	beq.n	8001e5c <HAL_TIM_ConfigClockSource+0x11a>
 8001dba:	2b60      	cmp	r3, #96	@ 0x60
 8001dbc:	d877      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001dbe:	2b50      	cmp	r3, #80	@ 0x50
 8001dc0:	d03c      	beq.n	8001e3c <HAL_TIM_ConfigClockSource+0xfa>
 8001dc2:	2b50      	cmp	r3, #80	@ 0x50
 8001dc4:	d873      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001dc6:	2b40      	cmp	r3, #64	@ 0x40
 8001dc8:	d058      	beq.n	8001e7c <HAL_TIM_ConfigClockSource+0x13a>
 8001dca:	2b40      	cmp	r3, #64	@ 0x40
 8001dcc:	d86f      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001dce:	2b30      	cmp	r3, #48	@ 0x30
 8001dd0:	d064      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x15a>
 8001dd2:	2b30      	cmp	r3, #48	@ 0x30
 8001dd4:	d86b      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d060      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x15a>
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d867      	bhi.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d05c      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x15a>
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d05a      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x15a>
 8001de6:	e062      	b.n	8001eae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001df8:	f000 fa46 	bl	8002288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
      break;
 8001e14:	e04f      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e26:	f000 fa2f 	bl	8002288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e38:	609a      	str	r2, [r3, #8]
      break;
 8001e3a:	e03c      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f000 f9a6 	bl	800219a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2150      	movs	r1, #80	@ 0x50
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f9fd 	bl	8002254 <TIM_ITRx_SetConfig>
      break;
 8001e5a:	e02c      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f000 f9c4 	bl	80021f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2160      	movs	r1, #96	@ 0x60
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f9ed 	bl	8002254 <TIM_ITRx_SetConfig>
      break;
 8001e7a:	e01c      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f000 f986 	bl	800219a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2140      	movs	r1, #64	@ 0x40
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f9dd 	bl	8002254 <TIM_ITRx_SetConfig>
      break;
 8001e9a:	e00c      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 f9d4 	bl	8002254 <TIM_ITRx_SetConfig>
      break;
 8001eac:	e003      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb2:	e000      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001eb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e031      	b.n	8001f4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8bc 	bl	8002078 <TIM_SlaveTimer_SetConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e018      	b.n	8001f4c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f28:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f38:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a2f      	ldr	r2, [pc, #188]	@ (800206c <TIM_Base_SetConfig+0xd0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x30>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x30>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8002070 <TIM_Base_SetConfig+0xd4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x30>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8002074 <TIM_Base_SetConfig+0xd8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d108      	bne.n	8001fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a22      	ldr	r2, [pc, #136]	@ (800206c <TIM_Base_SetConfig+0xd0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00b      	beq.n	8001ffe <TIM_Base_SetConfig+0x62>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fec:	d007      	beq.n	8001ffe <TIM_Base_SetConfig+0x62>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <TIM_Base_SetConfig+0xd4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <TIM_Base_SetConfig+0x62>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8002074 <TIM_Base_SetConfig+0xd8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d108      	bne.n	8002010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <TIM_Base_SetConfig+0xd0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d103      	bne.n	8002044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f023 0201 	bic.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
  }
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800

08002078 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002094:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f023 0307 	bic.w	r3, r3, #7
 80020a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b70      	cmp	r3, #112	@ 0x70
 80020c0:	d01a      	beq.n	80020f8 <TIM_SlaveTimer_SetConfig+0x80>
 80020c2:	2b70      	cmp	r3, #112	@ 0x70
 80020c4:	d860      	bhi.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
 80020c6:	2b60      	cmp	r3, #96	@ 0x60
 80020c8:	d054      	beq.n	8002174 <TIM_SlaveTimer_SetConfig+0xfc>
 80020ca:	2b60      	cmp	r3, #96	@ 0x60
 80020cc:	d85c      	bhi.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
 80020ce:	2b50      	cmp	r3, #80	@ 0x50
 80020d0:	d046      	beq.n	8002160 <TIM_SlaveTimer_SetConfig+0xe8>
 80020d2:	2b50      	cmp	r3, #80	@ 0x50
 80020d4:	d858      	bhi.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
 80020d6:	2b40      	cmp	r3, #64	@ 0x40
 80020d8:	d019      	beq.n	800210e <TIM_SlaveTimer_SetConfig+0x96>
 80020da:	2b40      	cmp	r3, #64	@ 0x40
 80020dc:	d854      	bhi.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
 80020de:	2b30      	cmp	r3, #48	@ 0x30
 80020e0:	d055      	beq.n	800218e <TIM_SlaveTimer_SetConfig+0x116>
 80020e2:	2b30      	cmp	r3, #48	@ 0x30
 80020e4:	d850      	bhi.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d051      	beq.n	800218e <TIM_SlaveTimer_SetConfig+0x116>
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d84c      	bhi.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d04d      	beq.n	800218e <TIM_SlaveTimer_SetConfig+0x116>
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d04b      	beq.n	800218e <TIM_SlaveTimer_SetConfig+0x116>
 80020f6:	e047      	b.n	8002188 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002108:	f000 f8be 	bl	8002288 <TIM_ETR_SetConfig>
      break;
 800210c:	e040      	b.n	8002190 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d101      	bne.n	800211a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03b      	b.n	8002192 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002140:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	4313      	orrs	r3, r2
 800214c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	621a      	str	r2, [r3, #32]
      break;
 800215e:	e017      	b.n	8002190 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216c:	461a      	mov	r2, r3
 800216e:	f000 f814 	bl	800219a <TIM_TI1_ConfigInputStage>
      break;
 8002172:	e00d      	b.n	8002190 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002180:	461a      	mov	r2, r3
 8002182:	f000 f838 	bl	80021f6 <TIM_TI2_ConfigInputStage>
      break;
 8002186:	e003      	b.n	8002190 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	75fb      	strb	r3, [r7, #23]
      break;
 800218c:	e000      	b.n	8002190 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800218e:	bf00      	nop
  }

  return status;
 8002190:	7dfb      	ldrb	r3, [r7, #23]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800219a:	b480      	push	{r7}
 800219c:	b087      	sub	sp, #28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f023 0201 	bic.w	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f023 030a 	bic.w	r3, r3, #10
 80021d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	621a      	str	r2, [r3, #32]
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 0210 	bic.w	r2, r3, #16
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002232:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800226a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	f043 0307 	orr.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	609a      	str	r2, [r3, #8]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	021a      	lsls	r2, r3, #8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	609a      	str	r2, [r3, #8]
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022dc:	2302      	movs	r3, #2
 80022de:	e046      	b.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00e      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232c:	d009      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10c      	bne.n	800235c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	4313      	orrs	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800

08002384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e042      	b.n	8002440 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fa28 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	@ 0x24
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f971 	bl	80026d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	d175      	bne.n	8002554 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Transmit+0x2c>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e06e      	b.n	8002556 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	@ 0x21
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002486:	f7fe fb0f 	bl	8000aa8 <HAL_GetTick>
 800248a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a0:	d108      	bne.n	80024b4 <HAL_UART_Transmit+0x6c>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e003      	b.n	80024bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024bc:	e02e      	b.n	800251c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f848 	bl	800255e <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03a      	b.n	8002556 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3302      	adds	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	e007      	b.n	800250e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1cb      	bne.n	80024be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f814 	bl	800255e <UART_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e006      	b.n	8002556 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002554:	2302      	movs	r3, #2
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800256e:	e03b      	b.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d037      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002578:	f7fe fa96 	bl	8000aa8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	6a3a      	ldr	r2, [r7, #32]
 8002584:	429a      	cmp	r2, r3
 8002586:	d302      	bcc.n	800258e <UART_WaitOnFlagUntilTimeout+0x30>
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e03a      	b.n	8002608 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b80      	cmp	r3, #128	@ 0x80
 80025a4:	d020      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b40      	cmp	r3, #64	@ 0x40
 80025aa:	d01d      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d116      	bne.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f81d 	bl	8002610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2208      	movs	r2, #8
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e00f      	b.n	8002608 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	429a      	cmp	r2, r3
 8002604:	d0b4      	beq.n	8002570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002610:	b480      	push	{r7}
 8002612:	b095      	sub	sp, #84	@ 0x54
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002638:	643a      	str	r2, [r7, #64]	@ 0x40
 800263a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800263e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002640:	e841 2300 	strex	r3, r2, [r1]
 8002644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	61fb      	str	r3, [r7, #28]
   return(result);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800266c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	2b01      	cmp	r3, #1
 8002686:	d119      	bne.n	80026bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	60bb      	str	r3, [r7, #8]
   return(result);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f023 0310 	bic.w	r3, r3, #16
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026a8:	61ba      	str	r2, [r7, #24]
 80026aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ac:	6979      	ldr	r1, [r7, #20]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	e841 2300 	strex	r3, r2, [r1]
 80026b4:	613b      	str	r3, [r7, #16]
   return(result);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026ca:	bf00      	nop
 80026cc:	3754      	adds	r7, #84	@ 0x54
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800270e:	f023 030c 	bic.w	r3, r3, #12
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	430b      	orrs	r3, r1
 800271a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2c      	ldr	r2, [pc, #176]	@ (80027e8 <UART_SetConfig+0x114>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800273c:	f7ff f846 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	e002      	b.n	800274a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002744:	f7ff f82e 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
 8002748:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009a      	lsls	r2, r3, #2
 8002754:	441a      	add	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	4a22      	ldr	r2, [pc, #136]	@ (80027ec <UART_SetConfig+0x118>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	0119      	lsls	r1, r3, #4
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009a      	lsls	r2, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002780:	4b1a      	ldr	r3, [pc, #104]	@ (80027ec <UART_SetConfig+0x118>)
 8002782:	fba3 0302 	umull	r0, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2064      	movs	r0, #100	@ 0x64
 800278a:	fb00 f303 	mul.w	r3, r0, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	3332      	adds	r3, #50	@ 0x32
 8002794:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <UART_SetConfig+0x118>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a0:	4419      	add	r1, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009a      	lsls	r2, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <UART_SetConfig+0x118>)
 80027ba:	fba3 0302 	umull	r0, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2064      	movs	r0, #100	@ 0x64
 80027c2:	fb00 f303 	mul.w	r3, r0, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	3332      	adds	r3, #50	@ 0x32
 80027cc:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <UART_SetConfig+0x118>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	440a      	add	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40013800 	.word	0x40013800
 80027ec:	51eb851f 	.word	0x51eb851f

080027f0 <sniprintf>:
 80027f0:	b40c      	push	{r2, r3}
 80027f2:	b530      	push	{r4, r5, lr}
 80027f4:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <sniprintf+0x68>)
 80027f6:	1e0c      	subs	r4, r1, #0
 80027f8:	681d      	ldr	r5, [r3, #0]
 80027fa:	b09d      	sub	sp, #116	@ 0x74
 80027fc:	da08      	bge.n	8002810 <sniprintf+0x20>
 80027fe:	238b      	movs	r3, #139	@ 0x8b
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	602b      	str	r3, [r5, #0]
 8002806:	b01d      	add	sp, #116	@ 0x74
 8002808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800280c:	b002      	add	sp, #8
 800280e:	4770      	bx	lr
 8002810:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002814:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800281e:	bf0c      	ite	eq
 8002820:	4623      	moveq	r3, r4
 8002822:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002826:	9304      	str	r3, [sp, #16]
 8002828:	9307      	str	r3, [sp, #28]
 800282a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800282e:	9002      	str	r0, [sp, #8]
 8002830:	9006      	str	r0, [sp, #24]
 8002832:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002836:	4628      	mov	r0, r5
 8002838:	ab21      	add	r3, sp, #132	@ 0x84
 800283a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800283c:	a902      	add	r1, sp, #8
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f000 f992 	bl	8002b68 <_svfiprintf_r>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	bfbc      	itt	lt
 8002848:	238b      	movlt	r3, #139	@ 0x8b
 800284a:	602b      	strlt	r3, [r5, #0]
 800284c:	2c00      	cmp	r4, #0
 800284e:	d0da      	beq.n	8002806 <sniprintf+0x16>
 8002850:	2200      	movs	r2, #0
 8002852:	9b02      	ldr	r3, [sp, #8]
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e7d6      	b.n	8002806 <sniprintf+0x16>
 8002858:	2000000c 	.word	0x2000000c

0800285c <memset>:
 800285c:	4603      	mov	r3, r0
 800285e:	4402      	add	r2, r0
 8002860:	4293      	cmp	r3, r2
 8002862:	d100      	bne.n	8002866 <memset+0xa>
 8002864:	4770      	bx	lr
 8002866:	f803 1b01 	strb.w	r1, [r3], #1
 800286a:	e7f9      	b.n	8002860 <memset+0x4>

0800286c <__errno>:
 800286c:	4b01      	ldr	r3, [pc, #4]	@ (8002874 <__errno+0x8>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2600      	movs	r6, #0
 800287c:	4d0c      	ldr	r5, [pc, #48]	@ (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	@ (80028b4 <__libc_init_array+0x3c>)
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 fc76 	bl	8003178 <_init>
 800288c:	2600      	movs	r6, #0
 800288e:	4d0a      	ldr	r5, [pc, #40]	@ (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	@ (80028bc <__libc_init_array+0x44>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	080031f8 	.word	0x080031f8
 80028b4:	080031f8 	.word	0x080031f8
 80028b8:	080031f8 	.word	0x080031f8
 80028bc:	080031fc 	.word	0x080031fc

080028c0 <__retarget_lock_acquire_recursive>:
 80028c0:	4770      	bx	lr

080028c2 <__retarget_lock_release_recursive>:
 80028c2:	4770      	bx	lr

080028c4 <_free_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4605      	mov	r5, r0
 80028c8:	2900      	cmp	r1, #0
 80028ca:	d040      	beq.n	800294e <_free_r+0x8a>
 80028cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028d0:	1f0c      	subs	r4, r1, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bfb8      	it	lt
 80028d6:	18e4      	addlt	r4, r4, r3
 80028d8:	f000 f8de 	bl	8002a98 <__malloc_lock>
 80028dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <_free_r+0x8c>)
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	b933      	cbnz	r3, 80028f0 <_free_r+0x2c>
 80028e2:	6063      	str	r3, [r4, #4]
 80028e4:	6014      	str	r4, [r2, #0]
 80028e6:	4628      	mov	r0, r5
 80028e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028ec:	f000 b8da 	b.w	8002aa4 <__malloc_unlock>
 80028f0:	42a3      	cmp	r3, r4
 80028f2:	d908      	bls.n	8002906 <_free_r+0x42>
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	1821      	adds	r1, r4, r0
 80028f8:	428b      	cmp	r3, r1
 80028fa:	bf01      	itttt	eq
 80028fc:	6819      	ldreq	r1, [r3, #0]
 80028fe:	685b      	ldreq	r3, [r3, #4]
 8002900:	1809      	addeq	r1, r1, r0
 8002902:	6021      	streq	r1, [r4, #0]
 8002904:	e7ed      	b.n	80028e2 <_free_r+0x1e>
 8002906:	461a      	mov	r2, r3
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	b10b      	cbz	r3, 8002910 <_free_r+0x4c>
 800290c:	42a3      	cmp	r3, r4
 800290e:	d9fa      	bls.n	8002906 <_free_r+0x42>
 8002910:	6811      	ldr	r1, [r2, #0]
 8002912:	1850      	adds	r0, r2, r1
 8002914:	42a0      	cmp	r0, r4
 8002916:	d10b      	bne.n	8002930 <_free_r+0x6c>
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	4401      	add	r1, r0
 800291c:	1850      	adds	r0, r2, r1
 800291e:	4283      	cmp	r3, r0
 8002920:	6011      	str	r1, [r2, #0]
 8002922:	d1e0      	bne.n	80028e6 <_free_r+0x22>
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4408      	add	r0, r1
 800292a:	6010      	str	r0, [r2, #0]
 800292c:	6053      	str	r3, [r2, #4]
 800292e:	e7da      	b.n	80028e6 <_free_r+0x22>
 8002930:	d902      	bls.n	8002938 <_free_r+0x74>
 8002932:	230c      	movs	r3, #12
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	e7d6      	b.n	80028e6 <_free_r+0x22>
 8002938:	6820      	ldr	r0, [r4, #0]
 800293a:	1821      	adds	r1, r4, r0
 800293c:	428b      	cmp	r3, r1
 800293e:	bf01      	itttt	eq
 8002940:	6819      	ldreq	r1, [r3, #0]
 8002942:	685b      	ldreq	r3, [r3, #4]
 8002944:	1809      	addeq	r1, r1, r0
 8002946:	6021      	streq	r1, [r4, #0]
 8002948:	6063      	str	r3, [r4, #4]
 800294a:	6054      	str	r4, [r2, #4]
 800294c:	e7cb      	b.n	80028e6 <_free_r+0x22>
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	2000031c 	.word	0x2000031c

08002954 <sbrk_aligned>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	4e0f      	ldr	r6, [pc, #60]	@ (8002994 <sbrk_aligned+0x40>)
 8002958:	460c      	mov	r4, r1
 800295a:	6831      	ldr	r1, [r6, #0]
 800295c:	4605      	mov	r5, r0
 800295e:	b911      	cbnz	r1, 8002966 <sbrk_aligned+0x12>
 8002960:	f000 fba8 	bl	80030b4 <_sbrk_r>
 8002964:	6030      	str	r0, [r6, #0]
 8002966:	4621      	mov	r1, r4
 8002968:	4628      	mov	r0, r5
 800296a:	f000 fba3 	bl	80030b4 <_sbrk_r>
 800296e:	1c43      	adds	r3, r0, #1
 8002970:	d103      	bne.n	800297a <sbrk_aligned+0x26>
 8002972:	f04f 34ff 	mov.w	r4, #4294967295
 8002976:	4620      	mov	r0, r4
 8002978:	bd70      	pop	{r4, r5, r6, pc}
 800297a:	1cc4      	adds	r4, r0, #3
 800297c:	f024 0403 	bic.w	r4, r4, #3
 8002980:	42a0      	cmp	r0, r4
 8002982:	d0f8      	beq.n	8002976 <sbrk_aligned+0x22>
 8002984:	1a21      	subs	r1, r4, r0
 8002986:	4628      	mov	r0, r5
 8002988:	f000 fb94 	bl	80030b4 <_sbrk_r>
 800298c:	3001      	adds	r0, #1
 800298e:	d1f2      	bne.n	8002976 <sbrk_aligned+0x22>
 8002990:	e7ef      	b.n	8002972 <sbrk_aligned+0x1e>
 8002992:	bf00      	nop
 8002994:	20000318 	.word	0x20000318

08002998 <_malloc_r>:
 8002998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800299c:	1ccd      	adds	r5, r1, #3
 800299e:	f025 0503 	bic.w	r5, r5, #3
 80029a2:	3508      	adds	r5, #8
 80029a4:	2d0c      	cmp	r5, #12
 80029a6:	bf38      	it	cc
 80029a8:	250c      	movcc	r5, #12
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	4606      	mov	r6, r0
 80029ae:	db01      	blt.n	80029b4 <_malloc_r+0x1c>
 80029b0:	42a9      	cmp	r1, r5
 80029b2:	d904      	bls.n	80029be <_malloc_r+0x26>
 80029b4:	230c      	movs	r3, #12
 80029b6:	6033      	str	r3, [r6, #0]
 80029b8:	2000      	movs	r0, #0
 80029ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a94 <_malloc_r+0xfc>
 80029c2:	f000 f869 	bl	8002a98 <__malloc_lock>
 80029c6:	f8d8 3000 	ldr.w	r3, [r8]
 80029ca:	461c      	mov	r4, r3
 80029cc:	bb44      	cbnz	r4, 8002a20 <_malloc_r+0x88>
 80029ce:	4629      	mov	r1, r5
 80029d0:	4630      	mov	r0, r6
 80029d2:	f7ff ffbf 	bl	8002954 <sbrk_aligned>
 80029d6:	1c43      	adds	r3, r0, #1
 80029d8:	4604      	mov	r4, r0
 80029da:	d158      	bne.n	8002a8e <_malloc_r+0xf6>
 80029dc:	f8d8 4000 	ldr.w	r4, [r8]
 80029e0:	4627      	mov	r7, r4
 80029e2:	2f00      	cmp	r7, #0
 80029e4:	d143      	bne.n	8002a6e <_malloc_r+0xd6>
 80029e6:	2c00      	cmp	r4, #0
 80029e8:	d04b      	beq.n	8002a82 <_malloc_r+0xea>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	4639      	mov	r1, r7
 80029ee:	4630      	mov	r0, r6
 80029f0:	eb04 0903 	add.w	r9, r4, r3
 80029f4:	f000 fb5e 	bl	80030b4 <_sbrk_r>
 80029f8:	4581      	cmp	r9, r0
 80029fa:	d142      	bne.n	8002a82 <_malloc_r+0xea>
 80029fc:	6821      	ldr	r1, [r4, #0]
 80029fe:	4630      	mov	r0, r6
 8002a00:	1a6d      	subs	r5, r5, r1
 8002a02:	4629      	mov	r1, r5
 8002a04:	f7ff ffa6 	bl	8002954 <sbrk_aligned>
 8002a08:	3001      	adds	r0, #1
 8002a0a:	d03a      	beq.n	8002a82 <_malloc_r+0xea>
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	442b      	add	r3, r5
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	f8d8 3000 	ldr.w	r3, [r8]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	bb62      	cbnz	r2, 8002a74 <_malloc_r+0xdc>
 8002a1a:	f8c8 7000 	str.w	r7, [r8]
 8002a1e:	e00f      	b.n	8002a40 <_malloc_r+0xa8>
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	1b52      	subs	r2, r2, r5
 8002a24:	d420      	bmi.n	8002a68 <_malloc_r+0xd0>
 8002a26:	2a0b      	cmp	r2, #11
 8002a28:	d917      	bls.n	8002a5a <_malloc_r+0xc2>
 8002a2a:	1961      	adds	r1, r4, r5
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	6025      	str	r5, [r4, #0]
 8002a30:	bf18      	it	ne
 8002a32:	6059      	strne	r1, [r3, #4]
 8002a34:	6863      	ldr	r3, [r4, #4]
 8002a36:	bf08      	it	eq
 8002a38:	f8c8 1000 	streq.w	r1, [r8]
 8002a3c:	5162      	str	r2, [r4, r5]
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	4630      	mov	r0, r6
 8002a42:	f000 f82f 	bl	8002aa4 <__malloc_unlock>
 8002a46:	f104 000b 	add.w	r0, r4, #11
 8002a4a:	1d23      	adds	r3, r4, #4
 8002a4c:	f020 0007 	bic.w	r0, r0, #7
 8002a50:	1ac2      	subs	r2, r0, r3
 8002a52:	bf1c      	itt	ne
 8002a54:	1a1b      	subne	r3, r3, r0
 8002a56:	50a3      	strne	r3, [r4, r2]
 8002a58:	e7af      	b.n	80029ba <_malloc_r+0x22>
 8002a5a:	6862      	ldr	r2, [r4, #4]
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	bf0c      	ite	eq
 8002a60:	f8c8 2000 	streq.w	r2, [r8]
 8002a64:	605a      	strne	r2, [r3, #4]
 8002a66:	e7eb      	b.n	8002a40 <_malloc_r+0xa8>
 8002a68:	4623      	mov	r3, r4
 8002a6a:	6864      	ldr	r4, [r4, #4]
 8002a6c:	e7ae      	b.n	80029cc <_malloc_r+0x34>
 8002a6e:	463c      	mov	r4, r7
 8002a70:	687f      	ldr	r7, [r7, #4]
 8002a72:	e7b6      	b.n	80029e2 <_malloc_r+0x4a>
 8002a74:	461a      	mov	r2, r3
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	42a3      	cmp	r3, r4
 8002a7a:	d1fb      	bne.n	8002a74 <_malloc_r+0xdc>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	6053      	str	r3, [r2, #4]
 8002a80:	e7de      	b.n	8002a40 <_malloc_r+0xa8>
 8002a82:	230c      	movs	r3, #12
 8002a84:	4630      	mov	r0, r6
 8002a86:	6033      	str	r3, [r6, #0]
 8002a88:	f000 f80c 	bl	8002aa4 <__malloc_unlock>
 8002a8c:	e794      	b.n	80029b8 <_malloc_r+0x20>
 8002a8e:	6005      	str	r5, [r0, #0]
 8002a90:	e7d6      	b.n	8002a40 <_malloc_r+0xa8>
 8002a92:	bf00      	nop
 8002a94:	2000031c 	.word	0x2000031c

08002a98 <__malloc_lock>:
 8002a98:	4801      	ldr	r0, [pc, #4]	@ (8002aa0 <__malloc_lock+0x8>)
 8002a9a:	f7ff bf11 	b.w	80028c0 <__retarget_lock_acquire_recursive>
 8002a9e:	bf00      	nop
 8002aa0:	20000314 	.word	0x20000314

08002aa4 <__malloc_unlock>:
 8002aa4:	4801      	ldr	r0, [pc, #4]	@ (8002aac <__malloc_unlock+0x8>)
 8002aa6:	f7ff bf0c 	b.w	80028c2 <__retarget_lock_release_recursive>
 8002aaa:	bf00      	nop
 8002aac:	20000314 	.word	0x20000314

08002ab0 <__ssputs_r>:
 8002ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab4:	461f      	mov	r7, r3
 8002ab6:	688e      	ldr	r6, [r1, #8]
 8002ab8:	4682      	mov	sl, r0
 8002aba:	42be      	cmp	r6, r7
 8002abc:	460c      	mov	r4, r1
 8002abe:	4690      	mov	r8, r2
 8002ac0:	680b      	ldr	r3, [r1, #0]
 8002ac2:	d82d      	bhi.n	8002b20 <__ssputs_r+0x70>
 8002ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ac8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002acc:	d026      	beq.n	8002b1c <__ssputs_r+0x6c>
 8002ace:	6965      	ldr	r5, [r4, #20]
 8002ad0:	6909      	ldr	r1, [r1, #16]
 8002ad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ad6:	eba3 0901 	sub.w	r9, r3, r1
 8002ada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ade:	1c7b      	adds	r3, r7, #1
 8002ae0:	444b      	add	r3, r9
 8002ae2:	106d      	asrs	r5, r5, #1
 8002ae4:	429d      	cmp	r5, r3
 8002ae6:	bf38      	it	cc
 8002ae8:	461d      	movcc	r5, r3
 8002aea:	0553      	lsls	r3, r2, #21
 8002aec:	d527      	bpl.n	8002b3e <__ssputs_r+0x8e>
 8002aee:	4629      	mov	r1, r5
 8002af0:	f7ff ff52 	bl	8002998 <_malloc_r>
 8002af4:	4606      	mov	r6, r0
 8002af6:	b360      	cbz	r0, 8002b52 <__ssputs_r+0xa2>
 8002af8:	464a      	mov	r2, r9
 8002afa:	6921      	ldr	r1, [r4, #16]
 8002afc:	f000 faf8 	bl	80030f0 <memcpy>
 8002b00:	89a3      	ldrh	r3, [r4, #12]
 8002b02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0a:	81a3      	strh	r3, [r4, #12]
 8002b0c:	6126      	str	r6, [r4, #16]
 8002b0e:	444e      	add	r6, r9
 8002b10:	6026      	str	r6, [r4, #0]
 8002b12:	463e      	mov	r6, r7
 8002b14:	6165      	str	r5, [r4, #20]
 8002b16:	eba5 0509 	sub.w	r5, r5, r9
 8002b1a:	60a5      	str	r5, [r4, #8]
 8002b1c:	42be      	cmp	r6, r7
 8002b1e:	d900      	bls.n	8002b22 <__ssputs_r+0x72>
 8002b20:	463e      	mov	r6, r7
 8002b22:	4632      	mov	r2, r6
 8002b24:	4641      	mov	r1, r8
 8002b26:	6820      	ldr	r0, [r4, #0]
 8002b28:	f000 faaa 	bl	8003080 <memmove>
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	68a3      	ldr	r3, [r4, #8]
 8002b30:	1b9b      	subs	r3, r3, r6
 8002b32:	60a3      	str	r3, [r4, #8]
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	4433      	add	r3, r6
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3e:	462a      	mov	r2, r5
 8002b40:	f000 fae4 	bl	800310c <_realloc_r>
 8002b44:	4606      	mov	r6, r0
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d1e0      	bne.n	8002b0c <__ssputs_r+0x5c>
 8002b4a:	4650      	mov	r0, sl
 8002b4c:	6921      	ldr	r1, [r4, #16]
 8002b4e:	f7ff feb9 	bl	80028c4 <_free_r>
 8002b52:	230c      	movs	r3, #12
 8002b54:	f8ca 3000 	str.w	r3, [sl]
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	e7e9      	b.n	8002b3a <__ssputs_r+0x8a>
	...

08002b68 <_svfiprintf_r>:
 8002b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	4698      	mov	r8, r3
 8002b6e:	898b      	ldrh	r3, [r1, #12]
 8002b70:	4607      	mov	r7, r0
 8002b72:	061b      	lsls	r3, r3, #24
 8002b74:	460d      	mov	r5, r1
 8002b76:	4614      	mov	r4, r2
 8002b78:	b09d      	sub	sp, #116	@ 0x74
 8002b7a:	d510      	bpl.n	8002b9e <_svfiprintf_r+0x36>
 8002b7c:	690b      	ldr	r3, [r1, #16]
 8002b7e:	b973      	cbnz	r3, 8002b9e <_svfiprintf_r+0x36>
 8002b80:	2140      	movs	r1, #64	@ 0x40
 8002b82:	f7ff ff09 	bl	8002998 <_malloc_r>
 8002b86:	6028      	str	r0, [r5, #0]
 8002b88:	6128      	str	r0, [r5, #16]
 8002b8a:	b930      	cbnz	r0, 8002b9a <_svfiprintf_r+0x32>
 8002b8c:	230c      	movs	r3, #12
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	b01d      	add	sp, #116	@ 0x74
 8002b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b9a:	2340      	movs	r3, #64	@ 0x40
 8002b9c:	616b      	str	r3, [r5, #20]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ba8:	2330      	movs	r3, #48	@ 0x30
 8002baa:	f04f 0901 	mov.w	r9, #1
 8002bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bb2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002d4c <_svfiprintf_r+0x1e4>
 8002bb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002bba:	4623      	mov	r3, r4
 8002bbc:	469a      	mov	sl, r3
 8002bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bc2:	b10a      	cbz	r2, 8002bc8 <_svfiprintf_r+0x60>
 8002bc4:	2a25      	cmp	r2, #37	@ 0x25
 8002bc6:	d1f9      	bne.n	8002bbc <_svfiprintf_r+0x54>
 8002bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8002bcc:	d00b      	beq.n	8002be6 <_svfiprintf_r+0x7e>
 8002bce:	465b      	mov	r3, fp
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	f7ff ff6b 	bl	8002ab0 <__ssputs_r>
 8002bda:	3001      	adds	r0, #1
 8002bdc:	f000 80a7 	beq.w	8002d2e <_svfiprintf_r+0x1c6>
 8002be0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002be2:	445a      	add	r2, fp
 8002be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002be6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 809f 	beq.w	8002d2e <_svfiprintf_r+0x1c6>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bfa:	f10a 0a01 	add.w	sl, sl, #1
 8002bfe:	9304      	str	r3, [sp, #16]
 8002c00:	9307      	str	r3, [sp, #28]
 8002c02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c06:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c08:	4654      	mov	r4, sl
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c10:	484e      	ldr	r0, [pc, #312]	@ (8002d4c <_svfiprintf_r+0x1e4>)
 8002c12:	f000 fa5f 	bl	80030d4 <memchr>
 8002c16:	9a04      	ldr	r2, [sp, #16]
 8002c18:	b9d8      	cbnz	r0, 8002c52 <_svfiprintf_r+0xea>
 8002c1a:	06d0      	lsls	r0, r2, #27
 8002c1c:	bf44      	itt	mi
 8002c1e:	2320      	movmi	r3, #32
 8002c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c24:	0711      	lsls	r1, r2, #28
 8002c26:	bf44      	itt	mi
 8002c28:	232b      	movmi	r3, #43	@ 0x2b
 8002c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c34:	d015      	beq.n	8002c62 <_svfiprintf_r+0xfa>
 8002c36:	4654      	mov	r4, sl
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f04f 0c0a 	mov.w	ip, #10
 8002c3e:	9a07      	ldr	r2, [sp, #28]
 8002c40:	4621      	mov	r1, r4
 8002c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c46:	3b30      	subs	r3, #48	@ 0x30
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d94b      	bls.n	8002ce4 <_svfiprintf_r+0x17c>
 8002c4c:	b1b0      	cbz	r0, 8002c7c <_svfiprintf_r+0x114>
 8002c4e:	9207      	str	r2, [sp, #28]
 8002c50:	e014      	b.n	8002c7c <_svfiprintf_r+0x114>
 8002c52:	eba0 0308 	sub.w	r3, r0, r8
 8002c56:	fa09 f303 	lsl.w	r3, r9, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	46a2      	mov	sl, r4
 8002c5e:	9304      	str	r3, [sp, #16]
 8002c60:	e7d2      	b.n	8002c08 <_svfiprintf_r+0xa0>
 8002c62:	9b03      	ldr	r3, [sp, #12]
 8002c64:	1d19      	adds	r1, r3, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	9103      	str	r1, [sp, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bfbb      	ittet	lt
 8002c6e:	425b      	neglt	r3, r3
 8002c70:	f042 0202 	orrlt.w	r2, r2, #2
 8002c74:	9307      	strge	r3, [sp, #28]
 8002c76:	9307      	strlt	r3, [sp, #28]
 8002c78:	bfb8      	it	lt
 8002c7a:	9204      	strlt	r2, [sp, #16]
 8002c7c:	7823      	ldrb	r3, [r4, #0]
 8002c7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c80:	d10a      	bne.n	8002c98 <_svfiprintf_r+0x130>
 8002c82:	7863      	ldrb	r3, [r4, #1]
 8002c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c86:	d132      	bne.n	8002cee <_svfiprintf_r+0x186>
 8002c88:	9b03      	ldr	r3, [sp, #12]
 8002c8a:	3402      	adds	r4, #2
 8002c8c:	1d1a      	adds	r2, r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	9203      	str	r2, [sp, #12]
 8002c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c96:	9305      	str	r3, [sp, #20]
 8002c98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002d50 <_svfiprintf_r+0x1e8>
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	4650      	mov	r0, sl
 8002ca0:	7821      	ldrb	r1, [r4, #0]
 8002ca2:	f000 fa17 	bl	80030d4 <memchr>
 8002ca6:	b138      	cbz	r0, 8002cb8 <_svfiprintf_r+0x150>
 8002ca8:	2240      	movs	r2, #64	@ 0x40
 8002caa:	9b04      	ldr	r3, [sp, #16]
 8002cac:	eba0 000a 	sub.w	r0, r0, sl
 8002cb0:	4082      	lsls	r2, r0
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	3401      	adds	r4, #1
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	4825      	ldr	r0, [pc, #148]	@ (8002d54 <_svfiprintf_r+0x1ec>)
 8002cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002cc4:	f000 fa06 	bl	80030d4 <memchr>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d036      	beq.n	8002d3a <_svfiprintf_r+0x1d2>
 8002ccc:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <_svfiprintf_r+0x1f0>)
 8002cce:	bb1b      	cbnz	r3, 8002d18 <_svfiprintf_r+0x1b0>
 8002cd0:	9b03      	ldr	r3, [sp, #12]
 8002cd2:	3307      	adds	r3, #7
 8002cd4:	f023 0307 	bic.w	r3, r3, #7
 8002cd8:	3308      	adds	r3, #8
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002cde:	4433      	add	r3, r6
 8002ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ce2:	e76a      	b.n	8002bba <_svfiprintf_r+0x52>
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cec:	e7a8      	b.n	8002c40 <_svfiprintf_r+0xd8>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f04f 0c0a 	mov.w	ip, #10
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	3401      	adds	r4, #1
 8002cf8:	9305      	str	r3, [sp, #20]
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d00:	3a30      	subs	r2, #48	@ 0x30
 8002d02:	2a09      	cmp	r2, #9
 8002d04:	d903      	bls.n	8002d0e <_svfiprintf_r+0x1a6>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0c6      	beq.n	8002c98 <_svfiprintf_r+0x130>
 8002d0a:	9105      	str	r1, [sp, #20]
 8002d0c:	e7c4      	b.n	8002c98 <_svfiprintf_r+0x130>
 8002d0e:	4604      	mov	r4, r0
 8002d10:	2301      	movs	r3, #1
 8002d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d16:	e7f0      	b.n	8002cfa <_svfiprintf_r+0x192>
 8002d18:	ab03      	add	r3, sp, #12
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	462a      	mov	r2, r5
 8002d1e:	4638      	mov	r0, r7
 8002d20:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <_svfiprintf_r+0x1f4>)
 8002d22:	a904      	add	r1, sp, #16
 8002d24:	f3af 8000 	nop.w
 8002d28:	1c42      	adds	r2, r0, #1
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	d1d6      	bne.n	8002cdc <_svfiprintf_r+0x174>
 8002d2e:	89ab      	ldrh	r3, [r5, #12]
 8002d30:	065b      	lsls	r3, r3, #25
 8002d32:	f53f af2d 	bmi.w	8002b90 <_svfiprintf_r+0x28>
 8002d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d38:	e72c      	b.n	8002b94 <_svfiprintf_r+0x2c>
 8002d3a:	ab03      	add	r3, sp, #12
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	462a      	mov	r2, r5
 8002d40:	4638      	mov	r0, r7
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <_svfiprintf_r+0x1f4>)
 8002d44:	a904      	add	r1, sp, #16
 8002d46:	f000 f87d 	bl	8002e44 <_printf_i>
 8002d4a:	e7ed      	b.n	8002d28 <_svfiprintf_r+0x1c0>
 8002d4c:	080031c2 	.word	0x080031c2
 8002d50:	080031c8 	.word	0x080031c8
 8002d54:	080031cc 	.word	0x080031cc
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	08002ab1 	.word	0x08002ab1

08002d60 <_printf_common>:
 8002d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d64:	4616      	mov	r6, r2
 8002d66:	4698      	mov	r8, r3
 8002d68:	688a      	ldr	r2, [r1, #8]
 8002d6a:	690b      	ldr	r3, [r1, #16]
 8002d6c:	4607      	mov	r7, r0
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bfb8      	it	lt
 8002d72:	4613      	movlt	r3, r2
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d80:	b10a      	cbz	r2, 8002d86 <_printf_common+0x26>
 8002d82:	3301      	adds	r3, #1
 8002d84:	6033      	str	r3, [r6, #0]
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	0699      	lsls	r1, r3, #26
 8002d8a:	bf42      	ittt	mi
 8002d8c:	6833      	ldrmi	r3, [r6, #0]
 8002d8e:	3302      	addmi	r3, #2
 8002d90:	6033      	strmi	r3, [r6, #0]
 8002d92:	6825      	ldr	r5, [r4, #0]
 8002d94:	f015 0506 	ands.w	r5, r5, #6
 8002d98:	d106      	bne.n	8002da8 <_printf_common+0x48>
 8002d9a:	f104 0a19 	add.w	sl, r4, #25
 8002d9e:	68e3      	ldr	r3, [r4, #12]
 8002da0:	6832      	ldr	r2, [r6, #0]
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	42ab      	cmp	r3, r5
 8002da6:	dc2b      	bgt.n	8002e00 <_printf_common+0xa0>
 8002da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002dac:	6822      	ldr	r2, [r4, #0]
 8002dae:	3b00      	subs	r3, #0
 8002db0:	bf18      	it	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	0692      	lsls	r2, r2, #26
 8002db6:	d430      	bmi.n	8002e1a <_printf_common+0xba>
 8002db8:	4641      	mov	r1, r8
 8002dba:	4638      	mov	r0, r7
 8002dbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002dc0:	47c8      	blx	r9
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d023      	beq.n	8002e0e <_printf_common+0xae>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	6922      	ldr	r2, [r4, #16]
 8002dca:	f003 0306 	and.w	r3, r3, #6
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf14      	ite	ne
 8002dd2:	2500      	movne	r5, #0
 8002dd4:	6833      	ldreq	r3, [r6, #0]
 8002dd6:	f04f 0600 	mov.w	r6, #0
 8002dda:	bf08      	it	eq
 8002ddc:	68e5      	ldreq	r5, [r4, #12]
 8002dde:	f104 041a 	add.w	r4, r4, #26
 8002de2:	bf08      	it	eq
 8002de4:	1aed      	subeq	r5, r5, r3
 8002de6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002dea:	bf08      	it	eq
 8002dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bfc4      	itt	gt
 8002df4:	1a9b      	subgt	r3, r3, r2
 8002df6:	18ed      	addgt	r5, r5, r3
 8002df8:	42b5      	cmp	r5, r6
 8002dfa:	d11a      	bne.n	8002e32 <_printf_common+0xd2>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e008      	b.n	8002e12 <_printf_common+0xb2>
 8002e00:	2301      	movs	r3, #1
 8002e02:	4652      	mov	r2, sl
 8002e04:	4641      	mov	r1, r8
 8002e06:	4638      	mov	r0, r7
 8002e08:	47c8      	blx	r9
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d103      	bne.n	8002e16 <_printf_common+0xb6>
 8002e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e16:	3501      	adds	r5, #1
 8002e18:	e7c1      	b.n	8002d9e <_printf_common+0x3e>
 8002e1a:	2030      	movs	r0, #48	@ 0x30
 8002e1c:	18e1      	adds	r1, r4, r3
 8002e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002e28:	4422      	add	r2, r4
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002e30:	e7c2      	b.n	8002db8 <_printf_common+0x58>
 8002e32:	2301      	movs	r3, #1
 8002e34:	4622      	mov	r2, r4
 8002e36:	4641      	mov	r1, r8
 8002e38:	4638      	mov	r0, r7
 8002e3a:	47c8      	blx	r9
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d0e6      	beq.n	8002e0e <_printf_common+0xae>
 8002e40:	3601      	adds	r6, #1
 8002e42:	e7d9      	b.n	8002df8 <_printf_common+0x98>

08002e44 <_printf_i>:
 8002e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	7e0f      	ldrb	r7, [r1, #24]
 8002e4a:	4691      	mov	r9, r2
 8002e4c:	2f78      	cmp	r7, #120	@ 0x78
 8002e4e:	4680      	mov	r8, r0
 8002e50:	460c      	mov	r4, r1
 8002e52:	469a      	mov	sl, r3
 8002e54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e5a:	d807      	bhi.n	8002e6c <_printf_i+0x28>
 8002e5c:	2f62      	cmp	r7, #98	@ 0x62
 8002e5e:	d80a      	bhi.n	8002e76 <_printf_i+0x32>
 8002e60:	2f00      	cmp	r7, #0
 8002e62:	f000 80d1 	beq.w	8003008 <_printf_i+0x1c4>
 8002e66:	2f58      	cmp	r7, #88	@ 0x58
 8002e68:	f000 80b8 	beq.w	8002fdc <_printf_i+0x198>
 8002e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e74:	e03a      	b.n	8002eec <_printf_i+0xa8>
 8002e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e7a:	2b15      	cmp	r3, #21
 8002e7c:	d8f6      	bhi.n	8002e6c <_printf_i+0x28>
 8002e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8002e84 <_printf_i+0x40>)
 8002e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e84:	08002edd 	.word	0x08002edd
 8002e88:	08002ef1 	.word	0x08002ef1
 8002e8c:	08002e6d 	.word	0x08002e6d
 8002e90:	08002e6d 	.word	0x08002e6d
 8002e94:	08002e6d 	.word	0x08002e6d
 8002e98:	08002e6d 	.word	0x08002e6d
 8002e9c:	08002ef1 	.word	0x08002ef1
 8002ea0:	08002e6d 	.word	0x08002e6d
 8002ea4:	08002e6d 	.word	0x08002e6d
 8002ea8:	08002e6d 	.word	0x08002e6d
 8002eac:	08002e6d 	.word	0x08002e6d
 8002eb0:	08002fef 	.word	0x08002fef
 8002eb4:	08002f1b 	.word	0x08002f1b
 8002eb8:	08002fa9 	.word	0x08002fa9
 8002ebc:	08002e6d 	.word	0x08002e6d
 8002ec0:	08002e6d 	.word	0x08002e6d
 8002ec4:	08003011 	.word	0x08003011
 8002ec8:	08002e6d 	.word	0x08002e6d
 8002ecc:	08002f1b 	.word	0x08002f1b
 8002ed0:	08002e6d 	.word	0x08002e6d
 8002ed4:	08002e6d 	.word	0x08002e6d
 8002ed8:	08002fb1 	.word	0x08002fb1
 8002edc:	6833      	ldr	r3, [r6, #0]
 8002ede:	1d1a      	adds	r2, r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6032      	str	r2, [r6, #0]
 8002ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002eec:	2301      	movs	r3, #1
 8002eee:	e09c      	b.n	800302a <_printf_i+0x1e6>
 8002ef0:	6833      	ldr	r3, [r6, #0]
 8002ef2:	6820      	ldr	r0, [r4, #0]
 8002ef4:	1d19      	adds	r1, r3, #4
 8002ef6:	6031      	str	r1, [r6, #0]
 8002ef8:	0606      	lsls	r6, r0, #24
 8002efa:	d501      	bpl.n	8002f00 <_printf_i+0xbc>
 8002efc:	681d      	ldr	r5, [r3, #0]
 8002efe:	e003      	b.n	8002f08 <_printf_i+0xc4>
 8002f00:	0645      	lsls	r5, r0, #25
 8002f02:	d5fb      	bpl.n	8002efc <_printf_i+0xb8>
 8002f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002f08:	2d00      	cmp	r5, #0
 8002f0a:	da03      	bge.n	8002f14 <_printf_i+0xd0>
 8002f0c:	232d      	movs	r3, #45	@ 0x2d
 8002f0e:	426d      	negs	r5, r5
 8002f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f14:	230a      	movs	r3, #10
 8002f16:	4858      	ldr	r0, [pc, #352]	@ (8003078 <_printf_i+0x234>)
 8002f18:	e011      	b.n	8002f3e <_printf_i+0xfa>
 8002f1a:	6821      	ldr	r1, [r4, #0]
 8002f1c:	6833      	ldr	r3, [r6, #0]
 8002f1e:	0608      	lsls	r0, r1, #24
 8002f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8002f24:	d402      	bmi.n	8002f2c <_printf_i+0xe8>
 8002f26:	0649      	lsls	r1, r1, #25
 8002f28:	bf48      	it	mi
 8002f2a:	b2ad      	uxthmi	r5, r5
 8002f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002f2e:	6033      	str	r3, [r6, #0]
 8002f30:	bf14      	ite	ne
 8002f32:	230a      	movne	r3, #10
 8002f34:	2308      	moveq	r3, #8
 8002f36:	4850      	ldr	r0, [pc, #320]	@ (8003078 <_printf_i+0x234>)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002f3e:	6866      	ldr	r6, [r4, #4]
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	60a6      	str	r6, [r4, #8]
 8002f44:	db05      	blt.n	8002f52 <_printf_i+0x10e>
 8002f46:	6821      	ldr	r1, [r4, #0]
 8002f48:	432e      	orrs	r6, r5
 8002f4a:	f021 0104 	bic.w	r1, r1, #4
 8002f4e:	6021      	str	r1, [r4, #0]
 8002f50:	d04b      	beq.n	8002fea <_printf_i+0x1a6>
 8002f52:	4616      	mov	r6, r2
 8002f54:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f58:	fb03 5711 	mls	r7, r3, r1, r5
 8002f5c:	5dc7      	ldrb	r7, [r0, r7]
 8002f5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f62:	462f      	mov	r7, r5
 8002f64:	42bb      	cmp	r3, r7
 8002f66:	460d      	mov	r5, r1
 8002f68:	d9f4      	bls.n	8002f54 <_printf_i+0x110>
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d10b      	bne.n	8002f86 <_printf_i+0x142>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	07df      	lsls	r7, r3, #31
 8002f72:	d508      	bpl.n	8002f86 <_printf_i+0x142>
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	6861      	ldr	r1, [r4, #4]
 8002f78:	4299      	cmp	r1, r3
 8002f7a:	bfde      	ittt	le
 8002f7c:	2330      	movle	r3, #48	@ 0x30
 8002f7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f86:	1b92      	subs	r2, r2, r6
 8002f88:	6122      	str	r2, [r4, #16]
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4640      	mov	r0, r8
 8002f90:	f8cd a000 	str.w	sl, [sp]
 8002f94:	aa03      	add	r2, sp, #12
 8002f96:	f7ff fee3 	bl	8002d60 <_printf_common>
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d14a      	bne.n	8003034 <_printf_i+0x1f0>
 8002f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa2:	b004      	add	sp, #16
 8002fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	f043 0320 	orr.w	r3, r3, #32
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	2778      	movs	r7, #120	@ 0x78
 8002fb2:	4832      	ldr	r0, [pc, #200]	@ (800307c <_printf_i+0x238>)
 8002fb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	6831      	ldr	r1, [r6, #0]
 8002fbc:	061f      	lsls	r7, r3, #24
 8002fbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8002fc2:	d402      	bmi.n	8002fca <_printf_i+0x186>
 8002fc4:	065f      	lsls	r7, r3, #25
 8002fc6:	bf48      	it	mi
 8002fc8:	b2ad      	uxthmi	r5, r5
 8002fca:	6031      	str	r1, [r6, #0]
 8002fcc:	07d9      	lsls	r1, r3, #31
 8002fce:	bf44      	itt	mi
 8002fd0:	f043 0320 	orrmi.w	r3, r3, #32
 8002fd4:	6023      	strmi	r3, [r4, #0]
 8002fd6:	b11d      	cbz	r5, 8002fe0 <_printf_i+0x19c>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	e7ad      	b.n	8002f38 <_printf_i+0xf4>
 8002fdc:	4826      	ldr	r0, [pc, #152]	@ (8003078 <_printf_i+0x234>)
 8002fde:	e7e9      	b.n	8002fb4 <_printf_i+0x170>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	f023 0320 	bic.w	r3, r3, #32
 8002fe6:	6023      	str	r3, [r4, #0]
 8002fe8:	e7f6      	b.n	8002fd8 <_printf_i+0x194>
 8002fea:	4616      	mov	r6, r2
 8002fec:	e7bd      	b.n	8002f6a <_printf_i+0x126>
 8002fee:	6833      	ldr	r3, [r6, #0]
 8002ff0:	6825      	ldr	r5, [r4, #0]
 8002ff2:	1d18      	adds	r0, r3, #4
 8002ff4:	6961      	ldr	r1, [r4, #20]
 8002ff6:	6030      	str	r0, [r6, #0]
 8002ff8:	062e      	lsls	r6, r5, #24
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	d501      	bpl.n	8003002 <_printf_i+0x1be>
 8002ffe:	6019      	str	r1, [r3, #0]
 8003000:	e002      	b.n	8003008 <_printf_i+0x1c4>
 8003002:	0668      	lsls	r0, r5, #25
 8003004:	d5fb      	bpl.n	8002ffe <_printf_i+0x1ba>
 8003006:	8019      	strh	r1, [r3, #0]
 8003008:	2300      	movs	r3, #0
 800300a:	4616      	mov	r6, r2
 800300c:	6123      	str	r3, [r4, #16]
 800300e:	e7bc      	b.n	8002f8a <_printf_i+0x146>
 8003010:	6833      	ldr	r3, [r6, #0]
 8003012:	2100      	movs	r1, #0
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	6032      	str	r2, [r6, #0]
 8003018:	681e      	ldr	r6, [r3, #0]
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	4630      	mov	r0, r6
 800301e:	f000 f859 	bl	80030d4 <memchr>
 8003022:	b108      	cbz	r0, 8003028 <_printf_i+0x1e4>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	6060      	str	r0, [r4, #4]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	6123      	str	r3, [r4, #16]
 800302c:	2300      	movs	r3, #0
 800302e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003032:	e7aa      	b.n	8002f8a <_printf_i+0x146>
 8003034:	4632      	mov	r2, r6
 8003036:	4649      	mov	r1, r9
 8003038:	4640      	mov	r0, r8
 800303a:	6923      	ldr	r3, [r4, #16]
 800303c:	47d0      	blx	sl
 800303e:	3001      	adds	r0, #1
 8003040:	d0ad      	beq.n	8002f9e <_printf_i+0x15a>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	079b      	lsls	r3, r3, #30
 8003046:	d413      	bmi.n	8003070 <_printf_i+0x22c>
 8003048:	68e0      	ldr	r0, [r4, #12]
 800304a:	9b03      	ldr	r3, [sp, #12]
 800304c:	4298      	cmp	r0, r3
 800304e:	bfb8      	it	lt
 8003050:	4618      	movlt	r0, r3
 8003052:	e7a6      	b.n	8002fa2 <_printf_i+0x15e>
 8003054:	2301      	movs	r3, #1
 8003056:	4632      	mov	r2, r6
 8003058:	4649      	mov	r1, r9
 800305a:	4640      	mov	r0, r8
 800305c:	47d0      	blx	sl
 800305e:	3001      	adds	r0, #1
 8003060:	d09d      	beq.n	8002f9e <_printf_i+0x15a>
 8003062:	3501      	adds	r5, #1
 8003064:	68e3      	ldr	r3, [r4, #12]
 8003066:	9903      	ldr	r1, [sp, #12]
 8003068:	1a5b      	subs	r3, r3, r1
 800306a:	42ab      	cmp	r3, r5
 800306c:	dcf2      	bgt.n	8003054 <_printf_i+0x210>
 800306e:	e7eb      	b.n	8003048 <_printf_i+0x204>
 8003070:	2500      	movs	r5, #0
 8003072:	f104 0619 	add.w	r6, r4, #25
 8003076:	e7f5      	b.n	8003064 <_printf_i+0x220>
 8003078:	080031d3 	.word	0x080031d3
 800307c:	080031e4 	.word	0x080031e4

08003080 <memmove>:
 8003080:	4288      	cmp	r0, r1
 8003082:	b510      	push	{r4, lr}
 8003084:	eb01 0402 	add.w	r4, r1, r2
 8003088:	d902      	bls.n	8003090 <memmove+0x10>
 800308a:	4284      	cmp	r4, r0
 800308c:	4623      	mov	r3, r4
 800308e:	d807      	bhi.n	80030a0 <memmove+0x20>
 8003090:	1e43      	subs	r3, r0, #1
 8003092:	42a1      	cmp	r1, r4
 8003094:	d008      	beq.n	80030a8 <memmove+0x28>
 8003096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800309a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800309e:	e7f8      	b.n	8003092 <memmove+0x12>
 80030a0:	4601      	mov	r1, r0
 80030a2:	4402      	add	r2, r0
 80030a4:	428a      	cmp	r2, r1
 80030a6:	d100      	bne.n	80030aa <memmove+0x2a>
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030b2:	e7f7      	b.n	80030a4 <memmove+0x24>

080030b4 <_sbrk_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d05      	ldr	r5, [pc, #20]	@ (80030d0 <_sbrk_r+0x1c>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	f7fd fc38 	bl	8000934 <_sbrk>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_sbrk_r+0x1a>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_sbrk_r+0x1a>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	20000310 	.word	0x20000310

080030d4 <memchr>:
 80030d4:	4603      	mov	r3, r0
 80030d6:	b510      	push	{r4, lr}
 80030d8:	b2c9      	uxtb	r1, r1
 80030da:	4402      	add	r2, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	d101      	bne.n	80030e6 <memchr+0x12>
 80030e2:	2000      	movs	r0, #0
 80030e4:	e003      	b.n	80030ee <memchr+0x1a>
 80030e6:	7804      	ldrb	r4, [r0, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	428c      	cmp	r4, r1
 80030ec:	d1f6      	bne.n	80030dc <memchr+0x8>
 80030ee:	bd10      	pop	{r4, pc}

080030f0 <memcpy>:
 80030f0:	440a      	add	r2, r1
 80030f2:	4291      	cmp	r1, r2
 80030f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80030f8:	d100      	bne.n	80030fc <memcpy+0xc>
 80030fa:	4770      	bx	lr
 80030fc:	b510      	push	{r4, lr}
 80030fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003102:	4291      	cmp	r1, r2
 8003104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003108:	d1f9      	bne.n	80030fe <memcpy+0xe>
 800310a:	bd10      	pop	{r4, pc}

0800310c <_realloc_r>:
 800310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003110:	4607      	mov	r7, r0
 8003112:	4614      	mov	r4, r2
 8003114:	460d      	mov	r5, r1
 8003116:	b921      	cbnz	r1, 8003122 <_realloc_r+0x16>
 8003118:	4611      	mov	r1, r2
 800311a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800311e:	f7ff bc3b 	b.w	8002998 <_malloc_r>
 8003122:	b92a      	cbnz	r2, 8003130 <_realloc_r+0x24>
 8003124:	f7ff fbce 	bl	80028c4 <_free_r>
 8003128:	4625      	mov	r5, r4
 800312a:	4628      	mov	r0, r5
 800312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003130:	f000 f81a 	bl	8003168 <_malloc_usable_size_r>
 8003134:	4284      	cmp	r4, r0
 8003136:	4606      	mov	r6, r0
 8003138:	d802      	bhi.n	8003140 <_realloc_r+0x34>
 800313a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800313e:	d8f4      	bhi.n	800312a <_realloc_r+0x1e>
 8003140:	4621      	mov	r1, r4
 8003142:	4638      	mov	r0, r7
 8003144:	f7ff fc28 	bl	8002998 <_malloc_r>
 8003148:	4680      	mov	r8, r0
 800314a:	b908      	cbnz	r0, 8003150 <_realloc_r+0x44>
 800314c:	4645      	mov	r5, r8
 800314e:	e7ec      	b.n	800312a <_realloc_r+0x1e>
 8003150:	42b4      	cmp	r4, r6
 8003152:	4622      	mov	r2, r4
 8003154:	4629      	mov	r1, r5
 8003156:	bf28      	it	cs
 8003158:	4632      	movcs	r2, r6
 800315a:	f7ff ffc9 	bl	80030f0 <memcpy>
 800315e:	4629      	mov	r1, r5
 8003160:	4638      	mov	r0, r7
 8003162:	f7ff fbaf 	bl	80028c4 <_free_r>
 8003166:	e7f1      	b.n	800314c <_realloc_r+0x40>

08003168 <_malloc_usable_size_r>:
 8003168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800316c:	1f18      	subs	r0, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	bfbc      	itt	lt
 8003172:	580b      	ldrlt	r3, [r1, r0]
 8003174:	18c0      	addlt	r0, r0, r3
 8003176:	4770      	bx	lr

08003178 <_init>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

08003184 <_fini>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr
