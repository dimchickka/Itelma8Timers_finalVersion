
new_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080034e0  080034e0  000044e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003660  08003660  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003660  08003660  00004660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003668  08003668  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003668  08003668  00004668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003670  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  080036cc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080036cc  00005344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b888  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2d  00000000  00000000  0001090d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00012340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000932  00000000  00000000  00012ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1d  00000000  00000000  00013812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d397  00000000  00000000  0002b22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a54b  00000000  00000000  000385c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e4  00000000  00000000  000c2b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c6138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034c8 	.word	0x080034c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080034c8 	.word	0x080034c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fdda 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80c 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f98e 	bl	8000488 <MX_GPIO_Init>
  MX_TIM1_Init();
 800016c:	f000 f84e 	bl	800020c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f960 	bl	8000434 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000174:	f000 f8a4 	bl	80002c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000178:	f000 f90c 	bl	8000394 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017c:	bf00      	nop
 800017e:	e7fd      	b.n	800017c <main+0x20>

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	@ 0x40
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0318 	add.w	r3, r7, #24
 800018a:	2228      	movs	r2, #40	@ 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f002 fd0c 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 f8c9 	bl	8001360 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d4:	f000 fc12 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2102      	movs	r1, #2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 fb36 	bl	8001864 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fe:	f000 fbfd 	bl	80009fc <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	@ 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000212:	f107 0308 	add.w	r3, r7, #8
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000228:	4b23      	ldr	r3, [pc, #140]	@ (80002b8 <MX_TIM1_Init+0xac>)
 800022a:	4a24      	ldr	r2, [pc, #144]	@ (80002bc <MX_TIM1_Init+0xb0>)
 800022c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800022e:	4b22      	ldr	r3, [pc, #136]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000230:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000236:	4b20      	ldr	r3, [pc, #128]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000238:	2210      	movs	r2, #16
 800023a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800023c:	4b1e      	ldr	r3, [pc, #120]	@ (80002b8 <MX_TIM1_Init+0xac>)
 800023e:	2263      	movs	r2, #99	@ 0x63
 8000240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000242:	4b1d      	ldr	r3, [pc, #116]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000248:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <MX_TIM1_Init+0xac>)
 800024a:	2200      	movs	r2, #0
 800024c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800024e:	4b1a      	ldr	r3, [pc, #104]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000254:	4818      	ldr	r0, [pc, #96]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000256:	f001 fc93 	bl	8001b80 <HAL_TIM_Base_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000260:	f000 fbcc 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	4619      	mov	r1, r3
 8000270:	4811      	ldr	r0, [pc, #68]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000272:	f001 ff0e 	bl	8002092 <HAL_TIM_ConfigClockSource>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800027c:	f000 fbbe 	bl	80009fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000280:	2108      	movs	r1, #8
 8000282:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <MX_TIM1_Init+0xac>)
 8000284:	f001 fdbc 	bl	8001e00 <HAL_TIM_OnePulse_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 800028e:	f000 fbb5 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000292:	2310      	movs	r3, #16
 8000294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000296:	2380      	movs	r3, #128	@ 0x80
 8000298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800029a:	463b      	mov	r3, r7
 800029c:	4619      	mov	r1, r3
 800029e:	4806      	ldr	r0, [pc, #24]	@ (80002b8 <MX_TIM1_Init+0xac>)
 80002a0:	f002 f9ba 	bl	8002618 <HAL_TIMEx_MasterConfigSynchronization>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80002aa:	f000 fba7 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002ae:	bf00      	nop
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000078 	.word	0x20000078
 80002bc:	40012c00 	.word	0x40012c00

080002c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	@ 0x30
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c6:	f107 0320 	add.w	r3, r7, #32
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002d4:	f107 030c 	add.w	r3, r7, #12
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ec:	4b28      	ldr	r3, [pc, #160]	@ (8000390 <MX_TIM2_Init+0xd0>)
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002f4:	4b26      	ldr	r3, [pc, #152]	@ (8000390 <MX_TIM2_Init+0xd0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fa:	4b25      	ldr	r3, [pc, #148]	@ (8000390 <MX_TIM2_Init+0xd0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000300:	4b23      	ldr	r3, [pc, #140]	@ (8000390 <MX_TIM2_Init+0xd0>)
 8000302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000308:	4b21      	ldr	r3, [pc, #132]	@ (8000390 <MX_TIM2_Init+0xd0>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030e:	4b20      	ldr	r3, [pc, #128]	@ (8000390 <MX_TIM2_Init+0xd0>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000314:	481e      	ldr	r0, [pc, #120]	@ (8000390 <MX_TIM2_Init+0xd0>)
 8000316:	f001 fc33 	bl	8001b80 <HAL_TIM_Base_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000320:	f000 fb6c 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000324:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000328:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800032a:	2300      	movs	r3, #0
 800032c:	627b      	str	r3, [r7, #36]	@ 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000336:	f107 0320 	add.w	r3, r7, #32
 800033a:	4619      	mov	r1, r3
 800033c:	4814      	ldr	r0, [pc, #80]	@ (8000390 <MX_TIM2_Init+0xd0>)
 800033e:	f001 fea8 	bl	8002092 <HAL_TIM_ConfigClockSource>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000348:	f000 fb58 	bl	80009fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800034c:	2305      	movs	r3, #5
 800034e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000354:	f107 030c 	add.w	r3, r7, #12
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	@ (8000390 <MX_TIM2_Init+0xd0>)
 800035c:	f001 ff60 	bl	8002220 <HAL_TIM_SlaveConfigSynchro>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000366:	f000 fb49 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800036a:	2320      	movs	r3, #32
 800036c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	@ (8000390 <MX_TIM2_Init+0xd0>)
 8000378:	f002 f94e 	bl	8002618 <HAL_TIMEx_MasterConfigSynchronization>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000382:	f000 fb3b 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3730      	adds	r7, #48	@ 0x30
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	200000c0 	.word	0x200000c0

08000394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003b2:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_TIM3_Init+0x98>)
 80003b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000430 <MX_TIM3_Init+0x9c>)
 80003b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <MX_TIM3_Init+0x98>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_TIM3_Init+0x98>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003c4:	4b19      	ldr	r3, [pc, #100]	@ (800042c <MX_TIM3_Init+0x98>)
 80003c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003cc:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_TIM3_Init+0x98>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b16      	ldr	r3, [pc, #88]	@ (800042c <MX_TIM3_Init+0x98>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003d8:	4814      	ldr	r0, [pc, #80]	@ (800042c <MX_TIM3_Init+0x98>)
 80003da:	f001 fbd1 	bl	8001b80 <HAL_TIM_Base_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003e4:	f000 fb0a 	bl	80009fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80003e8:	2307      	movs	r3, #7
 80003ea:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80003ec:	2310      	movs	r3, #16
 80003ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4619      	mov	r1, r3
 80003f6:	480d      	ldr	r0, [pc, #52]	@ (800042c <MX_TIM3_Init+0x98>)
 80003f8:	f001 ff12 	bl	8002220 <HAL_TIM_SlaveConfigSynchro>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000402:	f000 fafb 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4806      	ldr	r0, [pc, #24]	@ (800042c <MX_TIM3_Init+0x98>)
 8000414:	f002 f900 	bl	8002618 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800041e:	f000 faed 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000108 	.word	0x20000108
 8000430:	40000400 	.word	0x40000400

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <MX_USART2_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800043e:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800046c:	f002 f944 	bl	80026f8 <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000476:	f000 fac1 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000150 	.word	0x20000150
 8000484:	40004400 	.word	0x40004400

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049c:	4b39      	ldr	r3, [pc, #228]	@ (8000584 <MX_GPIO_Init+0xfc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a38      	ldr	r2, [pc, #224]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b36      	ldr	r3, [pc, #216]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0320 	and.w	r3, r3, #32
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b33      	ldr	r3, [pc, #204]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a32      	ldr	r2, [pc, #200]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b30      	ldr	r3, [pc, #192]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <MX_GPIO_Init+0xfc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0308 	and.w	r3, r3, #8
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80004ea:	4827      	ldr	r0, [pc, #156]	@ (8000588 <MX_GPIO_Init+0x100>)
 80004ec:	f000 ff08 	bl	8001300 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004f6:	4825      	ldr	r0, [pc, #148]	@ (800058c <MX_GPIO_Init+0x104>)
 80004f8:	f000 ff02 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80004fc:	2302      	movs	r3, #2
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000500:	4b23      	ldr	r3, [pc, #140]	@ (8000590 <MX_GPIO_Init+0x108>)
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000504:	2302      	movs	r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	481e      	ldr	r0, [pc, #120]	@ (8000588 <MX_GPIO_Init+0x100>)
 8000510:	f000 fd72 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000514:	23f0      	movs	r3, #240	@ 0xf0
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4817      	ldr	r0, [pc, #92]	@ (8000588 <MX_GPIO_Init+0x100>)
 800052c:	f000 fd64 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000530:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2302      	movs	r3, #2
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	4810      	ldr	r0, [pc, #64]	@ (800058c <MX_GPIO_Init+0x104>)
 800054a:	f000 fd55 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800054e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <MX_GPIO_Init+0x100>)
 8000568:	f000 fd46 	bl	8000ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	2007      	movs	r0, #7
 8000572:	f000 fd0a 	bl	8000f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000576:	2007      	movs	r0, #7
 8000578:	f000 fd23 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800057c:	bf00      	nop
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00
 8000590:	10110000 	.word	0x10110000

08000594 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000594:	b580      	push	{r7, lr}
 8000596:	b098      	sub	sp, #96	@ 0x60
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a76      	ldr	r2, [pc, #472]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	f040 80e4 	bne.w	800076e <HAL_TIM_PeriodElapsedCallback+0x1da>
		HAL_TIM_Base_Stop_IT(&htim1);
 80005a6:	4874      	ldr	r0, [pc, #464]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005a8:	f001 fbfc 	bl	8001da4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim2);
 80005ac:	4873      	ldr	r0, [pc, #460]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005ae:	f001 fb81 	bl	8001cb4 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim3);
 80005b2:	4873      	ldr	r0, [pc, #460]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80005b4:	f001 fb7e 	bl	8001cb4 <HAL_TIM_Base_Stop>
		if(capture_count < MAX_SAMPLES){
 80005b8:	4b72      	ldr	r3, [pc, #456]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b0a      	cmp	r3, #10
 80005be:	d851      	bhi.n	8000664 <HAL_TIM_PeriodElapsedCallback+0xd0>
			uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2); // значение в счётчике таймера №2
 80005c0:	4b6e      	ldr	r3, [pc, #440]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3); // значение в счётчике таймера №3
 80005ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2); // значение переполнения таймера №2 (65535)
 80005d4:	4b69      	ldr	r3, [pc, #420]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005da:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
			frequenciesForCurrentSensor[capture_count] = (count_main + (count_secondary * (arr + 1)))*100; // вычисляем
 80005de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80005e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80005e6:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80005ea:	3101      	adds	r1, #1
 80005ec:	fb01 f303 	mul.w	r3, r1, r3
 80005f0:	4413      	add	r3, r2
 80005f2:	2264      	movs	r2, #100	@ 0x64
 80005f4:	fb03 f202 	mul.w	r2, r3, r2
 80005f8:	4b62      	ldr	r3, [pc, #392]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a62      	ldr	r2, [pc, #392]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000600:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// uint32_t freq = TIM2->CNT + (TIM3->CNT << 16); // это вариант на регистрах, предыдущие четыре строчки можно закомментить

			char debug[64];
			snprintf(debug, sizeof(debug), "Sample = %lu\r\n", frequenciesForCurrentSensor[capture_count]);
 8000604:	4b5f      	ldr	r3, [pc, #380]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a5f      	ldr	r2, [pc, #380]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800060a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060e:	f107 0008 	add.w	r0, r7, #8
 8000612:	4a5e      	ldr	r2, [pc, #376]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000614:	2140      	movs	r1, #64	@ 0x40
 8000616:	f002 fa93 	bl	8002b40 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fd94 	bl	800014c <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f107 0108 	add.w	r1, r7, #8
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	4857      	ldr	r0, [pc, #348]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000632:	f002 f8b1 	bl	8002798 <HAL_UART_Transmit>
			//////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8000636:	4b51      	ldr	r3, [pc, #324]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 800063e:	4b50      	ldr	r3, [pc, #320]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	@ 0x24
			capture_count++;
 8000646:	4b4f      	ldr	r3, [pc, #316]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	4a4d      	ldr	r2, [pc, #308]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800064e:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000650:	4849      	ldr	r0, [pc, #292]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000652:	f001 fb55 	bl	8001d00 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8000656:	4849      	ldr	r0, [pc, #292]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000658:	f001 fae2 	bl	8001c20 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 800065c:	4848      	ldr	r0, [pc, #288]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800065e:	f001 fadf 	bl	8001c20 <HAL_TIM_Base_Start>
				isProccess = 0;
			}

		}
	}
}
 8000662:	e084      	b.n	800076e <HAL_TIM_PeriodElapsedCallback+0x1da>
			HAL_TIM_Base_Stop_IT(&htim1);                 // Остановить
 8000664:	4844      	ldr	r0, [pc, #272]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000666:	f001 fb9d 	bl	8001da4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim2);
 800066a:	4844      	ldr	r0, [pc, #272]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800066c:	f001 fb22 	bl	8001cb4 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000670:	4843      	ldr	r0, [pc, #268]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000672:	f001 fb1f 	bl	8001cb4 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 8000676:	4b41      	ldr	r3, [pc, #260]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 800067e:	4b40      	ldr	r3, [pc, #256]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
			for (int i = 1; i < MAX_SAMPLES; i++) {
 8000686:	2301      	movs	r3, #1
 8000688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800068a:	e027      	b.n	80006dc <HAL_TIM_PeriodElapsedCallback+0x148>
				uint32_t key = frequenciesForCurrentSensor[i];
 800068c:	4a3e      	ldr	r2, [pc, #248]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800068e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
				int j = i - 1;
 8000696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000698:	3b01      	subs	r3, #1
 800069a:	65bb      	str	r3, [r7, #88]	@ 0x58
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 800069c:	e00b      	b.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x122>
					frequenciesForCurrentSensor[j + 1] = frequenciesForCurrentSensor[j];
 800069e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006a0:	3301      	adds	r3, #1
 80006a2:	4939      	ldr	r1, [pc, #228]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80006a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80006a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006aa:	4937      	ldr	r1, [pc, #220]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80006ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					j--;
 80006b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006b2:	3b01      	subs	r3, #1
 80006b4:	65bb      	str	r3, [r7, #88]	@ 0x58
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 80006b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db06      	blt.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x136>
 80006bc:	4a32      	ldr	r2, [pc, #200]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80006be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3e9      	bcc.n	800069e <HAL_TIM_PeriodElapsedCallback+0x10a>
				frequenciesForCurrentSensor[j + 1] = key;
 80006ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006cc:	3301      	adds	r3, #1
 80006ce:	492e      	ldr	r1, [pc, #184]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80006d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 1; i < MAX_SAMPLES; i++) {
 80006d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006d8:	3301      	adds	r3, #1
 80006da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80006dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	ddd4      	ble.n	800068c <HAL_TIM_PeriodElapsedCallback+0xf8>
			uint32_t frequency_median = frequenciesForCurrentSensor[MAX_SAMPLES / 2];
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	657b      	str	r3, [r7, #84]	@ 0x54
			frequenciesResults[currentSensor] = frequency_median;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80006f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			capture_count = 0;
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
			currentSensor++;
 80006fe:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	3301      	adds	r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800070a:	701a      	strb	r2, [r3, #0]
			if(currentSensor < NUMBER_OF_SENSORS){
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b07      	cmp	r3, #7
 8000714:	d80f      	bhi.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x1a2>
				SelectMuxChannel(currentSensor);
 8000716:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f89b 	bl	8000858 <SelectMuxChannel>
				HAL_TIM_Base_Start_IT(&htim1);
 8000722:	4815      	ldr	r0, [pc, #84]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000724:	f001 faec 	bl	8001d00 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start(&htim2);
 8000728:	4814      	ldr	r0, [pc, #80]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800072a:	f001 fa79 	bl	8001c20 <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start(&htim3);
 800072e:	4814      	ldr	r0, [pc, #80]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000730:	f001 fa76 	bl	8001c20 <HAL_TIM_Base_Start>
}
 8000734:	e01b      	b.n	800076e <HAL_TIM_PeriodElapsedCallback+0x1da>
				PrintSensorFrequencies();
 8000736:	f000 f923 	bl	8000980 <PrintSensorFrequencies>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	210f      	movs	r1, #15
 800073e:	4817      	ldr	r0, [pc, #92]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000740:	f000 fdde 	bl	8001300 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800074a:	4814      	ldr	r0, [pc, #80]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800074c:	f000 fdd8 	bl	8001300 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000756:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000758:	f000 fdd2 	bl	8001300 <HAL_GPIO_WritePin>
			    capture_count = 0;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
			    currentSensor = 0;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
				isProccess = 0;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	3760      	adds	r7, #96	@ 0x60
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000078 	.word	0x20000078
 800077c:	200000c0 	.word	0x200000c0
 8000780:	20000108 	.word	0x20000108
 8000784:	200001c8 	.word	0x200001c8
 8000788:	2000019c 	.word	0x2000019c
 800078c:	080034e0 	.word	0x080034e0
 8000790:	20000150 	.word	0x20000150
 8000794:	200001d0 	.word	0x200001d0
 8000798:	200001d4 	.word	0x200001d4
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	40010800 	.word	0x40010800
 80007a4:	20000198 	.word	0x20000198

080007a8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	@ 0x50
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 80007b2:	f000 fb09 	bl	8000dc8 <HAL_GetTick>
 80007b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (now - lastInterruptTime < 200) return;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x90>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80007c2:	d933      	bls.n	800082c <HAL_GPIO_EXTI_Callback+0x84>
	lastInterruptTime = now;
 80007c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x90>)
 80007c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007c8:	6013      	str	r3, [r2, #0]
	if(isProccess) return;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <HAL_GPIO_EXTI_Callback+0x94>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d12d      	bne.n	8000830 <HAL_GPIO_EXTI_Callback+0x88>

  if (GPIO_Pin == GPIO_PIN_1 && !isProccess){
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d12b      	bne.n	8000832 <HAL_GPIO_EXTI_Callback+0x8a>
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <HAL_GPIO_EXTI_Callback+0x94>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d126      	bne.n	8000832 <HAL_GPIO_EXTI_Callback+0x8a>
		isProccess = 1;
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <HAL_GPIO_EXTI_Callback+0x94>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
	    char buffer[64]; // Буфер для формирования строки
	    int len = snprintf(buffer, sizeof(buffer), "Counter is started\r\n");
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x98>)
 80007f0:	2140      	movs	r1, #64	@ 0x40
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f9a4 	bl	8002b40 <sniprintf>
 80007f8:	64b8      	str	r0, [r7, #72]	@ 0x48
	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80007fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	f107 0108 	add.w	r1, r7, #8
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	480f      	ldr	r0, [pc, #60]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000808:	f001 ffc6 	bl	8002798 <HAL_UART_Transmit>
		SelectMuxChannel(currentSensor);
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <HAL_GPIO_EXTI_Callback+0xa0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f820 	bl	8000858 <SelectMuxChannel>

		HAL_TIM_Base_Start_IT(&htim1);
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <HAL_GPIO_EXTI_Callback+0xa4>)
 800081a:	f001 fa71 	bl	8001d00 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim2);
 800081e:	480c      	ldr	r0, [pc, #48]	@ (8000850 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000820:	f001 f9fe 	bl	8001c20 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xac>)
 8000826:	f001 f9fb 	bl	8001c20 <HAL_TIM_Base_Start>
 800082a:	e002      	b.n	8000832 <HAL_GPIO_EXTI_Callback+0x8a>
	if (now - lastInterruptTime < 200) return;
 800082c:	bf00      	nop
 800082e:	e000      	b.n	8000832 <HAL_GPIO_EXTI_Callback+0x8a>
	if(isProccess) return;
 8000830:	bf00      	nop
  }
}
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001cc 	.word	0x200001cc
 800083c:	20000198 	.word	0x20000198
 8000840:	080034f0 	.word	0x080034f0
 8000844:	20000150 	.word	0x20000150
 8000848:	200001d0 	.word	0x200001d0
 800084c:	20000078 	.word	0x20000078
 8000850:	200000c0 	.word	0x200000c0
 8000854:	20000108 	.word	0x20000108

08000858 <SelectMuxChannel>:


void SelectMuxChannel(uint8_t channel) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
    // 1. Отключаем все датчики (опционально, если нужно строгое управление)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000868:	4842      	ldr	r0, [pc, #264]	@ (8000974 <SelectMuxChannel+0x11c>)
 800086a:	f000 fd49 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000874:	4840      	ldr	r0, [pc, #256]	@ (8000978 <SelectMuxChannel+0x120>)
 8000876:	f000 fd43 	bl	8001300 <HAL_GPIO_WritePin>

    // 2. Устанавливаем канал мультиплексора
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, muxChannels[channel].s0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	493f      	ldr	r1, [pc, #252]	@ (800097c <SelectMuxChannel+0x124>)
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	4837      	ldr	r0, [pc, #220]	@ (8000978 <SelectMuxChannel+0x120>)
 800089a:	f000 fd31 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, muxChannels[channel].s1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	4936      	ldr	r1, [pc, #216]	@ (800097c <SelectMuxChannel+0x124>)
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	440b      	add	r3, r1
 80008ac:	3301      	adds	r3, #1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	482e      	ldr	r0, [pc, #184]	@ (8000978 <SelectMuxChannel+0x120>)
 80008c0:	f000 fd1e 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, muxChannels[channel].s2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	492d      	ldr	r1, [pc, #180]	@ (800097c <SelectMuxChannel+0x124>)
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	3302      	adds	r3, #2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	2120      	movs	r1, #32
 80008e4:	4824      	ldr	r0, [pc, #144]	@ (8000978 <SelectMuxChannel+0x120>)
 80008e6:	f000 fd0b 	bl	8001300 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, muxChannels[channel].s3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	4923      	ldr	r1, [pc, #140]	@ (800097c <SelectMuxChannel+0x124>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	440b      	add	r3, r1
 80008f8:	3303      	adds	r3, #3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	461a      	mov	r2, r3
 8000908:	2110      	movs	r1, #16
 800090a:	481b      	ldr	r0, [pc, #108]	@ (8000978 <SelectMuxChannel+0x120>)
 800090c:	f000 fcf8 	bl	8001300 <HAL_GPIO_WritePin>

    // 3. Включаем питание датчика, если указаны порт и пин
    if (muxChannels[channel].power_port != NULL) {
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	491a      	ldr	r1, [pc, #104]	@ (800097c <SelectMuxChannel+0x124>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3304      	adds	r3, #4
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d015      	beq.n	8000952 <SelectMuxChannel+0xfa>
        HAL_GPIO_WritePin(muxChannels[channel].power_port, muxChannels[channel].power_pin, GPIO_PIN_SET);
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	4914      	ldr	r1, [pc, #80]	@ (800097c <SelectMuxChannel+0x124>)
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	440b      	add	r3, r1
 8000934:	3304      	adds	r3, #4
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	4910      	ldr	r1, [pc, #64]	@ (800097c <SelectMuxChannel+0x124>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	440b      	add	r3, r1
 8000946:	3308      	adds	r3, #8
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	f000 fcd7 	bl	8001300 <HAL_GPIO_WritePin>
    }

    // 4. Задержка для стабилизации
    for (volatile int i = 0; i < 10000; i++);
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e002      	b.n	800095e <SelectMuxChannel+0x106>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000964:	4293      	cmp	r3, r2
 8000966:	ddf7      	ble.n	8000958 <SelectMuxChannel+0x100>
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40010800 	.word	0x40010800
 800097c:	08003540 	.word	0x08003540

08000980 <PrintSensorFrequencies>:


void PrintSensorFrequencies() {
 8000980:	b580      	push	{r7, lr}
 8000982:	b096      	sub	sp, #88	@ 0x58
 8000984:	af02      	add	r7, sp, #8
    char buffer[64]; // Буфер для формирования строки

    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800098a:	e018      	b.n	80009be <PrintSensorFrequencies+0x3e>
        // Форматируем строку для каждого датчика
        int len = snprintf(buffer, sizeof(buffer), "Датчик %d: %lu\r\n",
 800098c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800098e:	1c5a      	adds	r2, r3, #1
                          i + 1, frequenciesResults[i]);
 8000990:	4916      	ldr	r1, [pc, #88]	@ (80009ec <PrintSensorFrequencies+0x6c>)
 8000992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        int len = snprintf(buffer, sizeof(buffer), "Датчик %d: %lu\r\n",
 8000998:	1d38      	adds	r0, r7, #4
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4613      	mov	r3, r2
 800099e:	4a14      	ldr	r2, [pc, #80]	@ (80009f0 <PrintSensorFrequencies+0x70>)
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	f002 f8cd 	bl	8002b40 <sniprintf>
 80009a6:	6478      	str	r0, [r7, #68]	@ 0x44

        // Отправляем в UART
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80009a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	1d39      	adds	r1, r7, #4
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	4810      	ldr	r0, [pc, #64]	@ (80009f4 <PrintSensorFrequencies+0x74>)
 80009b4:	f001 fef0 	bl	8002798 <HAL_UART_Transmit>
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 80009b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009ba:	3301      	adds	r3, #1
 80009bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80009be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009c0:	2b07      	cmp	r3, #7
 80009c2:	dde3      	ble.n	800098c <PrintSensorFrequencies+0xc>
    }

    int len = snprintf(buffer, sizeof(buffer), "-------------------------\r\n\r\n");
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <PrintSensorFrequencies+0x78>)
 80009c8:	2140      	movs	r1, #64	@ 0x40
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f8b8 	bl	8002b40 <sniprintf>
 80009d0:	64b8      	str	r0, [r7, #72]	@ 0x48
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80009d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	1d39      	adds	r1, r7, #4
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <PrintSensorFrequencies+0x74>)
 80009de:	f001 fedb 	bl	8002798 <HAL_UART_Transmit>
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	@ 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001d4 	.word	0x200001d4
 80009f0:	08003508 	.word	0x08003508
 80009f4:	20000150 	.word	0x20000150
 80009f8:	08003520 	.word	0x08003520

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <HAL_MspInit+0x5c>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <HAL_MspInit+0x5c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_MspInit+0x5c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <HAL_MspInit+0x5c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <HAL_MspInit+0x5c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_MspInit+0x5c>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_MspInit+0x60>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_MspInit+0x60>)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010000 	.word	0x40010000

08000a6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a2b      	ldr	r2, [pc, #172]	@ (8000b34 <HAL_TIM_Base_MspInit+0xc8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d114      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a29      	ldr	r2, [pc, #164]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000a92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2019      	movs	r0, #25
 8000aaa:	f000 fa6e 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fa87 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ab4:	e03a      	b.n	8000b2c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000abe:	d124      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	61d3      	str	r3, [r2, #28]
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a16      	ldr	r2, [pc, #88]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	@ (8000b3c <HAL_TIM_Base_MspInit+0xd0>)
 8000b04:	f000 fa78 	bl	8000ff8 <HAL_GPIO_Init>
}
 8000b08:	e010      	b.n	8000b2c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <HAL_TIM_Base_MspInit+0xd4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d10b      	bne.n	8000b2c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	61d3      	str	r3, [r2, #28]
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_TIM_Base_MspInit+0xcc>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40012c00 	.word	0x40012c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40000400 	.word	0x40000400

08000b44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d12f      	bne.n	8000bc4 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6e:	61d3      	str	r3, [r2, #28]
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a13      	ldr	r2, [pc, #76]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b94:	2304      	movs	r3, #4
 8000b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <HAL_UART_MspInit+0x90>)
 8000ba8:	f000 fa26 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bac:	2308      	movs	r3, #8
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <HAL_UART_MspInit+0x90>)
 8000bc0:	f000 fa1a 	bl	8000ff8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8bc 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000c34:	2002      	movs	r0, #2
 8000c36:	f000 fb7b 	bl	8001330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//    char msg[64];
//    int len = snprintf(msg, sizeof(msg), "РАБОТАЕТ!!!");
//    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM1_UP_IRQHandler+0x10>)
 8000c46:	f001 f934 	bl	8001eb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000078 	.word	0x20000078

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f001 ff9a 	bl	8002bbc <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005000 	.word	0x20005000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200001f4 	.word	0x200001f4
 8000cbc:	20000348 	.word	0x20000348

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff fff8 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd2:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ce8:	4c09      	ldr	r4, [pc, #36]	@ (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f001 ff67 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fa2f 	bl	800015c <main>
  bx lr
 8000cfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d08:	08003670 	.word	0x08003670
  ldr r2, =_sbss
 8000d0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d10:	20000344 	.word	0x20000344

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f923 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f000 f808 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fe68 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x54>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f93b 	bl	8000fde <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00e      	b.n	8000d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d80a      	bhi.n	8000d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 f903 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <HAL_InitTick+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_IncTick+0x1c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001f8 	.word	0x200001f8

08000dc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <HAL_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	200001f8 	.word	0x200001f8

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4906      	ldr	r1, [pc, #24]	@ (8000e74 <__NVIC_EnableIRQ+0x34>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	@ (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff90 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff2d 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff42 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff35 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa2 	bl	8000f30 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b08b      	sub	sp, #44	@ 0x2c
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	e169      	b.n	80012e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800100c:	2201      	movs	r2, #1
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8158 	bne.w	80012da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a9a      	ldr	r2, [pc, #616]	@ (8001298 <HAL_GPIO_Init+0x2a0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d05e      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001034:	4a98      	ldr	r2, [pc, #608]	@ (8001298 <HAL_GPIO_Init+0x2a0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d875      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800103a:	4a98      	ldr	r2, [pc, #608]	@ (800129c <HAL_GPIO_Init+0x2a4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d058      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001040:	4a96      	ldr	r2, [pc, #600]	@ (800129c <HAL_GPIO_Init+0x2a4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d86f      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001046:	4a96      	ldr	r2, [pc, #600]	@ (80012a0 <HAL_GPIO_Init+0x2a8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d052      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 800104c:	4a94      	ldr	r2, [pc, #592]	@ (80012a0 <HAL_GPIO_Init+0x2a8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d869      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001052:	4a94      	ldr	r2, [pc, #592]	@ (80012a4 <HAL_GPIO_Init+0x2ac>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d04c      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001058:	4a92      	ldr	r2, [pc, #584]	@ (80012a4 <HAL_GPIO_Init+0x2ac>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d863      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800105e:	4a92      	ldr	r2, [pc, #584]	@ (80012a8 <HAL_GPIO_Init+0x2b0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d046      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
 8001064:	4a90      	ldr	r2, [pc, #576]	@ (80012a8 <HAL_GPIO_Init+0x2b0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d85d      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 800106a:	2b12      	cmp	r3, #18
 800106c:	d82a      	bhi.n	80010c4 <HAL_GPIO_Init+0xcc>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d859      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001072:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <HAL_GPIO_Init+0x80>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	080010f3 	.word	0x080010f3
 800107c:	080010cd 	.word	0x080010cd
 8001080:	080010df 	.word	0x080010df
 8001084:	08001121 	.word	0x08001121
 8001088:	08001127 	.word	0x08001127
 800108c:	08001127 	.word	0x08001127
 8001090:	08001127 	.word	0x08001127
 8001094:	08001127 	.word	0x08001127
 8001098:	08001127 	.word	0x08001127
 800109c:	08001127 	.word	0x08001127
 80010a0:	08001127 	.word	0x08001127
 80010a4:	08001127 	.word	0x08001127
 80010a8:	08001127 	.word	0x08001127
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001127 	.word	0x08001127
 80010b4:	08001127 	.word	0x08001127
 80010b8:	08001127 	.word	0x08001127
 80010bc:	080010d5 	.word	0x080010d5
 80010c0:	080010e9 	.word	0x080010e9
 80010c4:	4a79      	ldr	r2, [pc, #484]	@ (80012ac <HAL_GPIO_Init+0x2b4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ca:	e02c      	b.n	8001126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	623b      	str	r3, [r7, #32]
          break;
 80010d2:	e029      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e024      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	3308      	adds	r3, #8
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e01f      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	330c      	adds	r3, #12
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e01a      	b.n	8001128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fa:	2304      	movs	r3, #4
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e013      	b.n	8001128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001108:	2308      	movs	r3, #8
 800110a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	611a      	str	r2, [r3, #16]
          break;
 8001112:	e009      	b.n	8001128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	615a      	str	r2, [r3, #20]
          break;
 800111e:	e003      	b.n	8001128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x130>
          break;
 8001126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2bff      	cmp	r3, #255	@ 0xff
 800112c:	d801      	bhi.n	8001132 <HAL_GPIO_Init+0x13a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	e001      	b.n	8001136 <HAL_GPIO_Init+0x13e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3304      	adds	r3, #4
 8001136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	@ 0xff
 800113c:	d802      	bhi.n	8001144 <HAL_GPIO_Init+0x14c>
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x152>
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	3b08      	subs	r3, #8
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	210f      	movs	r1, #15
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	401a      	ands	r2, r3
 800115c:	6a39      	ldr	r1, [r7, #32]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80b1 	beq.w	80012da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001178:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <HAL_GPIO_Init+0x2b8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <HAL_GPIO_Init+0x2b8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b4a      	ldr	r3, [pc, #296]	@ (80012b0 <HAL_GPIO_Init+0x2b8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001190:	4a48      	ldr	r2, [pc, #288]	@ (80012b4 <HAL_GPIO_Init+0x2bc>)
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a40      	ldr	r2, [pc, #256]	@ (80012b8 <HAL_GPIO_Init+0x2c0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d013      	beq.n	80011e4 <HAL_GPIO_Init+0x1ec>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3f      	ldr	r2, [pc, #252]	@ (80012bc <HAL_GPIO_Init+0x2c4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1e8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <HAL_GPIO_Init+0x2c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <HAL_GPIO_Init+0x2cc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1e0>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011d8:	2304      	movs	r3, #4
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x1ee>
 80011e4:	2300      	movs	r3, #0
 80011e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f6:	492f      	ldr	r1, [pc, #188]	@ (80012b4 <HAL_GPIO_Init+0x2bc>)
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001210:	4b2d      	ldr	r3, [pc, #180]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	492c      	ldr	r1, [pc, #176]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	4928      	ldr	r1, [pc, #160]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001228:	4013      	ands	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	4922      	ldr	r1, [pc, #136]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	60cb      	str	r3, [r1, #12]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	491e      	ldr	r1, [pc, #120]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001250:	4013      	ands	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4918      	ldr	r1, [pc, #96]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800126e:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d021      	beq.n	80012cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	490e      	ldr	r1, [pc, #56]	@ (80012c8 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
 8001294:	e021      	b.n	80012da <HAL_GPIO_Init+0x2e2>
 8001296:	bf00      	nop
 8001298:	10320000 	.word	0x10320000
 800129c:	10310000 	.word	0x10310000
 80012a0:	10220000 	.word	0x10220000
 80012a4:	10210000 	.word	0x10210000
 80012a8:	10120000 	.word	0x10120000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40011400 	.word	0x40011400
 80012c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <HAL_GPIO_Init+0x304>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4909      	ldr	r1, [pc, #36]	@ (80012fc <HAL_GPIO_Init+0x304>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f47f ae8e 	bne.w	800100c <HAL_GPIO_Init+0x14>
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	372c      	adds	r7, #44	@ 0x2c
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fa2a 	bl	80007a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e272      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8087 	beq.w	800148e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001380:	4b92      	ldr	r3, [pc, #584]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b04      	cmp	r3, #4
 800138a:	d00c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800138c:	4b8f      	ldr	r3, [pc, #572]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d112      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
 8001398:	4b8c      	ldr	r3, [pc, #560]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a4:	d10b      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	4b89      	ldr	r3, [pc, #548]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d06c      	beq.n	800148c <HAL_RCC_OscConfig+0x12c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d168      	bne.n	800148c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e24c      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x76>
 80013c8:	4b80      	ldr	r3, [pc, #512]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a7f      	ldr	r2, [pc, #508]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e02e      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b7b      	ldr	r3, [pc, #492]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7a      	ldr	r2, [pc, #488]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b78      	ldr	r3, [pc, #480]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a77      	ldr	r2, [pc, #476]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0xbc>
 8001402:	4b72      	ldr	r3, [pc, #456]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a71      	ldr	r2, [pc, #452]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b6f      	ldr	r3, [pc, #444]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a6e      	ldr	r2, [pc, #440]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xd4>
 800141c:	4b6b      	ldr	r3, [pc, #428]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6a      	ldr	r2, [pc, #424]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a67      	ldr	r2, [pc, #412]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fcc4 	bl	8000dc8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fcc0 	bl	8000dc8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e200      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xe4>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcb0 	bl	8000dc8 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcac 	bl	8000dc8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1ec      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b53      	ldr	r3, [pc, #332]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x10c>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149a:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d11c      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d116      	bne.n	80014ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1c0      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d6:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4939      	ldr	r1, [pc, #228]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	e03a      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc65 	bl	8000dc8 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fc61 	bl	8000dc8 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1a1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4927      	ldr	r1, [pc, #156]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc44 	bl	8000dc8 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc40 	bl	8000dc8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e180      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03a      	beq.n	80015e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_RCC_OscConfig+0x274>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fc24 	bl	8000dc8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fc20 	bl	8000dc8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e160      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_RCC_OscConfig+0x26c>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 face 	bl	8001b44 <RCC_Delay>
 80015a8:	e01c      	b.n	80015e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_RCC_OscConfig+0x274>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fc0a 	bl	8000dc8 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	e00f      	b.n	80015d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc06 	bl	8000dc8 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d908      	bls.n	80015d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e146      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	42420000 	.word	0x42420000
 80015d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b92      	ldr	r3, [pc, #584]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e9      	bne.n	80015b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a6 	beq.w	800173e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a87      	ldr	r2, [pc, #540]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b85      	ldr	r3, [pc, #532]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b82      	ldr	r3, [pc, #520]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7e      	ldr	r2, [pc, #504]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fbc7 	bl	8000dc8 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fbc3 	bl	8000dc8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	@ 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e103      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b75      	ldr	r3, [pc, #468]	@ (8001828 <HAL_RCC_OscConfig+0x4c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x312>
 8001664:	4b6f      	ldr	r3, [pc, #444]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a6e      	ldr	r2, [pc, #440]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x334>
 800167a:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a69      	ldr	r2, [pc, #420]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a66      	ldr	r2, [pc, #408]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x356>
 800169c:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a60      	ldr	r2, [pc, #384]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x36e>
 80016b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb77 	bl	8000dc8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb73 	bl	8000dc8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0b1      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x37e>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb61 	bl	8000dc8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb5d 	bl	8000dc8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e09b      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b3c      	ldr	r3, [pc, #240]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a3b      	ldr	r2, [pc, #236]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8087 	beq.w	8001856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d061      	beq.n	8001818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d146      	bne.n	80017ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <HAL_RCC_OscConfig+0x4cc>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fb31 	bl	8000dc8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fb2d 	bl	8000dc8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e06d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001790:	d108      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4921      	ldr	r1, [pc, #132]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a19      	ldr	r1, [r3, #32]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	430b      	orrs	r3, r1
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb01 	bl	8000dc8 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fafd 	bl	8000dc8 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e03d      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x46a>
 80017e8:	e035      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x4cc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff faea 	bl	8000dc8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fae6 	bl	8000dc8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e026      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x498>
 8001816:	e01e      	b.n	8001856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e019      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
 8001824:	40021000 	.word	0x40021000
 8001828:	40007000 	.word	0x40007000
 800182c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_RCC_OscConfig+0x500>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa38 	bl	8000dc8 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa34 	bl	8000dc8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	@ (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f996 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08003600 	.word	0x08003600
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x30>
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x36>
 8001a66:	e027      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6a:	613b      	str	r3, [r7, #16]
      break;
 8001a6c:	e027      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0c5b      	lsrs	r3, r3, #17
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9a:	fb03 f202 	mul.w	r2, r3, r2
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e004      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
      break;
 8001ab6:	e002      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	613b      	str	r3, [r7, #16]
      break;
 8001abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001abe:	693b      	ldr	r3, [r7, #16]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	08003618 	.word	0x08003618
 8001ad8:	08003628 	.word	0x08003628
 8001adc:	003d0900 	.word	0x003d0900

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	@ (8001af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af8:	f7ff fff2 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	@ (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08003610 	.word	0x08003610

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0adb      	lsrs	r3, r3, #11
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08003610 	.word	0x08003610

08001b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <RCC_Delay+0x34>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <RCC_Delay+0x38>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b60:	bf00      	nop
  }
  while (Delay --);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <RCC_Delay+0x1c>
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e041      	b.n	8001c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe ff60 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 fb94 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_TIM_Base_Start+0x88>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_TIM_Base_Start+0x48>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c52:	d009      	beq.n	8001c68 <HAL_TIM_Base_Start+0x48>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <HAL_TIM_Base_Start+0x8c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_TIM_Base_Start+0x48>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <HAL_TIM_Base_Start+0x90>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d111      	bne.n	8001c8c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d010      	beq.n	8001c9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	e007      	b.n	8001c9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800

08001cb4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
 8001cc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <HAL_TIM_Base_Stop+0x38>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_TIM_Base_Stop+0x38>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d001      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e03a      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a18      	ldr	r2, [pc, #96]	@ (8001d98 <HAL_TIM_Base_Start_IT+0x98>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00e      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x58>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d42:	d009      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x58>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_TIM_Base_Start_IT+0x9c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x58>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a13      	ldr	r2, [pc, #76]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d010      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7a:	e007      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800

08001da4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10f      	bne.n	8001dec <HAL_TIM_Base_Stop_IT+0x48>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_Base_Stop_IT+0x48>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e041      	b.n	8001e98 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f839 	bl	8001ea0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f000 fa53 	bl	80022ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01b      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0202 	mvn.w	r2, #2
 8001ee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f9da 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 8001f02:	e005      	b.n	8001f10 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f9cd 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f9dc 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01b      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0204 	mvn.w	r2, #4
 8001f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f9b4 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 8001f4e:	e005      	b.n	8001f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9a7 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f9b6 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01b      	beq.n	8001fae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f06f 0208 	mvn.w	r2, #8
 8001f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2204      	movs	r2, #4
 8001f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f98e 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 8001f9a:	e005      	b.n	8001fa8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f981 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f990 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01b      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0210 	mvn.w	r2, #16
 8001fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f968 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 8001fe6:	e005      	b.n	8001ff4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f95b 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f96a 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00c      	beq.n	800201e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0201 	mvn.w	r2, #1
 8002016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe fabb 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00c      	beq.n	8002042 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800203a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fb52 	bl	80026e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00c      	beq.n	8002066 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800205e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f93a 	bl	80022da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0220 	mvn.w	r2, #32
 8002082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fb25 	bl	80026d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_ConfigClockSource+0x1c>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e0b4      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x186>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020d4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e6:	d03e      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0xd4>
 80020e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ec:	f200 8087 	bhi.w	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020f4:	f000 8086 	beq.w	8002204 <HAL_TIM_ConfigClockSource+0x172>
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020fc:	d87f      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 80020fe:	2b70      	cmp	r3, #112	@ 0x70
 8002100:	d01a      	beq.n	8002138 <HAL_TIM_ConfigClockSource+0xa6>
 8002102:	2b70      	cmp	r3, #112	@ 0x70
 8002104:	d87b      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 8002106:	2b60      	cmp	r3, #96	@ 0x60
 8002108:	d050      	beq.n	80021ac <HAL_TIM_ConfigClockSource+0x11a>
 800210a:	2b60      	cmp	r3, #96	@ 0x60
 800210c:	d877      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 800210e:	2b50      	cmp	r3, #80	@ 0x50
 8002110:	d03c      	beq.n	800218c <HAL_TIM_ConfigClockSource+0xfa>
 8002112:	2b50      	cmp	r3, #80	@ 0x50
 8002114:	d873      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 8002116:	2b40      	cmp	r3, #64	@ 0x40
 8002118:	d058      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x13a>
 800211a:	2b40      	cmp	r3, #64	@ 0x40
 800211c:	d86f      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 800211e:	2b30      	cmp	r3, #48	@ 0x30
 8002120:	d064      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0x15a>
 8002122:	2b30      	cmp	r3, #48	@ 0x30
 8002124:	d86b      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 8002126:	2b20      	cmp	r3, #32
 8002128:	d060      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0x15a>
 800212a:	2b20      	cmp	r3, #32
 800212c:	d867      	bhi.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d05c      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0x15a>
 8002132:	2b10      	cmp	r3, #16
 8002134:	d05a      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0x15a>
 8002136:	e062      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002148:	f000 fa46 	bl	80025d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800215a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	609a      	str	r2, [r3, #8]
      break;
 8002164:	e04f      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002176:	f000 fa2f 	bl	80025d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002188:	609a      	str	r2, [r3, #8]
      break;
 800218a:	e03c      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002198:	461a      	mov	r2, r3
 800219a:	f000 f9a6 	bl	80024ea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2150      	movs	r1, #80	@ 0x50
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f9fd 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021aa:	e02c      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b8:	461a      	mov	r2, r3
 80021ba:	f000 f9c4 	bl	8002546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2160      	movs	r1, #96	@ 0x60
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 f9ed 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021ca:	e01c      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d8:	461a      	mov	r2, r3
 80021da:	f000 f986 	bl	80024ea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f9dd 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021ea:	e00c      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f000 f9d4 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 80021fc:	e003      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      break;
 8002202:	e000      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002204:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002234:	2302      	movs	r3, #2
 8002236:	e031      	b.n	800229c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8bc 	bl	80023c8 <TIM_SlaveTimer_SetConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e018      	b.n	800229c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002278:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002288:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a2f      	ldr	r2, [pc, #188]	@ (80023bc <TIM_Base_SetConfig+0xd0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x30>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a2c      	ldr	r2, [pc, #176]	@ (80023c0 <TIM_Base_SetConfig+0xd4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x30>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <TIM_Base_SetConfig+0xd8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a22      	ldr	r2, [pc, #136]	@ (80023bc <TIM_Base_SetConfig+0xd0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00b      	beq.n	800234e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d007      	beq.n	800234e <TIM_Base_SetConfig+0x62>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1f      	ldr	r2, [pc, #124]	@ (80023c0 <TIM_Base_SetConfig+0xd4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_Base_SetConfig+0x62>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1e      	ldr	r2, [pc, #120]	@ (80023c4 <TIM_Base_SetConfig+0xd8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d108      	bne.n	8002360 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <TIM_Base_SetConfig+0xd0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d103      	bne.n	8002394 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	611a      	str	r2, [r3, #16]
  }
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800

080023c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b70      	cmp	r3, #112	@ 0x70
 8002410:	d01a      	beq.n	8002448 <TIM_SlaveTimer_SetConfig+0x80>
 8002412:	2b70      	cmp	r3, #112	@ 0x70
 8002414:	d860      	bhi.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
 8002416:	2b60      	cmp	r3, #96	@ 0x60
 8002418:	d054      	beq.n	80024c4 <TIM_SlaveTimer_SetConfig+0xfc>
 800241a:	2b60      	cmp	r3, #96	@ 0x60
 800241c:	d85c      	bhi.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
 800241e:	2b50      	cmp	r3, #80	@ 0x50
 8002420:	d046      	beq.n	80024b0 <TIM_SlaveTimer_SetConfig+0xe8>
 8002422:	2b50      	cmp	r3, #80	@ 0x50
 8002424:	d858      	bhi.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
 8002426:	2b40      	cmp	r3, #64	@ 0x40
 8002428:	d019      	beq.n	800245e <TIM_SlaveTimer_SetConfig+0x96>
 800242a:	2b40      	cmp	r3, #64	@ 0x40
 800242c:	d854      	bhi.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
 800242e:	2b30      	cmp	r3, #48	@ 0x30
 8002430:	d055      	beq.n	80024de <TIM_SlaveTimer_SetConfig+0x116>
 8002432:	2b30      	cmp	r3, #48	@ 0x30
 8002434:	d850      	bhi.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
 8002436:	2b20      	cmp	r3, #32
 8002438:	d051      	beq.n	80024de <TIM_SlaveTimer_SetConfig+0x116>
 800243a:	2b20      	cmp	r3, #32
 800243c:	d84c      	bhi.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d04d      	beq.n	80024de <TIM_SlaveTimer_SetConfig+0x116>
 8002442:	2b10      	cmp	r3, #16
 8002444:	d04b      	beq.n	80024de <TIM_SlaveTimer_SetConfig+0x116>
 8002446:	e047      	b.n	80024d8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002458:	f000 f8be 	bl	80025d8 <TIM_ETR_SetConfig>
      break;
 800245c:	e040      	b.n	80024e0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d101      	bne.n	800246a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e03b      	b.n	80024e2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002490:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	4313      	orrs	r3, r2
 800249c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	621a      	str	r2, [r3, #32]
      break;
 80024ae:	e017      	b.n	80024e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024bc:	461a      	mov	r2, r3
 80024be:	f000 f814 	bl	80024ea <TIM_TI1_ConfigInputStage>
      break;
 80024c2:	e00d      	b.n	80024e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d0:	461a      	mov	r2, r3
 80024d2:	f000 f838 	bl	8002546 <TIM_TI2_ConfigInputStage>
      break;
 80024d6:	e003      	b.n	80024e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	75fb      	strb	r3, [r7, #23]
      break;
 80024dc:	e000      	b.n	80024e0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80024de:	bf00      	nop
  }

  return status;
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f023 0201 	bic.w	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 030a 	bic.w	r3, r3, #10
 8002526:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	621a      	str	r2, [r3, #32]
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002546:	b480      	push	{r7}
 8002548:	b087      	sub	sp, #28
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f023 0210 	bic.w	r2, r3, #16
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	031b      	lsls	r3, r3, #12
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f043 0307 	orr.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	609a      	str	r2, [r3, #8]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	609a      	str	r2, [r3, #8]
}
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800262c:	2302      	movs	r3, #2
 800262e:	e046      	b.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a16      	ldr	r2, [pc, #88]	@ (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267c:	d009      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a12      	ldr	r2, [pc, #72]	@ (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10c      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800

080026d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e042      	b.n	8002790 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fa10 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	@ 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f971 	bl	8002a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d175      	bne.n	80028a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Transmit+0x2c>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e06e      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	@ 0x21
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe faf7 	bl	8000dc8 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f0:	d108      	bne.n	8002804 <HAL_UART_Transmit+0x6c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e003      	b.n	800280c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800280c:	e02e      	b.n	800286c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f848 	bl	80028ae <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e03a      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3302      	adds	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e007      	b.n	800285e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1cb      	bne.n	800280e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	2140      	movs	r1, #64	@ 0x40
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f814 	bl	80028ae <UART_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e006      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028be:	e03b      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d037      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7fe fa7e 	bl	8000dc8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <UART_WaitOnFlagUntilTimeout+0x30>
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e03a      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b80      	cmp	r3, #128	@ 0x80
 80028f4:	d020      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b40      	cmp	r3, #64	@ 0x40
 80028fa:	d01d      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d116      	bne.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f81d 	bl	8002960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2208      	movs	r2, #8
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e00f      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	429a      	cmp	r2, r3
 8002954:	d0b4      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b095      	sub	sp, #84	@ 0x54
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800297e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002988:	643a      	str	r2, [r7, #64]	@ 0x40
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800298e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e5      	bne.n	8002968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e5      	bne.n	800299c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d119      	bne.n	8002a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0310 	bic.w	r3, r3, #16
 80029ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029f8:	61ba      	str	r2, [r7, #24]
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	6979      	ldr	r1, [r7, #20]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	613b      	str	r3, [r7, #16]
   return(result);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e5      	bne.n	80029d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a1a:	bf00      	nop
 8002a1c:	3754      	adds	r7, #84	@ 0x54
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a5e:	f023 030c 	bic.w	r3, r3, #12
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2c      	ldr	r2, [pc, #176]	@ (8002b38 <UART_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a8c:	f7ff f846 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	e002      	b.n	8002a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a94:	f7ff f82e 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009a      	lsls	r2, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a22      	ldr	r2, [pc, #136]	@ (8002b3c <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	0119      	lsls	r1, r3, #4
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <UART_SetConfig+0x118>)
 8002ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2064      	movs	r0, #100	@ 0x64
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	@ 0x32
 8002ae4:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <UART_SetConfig+0x118>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af0:	4419      	add	r1, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b08:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <UART_SetConfig+0x118>)
 8002b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2064      	movs	r0, #100	@ 0x64
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	@ 0x32
 8002b1c:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <UART_SetConfig+0x118>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	51eb851f 	.word	0x51eb851f

08002b40 <sniprintf>:
 8002b40:	b40c      	push	{r2, r3}
 8002b42:	b530      	push	{r4, r5, lr}
 8002b44:	4b18      	ldr	r3, [pc, #96]	@ (8002ba8 <sniprintf+0x68>)
 8002b46:	1e0c      	subs	r4, r1, #0
 8002b48:	681d      	ldr	r5, [r3, #0]
 8002b4a:	b09d      	sub	sp, #116	@ 0x74
 8002b4c:	da08      	bge.n	8002b60 <sniprintf+0x20>
 8002b4e:	238b      	movs	r3, #139	@ 0x8b
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	b01d      	add	sp, #116	@ 0x74
 8002b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b5c:	b002      	add	sp, #8
 8002b5e:	4770      	bx	lr
 8002b60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002b6e:	bf0c      	ite	eq
 8002b70:	4623      	moveq	r3, r4
 8002b72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b76:	9304      	str	r3, [sp, #16]
 8002b78:	9307      	str	r3, [sp, #28]
 8002b7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b7e:	9002      	str	r0, [sp, #8]
 8002b80:	9006      	str	r0, [sp, #24]
 8002b82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b86:	4628      	mov	r0, r5
 8002b88:	ab21      	add	r3, sp, #132	@ 0x84
 8002b8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b8c:	a902      	add	r1, sp, #8
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	f000 f992 	bl	8002eb8 <_svfiprintf_r>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	bfbc      	itt	lt
 8002b98:	238b      	movlt	r3, #139	@ 0x8b
 8002b9a:	602b      	strlt	r3, [r5, #0]
 8002b9c:	2c00      	cmp	r4, #0
 8002b9e:	d0da      	beq.n	8002b56 <sniprintf+0x16>
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	9b02      	ldr	r3, [sp, #8]
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e7d6      	b.n	8002b56 <sniprintf+0x16>
 8002ba8:	2000000c 	.word	0x2000000c

08002bac <memset>:
 8002bac:	4603      	mov	r3, r0
 8002bae:	4402      	add	r2, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <__errno>:
 8002bbc:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__errno+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	2600      	movs	r6, #0
 8002bcc:	4d0c      	ldr	r5, [pc, #48]	@ (8002c00 <__libc_init_array+0x38>)
 8002bce:	4c0d      	ldr	r4, [pc, #52]	@ (8002c04 <__libc_init_array+0x3c>)
 8002bd0:	1b64      	subs	r4, r4, r5
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	f000 fc76 	bl	80034c8 <_init>
 8002bdc:	2600      	movs	r6, #0
 8002bde:	4d0a      	ldr	r5, [pc, #40]	@ (8002c08 <__libc_init_array+0x40>)
 8002be0:	4c0a      	ldr	r4, [pc, #40]	@ (8002c0c <__libc_init_array+0x44>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08003668 	.word	0x08003668
 8002c04:	08003668 	.word	0x08003668
 8002c08:	08003668 	.word	0x08003668
 8002c0c:	0800366c 	.word	0x0800366c

08002c10 <__retarget_lock_acquire_recursive>:
 8002c10:	4770      	bx	lr

08002c12 <__retarget_lock_release_recursive>:
 8002c12:	4770      	bx	lr

08002c14 <_free_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	4605      	mov	r5, r0
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	d040      	beq.n	8002c9e <_free_r+0x8a>
 8002c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c20:	1f0c      	subs	r4, r1, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bfb8      	it	lt
 8002c26:	18e4      	addlt	r4, r4, r3
 8002c28:	f000 f8de 	bl	8002de8 <__malloc_lock>
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca0 <_free_r+0x8c>)
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	b933      	cbnz	r3, 8002c40 <_free_r+0x2c>
 8002c32:	6063      	str	r3, [r4, #4]
 8002c34:	6014      	str	r4, [r2, #0]
 8002c36:	4628      	mov	r0, r5
 8002c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c3c:	f000 b8da 	b.w	8002df4 <__malloc_unlock>
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	d908      	bls.n	8002c56 <_free_r+0x42>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	1821      	adds	r1, r4, r0
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	bf01      	itttt	eq
 8002c4c:	6819      	ldreq	r1, [r3, #0]
 8002c4e:	685b      	ldreq	r3, [r3, #4]
 8002c50:	1809      	addeq	r1, r1, r0
 8002c52:	6021      	streq	r1, [r4, #0]
 8002c54:	e7ed      	b.n	8002c32 <_free_r+0x1e>
 8002c56:	461a      	mov	r2, r3
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b10b      	cbz	r3, 8002c60 <_free_r+0x4c>
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	d9fa      	bls.n	8002c56 <_free_r+0x42>
 8002c60:	6811      	ldr	r1, [r2, #0]
 8002c62:	1850      	adds	r0, r2, r1
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d10b      	bne.n	8002c80 <_free_r+0x6c>
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	4401      	add	r1, r0
 8002c6c:	1850      	adds	r0, r2, r1
 8002c6e:	4283      	cmp	r3, r0
 8002c70:	6011      	str	r1, [r2, #0]
 8002c72:	d1e0      	bne.n	8002c36 <_free_r+0x22>
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4408      	add	r0, r1
 8002c7a:	6010      	str	r0, [r2, #0]
 8002c7c:	6053      	str	r3, [r2, #4]
 8002c7e:	e7da      	b.n	8002c36 <_free_r+0x22>
 8002c80:	d902      	bls.n	8002c88 <_free_r+0x74>
 8002c82:	230c      	movs	r3, #12
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	e7d6      	b.n	8002c36 <_free_r+0x22>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	1821      	adds	r1, r4, r0
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	bf01      	itttt	eq
 8002c90:	6819      	ldreq	r1, [r3, #0]
 8002c92:	685b      	ldreq	r3, [r3, #4]
 8002c94:	1809      	addeq	r1, r1, r0
 8002c96:	6021      	streq	r1, [r4, #0]
 8002c98:	6063      	str	r3, [r4, #4]
 8002c9a:	6054      	str	r4, [r2, #4]
 8002c9c:	e7cb      	b.n	8002c36 <_free_r+0x22>
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	20000340 	.word	0x20000340

08002ca4 <sbrk_aligned>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8002ce4 <sbrk_aligned+0x40>)
 8002ca8:	460c      	mov	r4, r1
 8002caa:	6831      	ldr	r1, [r6, #0]
 8002cac:	4605      	mov	r5, r0
 8002cae:	b911      	cbnz	r1, 8002cb6 <sbrk_aligned+0x12>
 8002cb0:	f000 fba8 	bl	8003404 <_sbrk_r>
 8002cb4:	6030      	str	r0, [r6, #0]
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 fba3 	bl	8003404 <_sbrk_r>
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	d103      	bne.n	8002cca <sbrk_aligned+0x26>
 8002cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
 8002cca:	1cc4      	adds	r4, r0, #3
 8002ccc:	f024 0403 	bic.w	r4, r4, #3
 8002cd0:	42a0      	cmp	r0, r4
 8002cd2:	d0f8      	beq.n	8002cc6 <sbrk_aligned+0x22>
 8002cd4:	1a21      	subs	r1, r4, r0
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f000 fb94 	bl	8003404 <_sbrk_r>
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d1f2      	bne.n	8002cc6 <sbrk_aligned+0x22>
 8002ce0:	e7ef      	b.n	8002cc2 <sbrk_aligned+0x1e>
 8002ce2:	bf00      	nop
 8002ce4:	2000033c 	.word	0x2000033c

08002ce8 <_malloc_r>:
 8002ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cec:	1ccd      	adds	r5, r1, #3
 8002cee:	f025 0503 	bic.w	r5, r5, #3
 8002cf2:	3508      	adds	r5, #8
 8002cf4:	2d0c      	cmp	r5, #12
 8002cf6:	bf38      	it	cc
 8002cf8:	250c      	movcc	r5, #12
 8002cfa:	2d00      	cmp	r5, #0
 8002cfc:	4606      	mov	r6, r0
 8002cfe:	db01      	blt.n	8002d04 <_malloc_r+0x1c>
 8002d00:	42a9      	cmp	r1, r5
 8002d02:	d904      	bls.n	8002d0e <_malloc_r+0x26>
 8002d04:	230c      	movs	r3, #12
 8002d06:	6033      	str	r3, [r6, #0]
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002de4 <_malloc_r+0xfc>
 8002d12:	f000 f869 	bl	8002de8 <__malloc_lock>
 8002d16:	f8d8 3000 	ldr.w	r3, [r8]
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	bb44      	cbnz	r4, 8002d70 <_malloc_r+0x88>
 8002d1e:	4629      	mov	r1, r5
 8002d20:	4630      	mov	r0, r6
 8002d22:	f7ff ffbf 	bl	8002ca4 <sbrk_aligned>
 8002d26:	1c43      	adds	r3, r0, #1
 8002d28:	4604      	mov	r4, r0
 8002d2a:	d158      	bne.n	8002dde <_malloc_r+0xf6>
 8002d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8002d30:	4627      	mov	r7, r4
 8002d32:	2f00      	cmp	r7, #0
 8002d34:	d143      	bne.n	8002dbe <_malloc_r+0xd6>
 8002d36:	2c00      	cmp	r4, #0
 8002d38:	d04b      	beq.n	8002dd2 <_malloc_r+0xea>
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	4639      	mov	r1, r7
 8002d3e:	4630      	mov	r0, r6
 8002d40:	eb04 0903 	add.w	r9, r4, r3
 8002d44:	f000 fb5e 	bl	8003404 <_sbrk_r>
 8002d48:	4581      	cmp	r9, r0
 8002d4a:	d142      	bne.n	8002dd2 <_malloc_r+0xea>
 8002d4c:	6821      	ldr	r1, [r4, #0]
 8002d4e:	4630      	mov	r0, r6
 8002d50:	1a6d      	subs	r5, r5, r1
 8002d52:	4629      	mov	r1, r5
 8002d54:	f7ff ffa6 	bl	8002ca4 <sbrk_aligned>
 8002d58:	3001      	adds	r0, #1
 8002d5a:	d03a      	beq.n	8002dd2 <_malloc_r+0xea>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	442b      	add	r3, r5
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	f8d8 3000 	ldr.w	r3, [r8]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	bb62      	cbnz	r2, 8002dc4 <_malloc_r+0xdc>
 8002d6a:	f8c8 7000 	str.w	r7, [r8]
 8002d6e:	e00f      	b.n	8002d90 <_malloc_r+0xa8>
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	1b52      	subs	r2, r2, r5
 8002d74:	d420      	bmi.n	8002db8 <_malloc_r+0xd0>
 8002d76:	2a0b      	cmp	r2, #11
 8002d78:	d917      	bls.n	8002daa <_malloc_r+0xc2>
 8002d7a:	1961      	adds	r1, r4, r5
 8002d7c:	42a3      	cmp	r3, r4
 8002d7e:	6025      	str	r5, [r4, #0]
 8002d80:	bf18      	it	ne
 8002d82:	6059      	strne	r1, [r3, #4]
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	bf08      	it	eq
 8002d88:	f8c8 1000 	streq.w	r1, [r8]
 8002d8c:	5162      	str	r2, [r4, r5]
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	4630      	mov	r0, r6
 8002d92:	f000 f82f 	bl	8002df4 <__malloc_unlock>
 8002d96:	f104 000b 	add.w	r0, r4, #11
 8002d9a:	1d23      	adds	r3, r4, #4
 8002d9c:	f020 0007 	bic.w	r0, r0, #7
 8002da0:	1ac2      	subs	r2, r0, r3
 8002da2:	bf1c      	itt	ne
 8002da4:	1a1b      	subne	r3, r3, r0
 8002da6:	50a3      	strne	r3, [r4, r2]
 8002da8:	e7af      	b.n	8002d0a <_malloc_r+0x22>
 8002daa:	6862      	ldr	r2, [r4, #4]
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	bf0c      	ite	eq
 8002db0:	f8c8 2000 	streq.w	r2, [r8]
 8002db4:	605a      	strne	r2, [r3, #4]
 8002db6:	e7eb      	b.n	8002d90 <_malloc_r+0xa8>
 8002db8:	4623      	mov	r3, r4
 8002dba:	6864      	ldr	r4, [r4, #4]
 8002dbc:	e7ae      	b.n	8002d1c <_malloc_r+0x34>
 8002dbe:	463c      	mov	r4, r7
 8002dc0:	687f      	ldr	r7, [r7, #4]
 8002dc2:	e7b6      	b.n	8002d32 <_malloc_r+0x4a>
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d1fb      	bne.n	8002dc4 <_malloc_r+0xdc>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6053      	str	r3, [r2, #4]
 8002dd0:	e7de      	b.n	8002d90 <_malloc_r+0xa8>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	6033      	str	r3, [r6, #0]
 8002dd8:	f000 f80c 	bl	8002df4 <__malloc_unlock>
 8002ddc:	e794      	b.n	8002d08 <_malloc_r+0x20>
 8002dde:	6005      	str	r5, [r0, #0]
 8002de0:	e7d6      	b.n	8002d90 <_malloc_r+0xa8>
 8002de2:	bf00      	nop
 8002de4:	20000340 	.word	0x20000340

08002de8 <__malloc_lock>:
 8002de8:	4801      	ldr	r0, [pc, #4]	@ (8002df0 <__malloc_lock+0x8>)
 8002dea:	f7ff bf11 	b.w	8002c10 <__retarget_lock_acquire_recursive>
 8002dee:	bf00      	nop
 8002df0:	20000338 	.word	0x20000338

08002df4 <__malloc_unlock>:
 8002df4:	4801      	ldr	r0, [pc, #4]	@ (8002dfc <__malloc_unlock+0x8>)
 8002df6:	f7ff bf0c 	b.w	8002c12 <__retarget_lock_release_recursive>
 8002dfa:	bf00      	nop
 8002dfc:	20000338 	.word	0x20000338

08002e00 <__ssputs_r>:
 8002e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e04:	461f      	mov	r7, r3
 8002e06:	688e      	ldr	r6, [r1, #8]
 8002e08:	4682      	mov	sl, r0
 8002e0a:	42be      	cmp	r6, r7
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	4690      	mov	r8, r2
 8002e10:	680b      	ldr	r3, [r1, #0]
 8002e12:	d82d      	bhi.n	8002e70 <__ssputs_r+0x70>
 8002e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e1c:	d026      	beq.n	8002e6c <__ssputs_r+0x6c>
 8002e1e:	6965      	ldr	r5, [r4, #20]
 8002e20:	6909      	ldr	r1, [r1, #16]
 8002e22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e26:	eba3 0901 	sub.w	r9, r3, r1
 8002e2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e2e:	1c7b      	adds	r3, r7, #1
 8002e30:	444b      	add	r3, r9
 8002e32:	106d      	asrs	r5, r5, #1
 8002e34:	429d      	cmp	r5, r3
 8002e36:	bf38      	it	cc
 8002e38:	461d      	movcc	r5, r3
 8002e3a:	0553      	lsls	r3, r2, #21
 8002e3c:	d527      	bpl.n	8002e8e <__ssputs_r+0x8e>
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7ff ff52 	bl	8002ce8 <_malloc_r>
 8002e44:	4606      	mov	r6, r0
 8002e46:	b360      	cbz	r0, 8002ea2 <__ssputs_r+0xa2>
 8002e48:	464a      	mov	r2, r9
 8002e4a:	6921      	ldr	r1, [r4, #16]
 8002e4c:	f000 faf8 	bl	8003440 <memcpy>
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	6126      	str	r6, [r4, #16]
 8002e5e:	444e      	add	r6, r9
 8002e60:	6026      	str	r6, [r4, #0]
 8002e62:	463e      	mov	r6, r7
 8002e64:	6165      	str	r5, [r4, #20]
 8002e66:	eba5 0509 	sub.w	r5, r5, r9
 8002e6a:	60a5      	str	r5, [r4, #8]
 8002e6c:	42be      	cmp	r6, r7
 8002e6e:	d900      	bls.n	8002e72 <__ssputs_r+0x72>
 8002e70:	463e      	mov	r6, r7
 8002e72:	4632      	mov	r2, r6
 8002e74:	4641      	mov	r1, r8
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	f000 faaa 	bl	80033d0 <memmove>
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	1b9b      	subs	r3, r3, r6
 8002e82:	60a3      	str	r3, [r4, #8]
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	4433      	add	r3, r6
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8e:	462a      	mov	r2, r5
 8002e90:	f000 fae4 	bl	800345c <_realloc_r>
 8002e94:	4606      	mov	r6, r0
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d1e0      	bne.n	8002e5c <__ssputs_r+0x5c>
 8002e9a:	4650      	mov	r0, sl
 8002e9c:	6921      	ldr	r1, [r4, #16]
 8002e9e:	f7ff feb9 	bl	8002c14 <_free_r>
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	f8ca 3000 	str.w	r3, [sl]
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8002eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb2:	81a3      	strh	r3, [r4, #12]
 8002eb4:	e7e9      	b.n	8002e8a <__ssputs_r+0x8a>
	...

08002eb8 <_svfiprintf_r>:
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	4698      	mov	r8, r3
 8002ebe:	898b      	ldrh	r3, [r1, #12]
 8002ec0:	4607      	mov	r7, r0
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	460d      	mov	r5, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	b09d      	sub	sp, #116	@ 0x74
 8002eca:	d510      	bpl.n	8002eee <_svfiprintf_r+0x36>
 8002ecc:	690b      	ldr	r3, [r1, #16]
 8002ece:	b973      	cbnz	r3, 8002eee <_svfiprintf_r+0x36>
 8002ed0:	2140      	movs	r1, #64	@ 0x40
 8002ed2:	f7ff ff09 	bl	8002ce8 <_malloc_r>
 8002ed6:	6028      	str	r0, [r5, #0]
 8002ed8:	6128      	str	r0, [r5, #16]
 8002eda:	b930      	cbnz	r0, 8002eea <_svfiprintf_r+0x32>
 8002edc:	230c      	movs	r3, #12
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	b01d      	add	sp, #116	@ 0x74
 8002ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eea:	2340      	movs	r3, #64	@ 0x40
 8002eec:	616b      	str	r3, [r5, #20]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ef8:	2330      	movs	r3, #48	@ 0x30
 8002efa:	f04f 0901 	mov.w	r9, #1
 8002efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800309c <_svfiprintf_r+0x1e4>
 8002f06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	469a      	mov	sl, r3
 8002f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f12:	b10a      	cbz	r2, 8002f18 <_svfiprintf_r+0x60>
 8002f14:	2a25      	cmp	r2, #37	@ 0x25
 8002f16:	d1f9      	bne.n	8002f0c <_svfiprintf_r+0x54>
 8002f18:	ebba 0b04 	subs.w	fp, sl, r4
 8002f1c:	d00b      	beq.n	8002f36 <_svfiprintf_r+0x7e>
 8002f1e:	465b      	mov	r3, fp
 8002f20:	4622      	mov	r2, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	4638      	mov	r0, r7
 8002f26:	f7ff ff6b 	bl	8002e00 <__ssputs_r>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f000 80a7 	beq.w	800307e <_svfiprintf_r+0x1c6>
 8002f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f32:	445a      	add	r2, fp
 8002f34:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f36:	f89a 3000 	ldrb.w	r3, [sl]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 809f 	beq.w	800307e <_svfiprintf_r+0x1c6>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f04f 32ff 	mov.w	r2, #4294967295
 8002f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f4a:	f10a 0a01 	add.w	sl, sl, #1
 8002f4e:	9304      	str	r3, [sp, #16]
 8002f50:	9307      	str	r3, [sp, #28]
 8002f52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f56:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f58:	4654      	mov	r4, sl
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f60:	484e      	ldr	r0, [pc, #312]	@ (800309c <_svfiprintf_r+0x1e4>)
 8002f62:	f000 fa5f 	bl	8003424 <memchr>
 8002f66:	9a04      	ldr	r2, [sp, #16]
 8002f68:	b9d8      	cbnz	r0, 8002fa2 <_svfiprintf_r+0xea>
 8002f6a:	06d0      	lsls	r0, r2, #27
 8002f6c:	bf44      	itt	mi
 8002f6e:	2320      	movmi	r3, #32
 8002f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f74:	0711      	lsls	r1, r2, #28
 8002f76:	bf44      	itt	mi
 8002f78:	232b      	movmi	r3, #43	@ 0x2b
 8002f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f84:	d015      	beq.n	8002fb2 <_svfiprintf_r+0xfa>
 8002f86:	4654      	mov	r4, sl
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f04f 0c0a 	mov.w	ip, #10
 8002f8e:	9a07      	ldr	r2, [sp, #28]
 8002f90:	4621      	mov	r1, r4
 8002f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f96:	3b30      	subs	r3, #48	@ 0x30
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d94b      	bls.n	8003034 <_svfiprintf_r+0x17c>
 8002f9c:	b1b0      	cbz	r0, 8002fcc <_svfiprintf_r+0x114>
 8002f9e:	9207      	str	r2, [sp, #28]
 8002fa0:	e014      	b.n	8002fcc <_svfiprintf_r+0x114>
 8002fa2:	eba0 0308 	sub.w	r3, r0, r8
 8002fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	46a2      	mov	sl, r4
 8002fae:	9304      	str	r3, [sp, #16]
 8002fb0:	e7d2      	b.n	8002f58 <_svfiprintf_r+0xa0>
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	1d19      	adds	r1, r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9103      	str	r1, [sp, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfbb      	ittet	lt
 8002fbe:	425b      	neglt	r3, r3
 8002fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fc4:	9307      	strge	r3, [sp, #28]
 8002fc6:	9307      	strlt	r3, [sp, #28]
 8002fc8:	bfb8      	it	lt
 8002fca:	9204      	strlt	r2, [sp, #16]
 8002fcc:	7823      	ldrb	r3, [r4, #0]
 8002fce:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fd0:	d10a      	bne.n	8002fe8 <_svfiprintf_r+0x130>
 8002fd2:	7863      	ldrb	r3, [r4, #1]
 8002fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fd6:	d132      	bne.n	800303e <_svfiprintf_r+0x186>
 8002fd8:	9b03      	ldr	r3, [sp, #12]
 8002fda:	3402      	adds	r4, #2
 8002fdc:	1d1a      	adds	r2, r3, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	9203      	str	r2, [sp, #12]
 8002fe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fe6:	9305      	str	r3, [sp, #20]
 8002fe8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80030a0 <_svfiprintf_r+0x1e8>
 8002fec:	2203      	movs	r2, #3
 8002fee:	4650      	mov	r0, sl
 8002ff0:	7821      	ldrb	r1, [r4, #0]
 8002ff2:	f000 fa17 	bl	8003424 <memchr>
 8002ff6:	b138      	cbz	r0, 8003008 <_svfiprintf_r+0x150>
 8002ff8:	2240      	movs	r2, #64	@ 0x40
 8002ffa:	9b04      	ldr	r3, [sp, #16]
 8002ffc:	eba0 000a 	sub.w	r0, r0, sl
 8003000:	4082      	lsls	r2, r0
 8003002:	4313      	orrs	r3, r2
 8003004:	3401      	adds	r4, #1
 8003006:	9304      	str	r3, [sp, #16]
 8003008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800300c:	2206      	movs	r2, #6
 800300e:	4825      	ldr	r0, [pc, #148]	@ (80030a4 <_svfiprintf_r+0x1ec>)
 8003010:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003014:	f000 fa06 	bl	8003424 <memchr>
 8003018:	2800      	cmp	r0, #0
 800301a:	d036      	beq.n	800308a <_svfiprintf_r+0x1d2>
 800301c:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <_svfiprintf_r+0x1f0>)
 800301e:	bb1b      	cbnz	r3, 8003068 <_svfiprintf_r+0x1b0>
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	3307      	adds	r3, #7
 8003024:	f023 0307 	bic.w	r3, r3, #7
 8003028:	3308      	adds	r3, #8
 800302a:	9303      	str	r3, [sp, #12]
 800302c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800302e:	4433      	add	r3, r6
 8003030:	9309      	str	r3, [sp, #36]	@ 0x24
 8003032:	e76a      	b.n	8002f0a <_svfiprintf_r+0x52>
 8003034:	460c      	mov	r4, r1
 8003036:	2001      	movs	r0, #1
 8003038:	fb0c 3202 	mla	r2, ip, r2, r3
 800303c:	e7a8      	b.n	8002f90 <_svfiprintf_r+0xd8>
 800303e:	2300      	movs	r3, #0
 8003040:	f04f 0c0a 	mov.w	ip, #10
 8003044:	4619      	mov	r1, r3
 8003046:	3401      	adds	r4, #1
 8003048:	9305      	str	r3, [sp, #20]
 800304a:	4620      	mov	r0, r4
 800304c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003050:	3a30      	subs	r2, #48	@ 0x30
 8003052:	2a09      	cmp	r2, #9
 8003054:	d903      	bls.n	800305e <_svfiprintf_r+0x1a6>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0c6      	beq.n	8002fe8 <_svfiprintf_r+0x130>
 800305a:	9105      	str	r1, [sp, #20]
 800305c:	e7c4      	b.n	8002fe8 <_svfiprintf_r+0x130>
 800305e:	4604      	mov	r4, r0
 8003060:	2301      	movs	r3, #1
 8003062:	fb0c 2101 	mla	r1, ip, r1, r2
 8003066:	e7f0      	b.n	800304a <_svfiprintf_r+0x192>
 8003068:	ab03      	add	r3, sp, #12
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	462a      	mov	r2, r5
 800306e:	4638      	mov	r0, r7
 8003070:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <_svfiprintf_r+0x1f4>)
 8003072:	a904      	add	r1, sp, #16
 8003074:	f3af 8000 	nop.w
 8003078:	1c42      	adds	r2, r0, #1
 800307a:	4606      	mov	r6, r0
 800307c:	d1d6      	bne.n	800302c <_svfiprintf_r+0x174>
 800307e:	89ab      	ldrh	r3, [r5, #12]
 8003080:	065b      	lsls	r3, r3, #25
 8003082:	f53f af2d 	bmi.w	8002ee0 <_svfiprintf_r+0x28>
 8003086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003088:	e72c      	b.n	8002ee4 <_svfiprintf_r+0x2c>
 800308a:	ab03      	add	r3, sp, #12
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	462a      	mov	r2, r5
 8003090:	4638      	mov	r0, r7
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <_svfiprintf_r+0x1f4>)
 8003094:	a904      	add	r1, sp, #16
 8003096:	f000 f87d 	bl	8003194 <_printf_i>
 800309a:	e7ed      	b.n	8003078 <_svfiprintf_r+0x1c0>
 800309c:	0800362a 	.word	0x0800362a
 80030a0:	08003630 	.word	0x08003630
 80030a4:	08003634 	.word	0x08003634
 80030a8:	00000000 	.word	0x00000000
 80030ac:	08002e01 	.word	0x08002e01

080030b0 <_printf_common>:
 80030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	4616      	mov	r6, r2
 80030b6:	4698      	mov	r8, r3
 80030b8:	688a      	ldr	r2, [r1, #8]
 80030ba:	690b      	ldr	r3, [r1, #16]
 80030bc:	4607      	mov	r7, r0
 80030be:	4293      	cmp	r3, r2
 80030c0:	bfb8      	it	lt
 80030c2:	4613      	movlt	r3, r2
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030ca:	460c      	mov	r4, r1
 80030cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030d0:	b10a      	cbz	r2, 80030d6 <_printf_common+0x26>
 80030d2:	3301      	adds	r3, #1
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	0699      	lsls	r1, r3, #26
 80030da:	bf42      	ittt	mi
 80030dc:	6833      	ldrmi	r3, [r6, #0]
 80030de:	3302      	addmi	r3, #2
 80030e0:	6033      	strmi	r3, [r6, #0]
 80030e2:	6825      	ldr	r5, [r4, #0]
 80030e4:	f015 0506 	ands.w	r5, r5, #6
 80030e8:	d106      	bne.n	80030f8 <_printf_common+0x48>
 80030ea:	f104 0a19 	add.w	sl, r4, #25
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	6832      	ldr	r2, [r6, #0]
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	42ab      	cmp	r3, r5
 80030f6:	dc2b      	bgt.n	8003150 <_printf_common+0xa0>
 80030f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	3b00      	subs	r3, #0
 8003100:	bf18      	it	ne
 8003102:	2301      	movne	r3, #1
 8003104:	0692      	lsls	r2, r2, #26
 8003106:	d430      	bmi.n	800316a <_printf_common+0xba>
 8003108:	4641      	mov	r1, r8
 800310a:	4638      	mov	r0, r7
 800310c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003110:	47c8      	blx	r9
 8003112:	3001      	adds	r0, #1
 8003114:	d023      	beq.n	800315e <_printf_common+0xae>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	6922      	ldr	r2, [r4, #16]
 800311a:	f003 0306 	and.w	r3, r3, #6
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf14      	ite	ne
 8003122:	2500      	movne	r5, #0
 8003124:	6833      	ldreq	r3, [r6, #0]
 8003126:	f04f 0600 	mov.w	r6, #0
 800312a:	bf08      	it	eq
 800312c:	68e5      	ldreq	r5, [r4, #12]
 800312e:	f104 041a 	add.w	r4, r4, #26
 8003132:	bf08      	it	eq
 8003134:	1aed      	subeq	r5, r5, r3
 8003136:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800313a:	bf08      	it	eq
 800313c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003140:	4293      	cmp	r3, r2
 8003142:	bfc4      	itt	gt
 8003144:	1a9b      	subgt	r3, r3, r2
 8003146:	18ed      	addgt	r5, r5, r3
 8003148:	42b5      	cmp	r5, r6
 800314a:	d11a      	bne.n	8003182 <_printf_common+0xd2>
 800314c:	2000      	movs	r0, #0
 800314e:	e008      	b.n	8003162 <_printf_common+0xb2>
 8003150:	2301      	movs	r3, #1
 8003152:	4652      	mov	r2, sl
 8003154:	4641      	mov	r1, r8
 8003156:	4638      	mov	r0, r7
 8003158:	47c8      	blx	r9
 800315a:	3001      	adds	r0, #1
 800315c:	d103      	bne.n	8003166 <_printf_common+0xb6>
 800315e:	f04f 30ff 	mov.w	r0, #4294967295
 8003162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003166:	3501      	adds	r5, #1
 8003168:	e7c1      	b.n	80030ee <_printf_common+0x3e>
 800316a:	2030      	movs	r0, #48	@ 0x30
 800316c:	18e1      	adds	r1, r4, r3
 800316e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003178:	4422      	add	r2, r4
 800317a:	3302      	adds	r3, #2
 800317c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003180:	e7c2      	b.n	8003108 <_printf_common+0x58>
 8003182:	2301      	movs	r3, #1
 8003184:	4622      	mov	r2, r4
 8003186:	4641      	mov	r1, r8
 8003188:	4638      	mov	r0, r7
 800318a:	47c8      	blx	r9
 800318c:	3001      	adds	r0, #1
 800318e:	d0e6      	beq.n	800315e <_printf_common+0xae>
 8003190:	3601      	adds	r6, #1
 8003192:	e7d9      	b.n	8003148 <_printf_common+0x98>

08003194 <_printf_i>:
 8003194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003198:	7e0f      	ldrb	r7, [r1, #24]
 800319a:	4691      	mov	r9, r2
 800319c:	2f78      	cmp	r7, #120	@ 0x78
 800319e:	4680      	mov	r8, r0
 80031a0:	460c      	mov	r4, r1
 80031a2:	469a      	mov	sl, r3
 80031a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031aa:	d807      	bhi.n	80031bc <_printf_i+0x28>
 80031ac:	2f62      	cmp	r7, #98	@ 0x62
 80031ae:	d80a      	bhi.n	80031c6 <_printf_i+0x32>
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	f000 80d1 	beq.w	8003358 <_printf_i+0x1c4>
 80031b6:	2f58      	cmp	r7, #88	@ 0x58
 80031b8:	f000 80b8 	beq.w	800332c <_printf_i+0x198>
 80031bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031c4:	e03a      	b.n	800323c <_printf_i+0xa8>
 80031c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031ca:	2b15      	cmp	r3, #21
 80031cc:	d8f6      	bhi.n	80031bc <_printf_i+0x28>
 80031ce:	a101      	add	r1, pc, #4	@ (adr r1, 80031d4 <_printf_i+0x40>)
 80031d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031d4:	0800322d 	.word	0x0800322d
 80031d8:	08003241 	.word	0x08003241
 80031dc:	080031bd 	.word	0x080031bd
 80031e0:	080031bd 	.word	0x080031bd
 80031e4:	080031bd 	.word	0x080031bd
 80031e8:	080031bd 	.word	0x080031bd
 80031ec:	08003241 	.word	0x08003241
 80031f0:	080031bd 	.word	0x080031bd
 80031f4:	080031bd 	.word	0x080031bd
 80031f8:	080031bd 	.word	0x080031bd
 80031fc:	080031bd 	.word	0x080031bd
 8003200:	0800333f 	.word	0x0800333f
 8003204:	0800326b 	.word	0x0800326b
 8003208:	080032f9 	.word	0x080032f9
 800320c:	080031bd 	.word	0x080031bd
 8003210:	080031bd 	.word	0x080031bd
 8003214:	08003361 	.word	0x08003361
 8003218:	080031bd 	.word	0x080031bd
 800321c:	0800326b 	.word	0x0800326b
 8003220:	080031bd 	.word	0x080031bd
 8003224:	080031bd 	.word	0x080031bd
 8003228:	08003301 	.word	0x08003301
 800322c:	6833      	ldr	r3, [r6, #0]
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6032      	str	r2, [r6, #0]
 8003234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800323c:	2301      	movs	r3, #1
 800323e:	e09c      	b.n	800337a <_printf_i+0x1e6>
 8003240:	6833      	ldr	r3, [r6, #0]
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	1d19      	adds	r1, r3, #4
 8003246:	6031      	str	r1, [r6, #0]
 8003248:	0606      	lsls	r6, r0, #24
 800324a:	d501      	bpl.n	8003250 <_printf_i+0xbc>
 800324c:	681d      	ldr	r5, [r3, #0]
 800324e:	e003      	b.n	8003258 <_printf_i+0xc4>
 8003250:	0645      	lsls	r5, r0, #25
 8003252:	d5fb      	bpl.n	800324c <_printf_i+0xb8>
 8003254:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003258:	2d00      	cmp	r5, #0
 800325a:	da03      	bge.n	8003264 <_printf_i+0xd0>
 800325c:	232d      	movs	r3, #45	@ 0x2d
 800325e:	426d      	negs	r5, r5
 8003260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003264:	230a      	movs	r3, #10
 8003266:	4858      	ldr	r0, [pc, #352]	@ (80033c8 <_printf_i+0x234>)
 8003268:	e011      	b.n	800328e <_printf_i+0xfa>
 800326a:	6821      	ldr	r1, [r4, #0]
 800326c:	6833      	ldr	r3, [r6, #0]
 800326e:	0608      	lsls	r0, r1, #24
 8003270:	f853 5b04 	ldr.w	r5, [r3], #4
 8003274:	d402      	bmi.n	800327c <_printf_i+0xe8>
 8003276:	0649      	lsls	r1, r1, #25
 8003278:	bf48      	it	mi
 800327a:	b2ad      	uxthmi	r5, r5
 800327c:	2f6f      	cmp	r7, #111	@ 0x6f
 800327e:	6033      	str	r3, [r6, #0]
 8003280:	bf14      	ite	ne
 8003282:	230a      	movne	r3, #10
 8003284:	2308      	moveq	r3, #8
 8003286:	4850      	ldr	r0, [pc, #320]	@ (80033c8 <_printf_i+0x234>)
 8003288:	2100      	movs	r1, #0
 800328a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800328e:	6866      	ldr	r6, [r4, #4]
 8003290:	2e00      	cmp	r6, #0
 8003292:	60a6      	str	r6, [r4, #8]
 8003294:	db05      	blt.n	80032a2 <_printf_i+0x10e>
 8003296:	6821      	ldr	r1, [r4, #0]
 8003298:	432e      	orrs	r6, r5
 800329a:	f021 0104 	bic.w	r1, r1, #4
 800329e:	6021      	str	r1, [r4, #0]
 80032a0:	d04b      	beq.n	800333a <_printf_i+0x1a6>
 80032a2:	4616      	mov	r6, r2
 80032a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80032a8:	fb03 5711 	mls	r7, r3, r1, r5
 80032ac:	5dc7      	ldrb	r7, [r0, r7]
 80032ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032b2:	462f      	mov	r7, r5
 80032b4:	42bb      	cmp	r3, r7
 80032b6:	460d      	mov	r5, r1
 80032b8:	d9f4      	bls.n	80032a4 <_printf_i+0x110>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d10b      	bne.n	80032d6 <_printf_i+0x142>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	07df      	lsls	r7, r3, #31
 80032c2:	d508      	bpl.n	80032d6 <_printf_i+0x142>
 80032c4:	6923      	ldr	r3, [r4, #16]
 80032c6:	6861      	ldr	r1, [r4, #4]
 80032c8:	4299      	cmp	r1, r3
 80032ca:	bfde      	ittt	le
 80032cc:	2330      	movle	r3, #48	@ 0x30
 80032ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032d6:	1b92      	subs	r2, r2, r6
 80032d8:	6122      	str	r2, [r4, #16]
 80032da:	464b      	mov	r3, r9
 80032dc:	4621      	mov	r1, r4
 80032de:	4640      	mov	r0, r8
 80032e0:	f8cd a000 	str.w	sl, [sp]
 80032e4:	aa03      	add	r2, sp, #12
 80032e6:	f7ff fee3 	bl	80030b0 <_printf_common>
 80032ea:	3001      	adds	r0, #1
 80032ec:	d14a      	bne.n	8003384 <_printf_i+0x1f0>
 80032ee:	f04f 30ff 	mov.w	r0, #4294967295
 80032f2:	b004      	add	sp, #16
 80032f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	f043 0320 	orr.w	r3, r3, #32
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	2778      	movs	r7, #120	@ 0x78
 8003302:	4832      	ldr	r0, [pc, #200]	@ (80033cc <_printf_i+0x238>)
 8003304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	6831      	ldr	r1, [r6, #0]
 800330c:	061f      	lsls	r7, r3, #24
 800330e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003312:	d402      	bmi.n	800331a <_printf_i+0x186>
 8003314:	065f      	lsls	r7, r3, #25
 8003316:	bf48      	it	mi
 8003318:	b2ad      	uxthmi	r5, r5
 800331a:	6031      	str	r1, [r6, #0]
 800331c:	07d9      	lsls	r1, r3, #31
 800331e:	bf44      	itt	mi
 8003320:	f043 0320 	orrmi.w	r3, r3, #32
 8003324:	6023      	strmi	r3, [r4, #0]
 8003326:	b11d      	cbz	r5, 8003330 <_printf_i+0x19c>
 8003328:	2310      	movs	r3, #16
 800332a:	e7ad      	b.n	8003288 <_printf_i+0xf4>
 800332c:	4826      	ldr	r0, [pc, #152]	@ (80033c8 <_printf_i+0x234>)
 800332e:	e7e9      	b.n	8003304 <_printf_i+0x170>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	f023 0320 	bic.w	r3, r3, #32
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	e7f6      	b.n	8003328 <_printf_i+0x194>
 800333a:	4616      	mov	r6, r2
 800333c:	e7bd      	b.n	80032ba <_printf_i+0x126>
 800333e:	6833      	ldr	r3, [r6, #0]
 8003340:	6825      	ldr	r5, [r4, #0]
 8003342:	1d18      	adds	r0, r3, #4
 8003344:	6961      	ldr	r1, [r4, #20]
 8003346:	6030      	str	r0, [r6, #0]
 8003348:	062e      	lsls	r6, r5, #24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	d501      	bpl.n	8003352 <_printf_i+0x1be>
 800334e:	6019      	str	r1, [r3, #0]
 8003350:	e002      	b.n	8003358 <_printf_i+0x1c4>
 8003352:	0668      	lsls	r0, r5, #25
 8003354:	d5fb      	bpl.n	800334e <_printf_i+0x1ba>
 8003356:	8019      	strh	r1, [r3, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	4616      	mov	r6, r2
 800335c:	6123      	str	r3, [r4, #16]
 800335e:	e7bc      	b.n	80032da <_printf_i+0x146>
 8003360:	6833      	ldr	r3, [r6, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	1d1a      	adds	r2, r3, #4
 8003366:	6032      	str	r2, [r6, #0]
 8003368:	681e      	ldr	r6, [r3, #0]
 800336a:	6862      	ldr	r2, [r4, #4]
 800336c:	4630      	mov	r0, r6
 800336e:	f000 f859 	bl	8003424 <memchr>
 8003372:	b108      	cbz	r0, 8003378 <_printf_i+0x1e4>
 8003374:	1b80      	subs	r0, r0, r6
 8003376:	6060      	str	r0, [r4, #4]
 8003378:	6863      	ldr	r3, [r4, #4]
 800337a:	6123      	str	r3, [r4, #16]
 800337c:	2300      	movs	r3, #0
 800337e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003382:	e7aa      	b.n	80032da <_printf_i+0x146>
 8003384:	4632      	mov	r2, r6
 8003386:	4649      	mov	r1, r9
 8003388:	4640      	mov	r0, r8
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	47d0      	blx	sl
 800338e:	3001      	adds	r0, #1
 8003390:	d0ad      	beq.n	80032ee <_printf_i+0x15a>
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	079b      	lsls	r3, r3, #30
 8003396:	d413      	bmi.n	80033c0 <_printf_i+0x22c>
 8003398:	68e0      	ldr	r0, [r4, #12]
 800339a:	9b03      	ldr	r3, [sp, #12]
 800339c:	4298      	cmp	r0, r3
 800339e:	bfb8      	it	lt
 80033a0:	4618      	movlt	r0, r3
 80033a2:	e7a6      	b.n	80032f2 <_printf_i+0x15e>
 80033a4:	2301      	movs	r3, #1
 80033a6:	4632      	mov	r2, r6
 80033a8:	4649      	mov	r1, r9
 80033aa:	4640      	mov	r0, r8
 80033ac:	47d0      	blx	sl
 80033ae:	3001      	adds	r0, #1
 80033b0:	d09d      	beq.n	80032ee <_printf_i+0x15a>
 80033b2:	3501      	adds	r5, #1
 80033b4:	68e3      	ldr	r3, [r4, #12]
 80033b6:	9903      	ldr	r1, [sp, #12]
 80033b8:	1a5b      	subs	r3, r3, r1
 80033ba:	42ab      	cmp	r3, r5
 80033bc:	dcf2      	bgt.n	80033a4 <_printf_i+0x210>
 80033be:	e7eb      	b.n	8003398 <_printf_i+0x204>
 80033c0:	2500      	movs	r5, #0
 80033c2:	f104 0619 	add.w	r6, r4, #25
 80033c6:	e7f5      	b.n	80033b4 <_printf_i+0x220>
 80033c8:	0800363b 	.word	0x0800363b
 80033cc:	0800364c 	.word	0x0800364c

080033d0 <memmove>:
 80033d0:	4288      	cmp	r0, r1
 80033d2:	b510      	push	{r4, lr}
 80033d4:	eb01 0402 	add.w	r4, r1, r2
 80033d8:	d902      	bls.n	80033e0 <memmove+0x10>
 80033da:	4284      	cmp	r4, r0
 80033dc:	4623      	mov	r3, r4
 80033de:	d807      	bhi.n	80033f0 <memmove+0x20>
 80033e0:	1e43      	subs	r3, r0, #1
 80033e2:	42a1      	cmp	r1, r4
 80033e4:	d008      	beq.n	80033f8 <memmove+0x28>
 80033e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ee:	e7f8      	b.n	80033e2 <memmove+0x12>
 80033f0:	4601      	mov	r1, r0
 80033f2:	4402      	add	r2, r0
 80033f4:	428a      	cmp	r2, r1
 80033f6:	d100      	bne.n	80033fa <memmove+0x2a>
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003402:	e7f7      	b.n	80033f4 <memmove+0x24>

08003404 <_sbrk_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	2300      	movs	r3, #0
 8003408:	4d05      	ldr	r5, [pc, #20]	@ (8003420 <_sbrk_r+0x1c>)
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	f7fd fc20 	bl	8000c54 <_sbrk>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_sbrk_r+0x1a>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b103      	cbz	r3, 800341e <_sbrk_r+0x1a>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	20000334 	.word	0x20000334

08003424 <memchr>:
 8003424:	4603      	mov	r3, r0
 8003426:	b510      	push	{r4, lr}
 8003428:	b2c9      	uxtb	r1, r1
 800342a:	4402      	add	r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	4618      	mov	r0, r3
 8003430:	d101      	bne.n	8003436 <memchr+0x12>
 8003432:	2000      	movs	r0, #0
 8003434:	e003      	b.n	800343e <memchr+0x1a>
 8003436:	7804      	ldrb	r4, [r0, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	428c      	cmp	r4, r1
 800343c:	d1f6      	bne.n	800342c <memchr+0x8>
 800343e:	bd10      	pop	{r4, pc}

08003440 <memcpy>:
 8003440:	440a      	add	r2, r1
 8003442:	4291      	cmp	r1, r2
 8003444:	f100 33ff 	add.w	r3, r0, #4294967295
 8003448:	d100      	bne.n	800344c <memcpy+0xc>
 800344a:	4770      	bx	lr
 800344c:	b510      	push	{r4, lr}
 800344e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003452:	4291      	cmp	r1, r2
 8003454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003458:	d1f9      	bne.n	800344e <memcpy+0xe>
 800345a:	bd10      	pop	{r4, pc}

0800345c <_realloc_r>:
 800345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003460:	4607      	mov	r7, r0
 8003462:	4614      	mov	r4, r2
 8003464:	460d      	mov	r5, r1
 8003466:	b921      	cbnz	r1, 8003472 <_realloc_r+0x16>
 8003468:	4611      	mov	r1, r2
 800346a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800346e:	f7ff bc3b 	b.w	8002ce8 <_malloc_r>
 8003472:	b92a      	cbnz	r2, 8003480 <_realloc_r+0x24>
 8003474:	f7ff fbce 	bl	8002c14 <_free_r>
 8003478:	4625      	mov	r5, r4
 800347a:	4628      	mov	r0, r5
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003480:	f000 f81a 	bl	80034b8 <_malloc_usable_size_r>
 8003484:	4284      	cmp	r4, r0
 8003486:	4606      	mov	r6, r0
 8003488:	d802      	bhi.n	8003490 <_realloc_r+0x34>
 800348a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800348e:	d8f4      	bhi.n	800347a <_realloc_r+0x1e>
 8003490:	4621      	mov	r1, r4
 8003492:	4638      	mov	r0, r7
 8003494:	f7ff fc28 	bl	8002ce8 <_malloc_r>
 8003498:	4680      	mov	r8, r0
 800349a:	b908      	cbnz	r0, 80034a0 <_realloc_r+0x44>
 800349c:	4645      	mov	r5, r8
 800349e:	e7ec      	b.n	800347a <_realloc_r+0x1e>
 80034a0:	42b4      	cmp	r4, r6
 80034a2:	4622      	mov	r2, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	bf28      	it	cs
 80034a8:	4632      	movcs	r2, r6
 80034aa:	f7ff ffc9 	bl	8003440 <memcpy>
 80034ae:	4629      	mov	r1, r5
 80034b0:	4638      	mov	r0, r7
 80034b2:	f7ff fbaf 	bl	8002c14 <_free_r>
 80034b6:	e7f1      	b.n	800349c <_realloc_r+0x40>

080034b8 <_malloc_usable_size_r>:
 80034b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034bc:	1f18      	subs	r0, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfbc      	itt	lt
 80034c2:	580b      	ldrlt	r3, [r1, r0]
 80034c4:	18c0      	addlt	r0, r0, r3
 80034c6:	4770      	bx	lr

080034c8 <_init>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	bf00      	nop
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr

080034d4 <_fini>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr
