
new_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003368  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08003474  08003474  00004474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f8  080035f8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080035f8  080035f8  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080035f8  080035f8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f8  080035f8  000045f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035fc  080035fc  000045fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003600  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  0800365c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800365c  00005344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b857  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2d  00000000  00000000  000108dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00012310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000932  00000000  00000000  00012eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1d  00000000  00000000  000137e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d37d  00000000  00000000  0002b1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a53e  00000000  00000000  0003857c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e4  00000000  00000000  000c2b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c60e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800345c 	.word	0x0800345c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800345c 	.word	0x0800345c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fdac 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80c 	bl	8000170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f98e 	bl	8000478 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f84e 	bl	80001fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f960 	bl	8000424 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8a4 	bl	80002b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f90c 	bl	8000384 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	bf00      	nop
 800016e:	e7fd      	b.n	800016c <main+0x20>

08000170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b090      	sub	sp, #64	@ 0x40
 8000174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000176:	f107 0318 	add.w	r3, r7, #24
 800017a:	2228      	movs	r2, #40	@ 0x28
 800017c:	2100      	movs	r1, #0
 800017e:	4618      	mov	r0, r3
 8000180:	f002 fcde 	bl	8002b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000192:	2301      	movs	r3, #1
 8000194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800019a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	2300      	movs	r3, #0
 800019e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 f89b 	bl	80012f4 <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c4:	f000 fbe4 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c8:	230f      	movs	r3, #15
 80001ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2102      	movs	r1, #2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fb08 	bl	80017f8 <HAL_RCC_ClockConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001ee:	f000 fbcf 	bl	8000990 <Error_Handler>
  }
}
 80001f2:	bf00      	nop
 80001f4:	3740      	adds	r7, #64	@ 0x40
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000218:	4b23      	ldr	r3, [pc, #140]	@ (80002a8 <MX_TIM1_Init+0xac>)
 800021a:	4a24      	ldr	r2, [pc, #144]	@ (80002ac <MX_TIM1_Init+0xb0>)
 800021c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800021e:	4b22      	ldr	r3, [pc, #136]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000220:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000226:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000228:	2210      	movs	r2, #16
 800022a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800022c:	4b1e      	ldr	r3, [pc, #120]	@ (80002a8 <MX_TIM1_Init+0xac>)
 800022e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000232:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000234:	4b1c      	ldr	r3, [pc, #112]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000236:	2200      	movs	r2, #0
 8000238:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800023a:	4b1b      	ldr	r3, [pc, #108]	@ (80002a8 <MX_TIM1_Init+0xac>)
 800023c:	2200      	movs	r2, #0
 800023e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000240:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000242:	2200      	movs	r2, #0
 8000244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000246:	4818      	ldr	r0, [pc, #96]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000248:	f001 fc64 	bl	8001b14 <HAL_TIM_Base_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000252:	f000 fb9d 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800025a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	4619      	mov	r1, r3
 8000262:	4811      	ldr	r0, [pc, #68]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000264:	f001 fedf 	bl	8002026 <HAL_TIM_ConfigClockSource>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800026e:	f000 fb8f 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000272:	2108      	movs	r1, #8
 8000274:	480c      	ldr	r0, [pc, #48]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000276:	f001 fd8d 	bl	8001d94 <HAL_TIM_OnePulse_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000280:	f000 fb86 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000284:	2310      	movs	r3, #16
 8000286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_TIM1_Init+0xac>)
 8000292:	f002 f98b 	bl	80025ac <HAL_TIMEx_MasterConfigSynchronization>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800029c:	f000 fb78 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000078 	.word	0x20000078
 80002ac:	40012c00 	.word	0x40012c00

080002b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08c      	sub	sp, #48	@ 0x30
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b6:	f107 0320 	add.w	r3, r7, #32
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002dc:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e4:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ea:	4b25      	ldr	r3, [pc, #148]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002f0:	4b23      	ldr	r3, [pc, #140]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f8:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <MX_TIM2_Init+0xd0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fe:	4b20      	ldr	r3, [pc, #128]	@ (8000380 <MX_TIM2_Init+0xd0>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000304:	481e      	ldr	r0, [pc, #120]	@ (8000380 <MX_TIM2_Init+0xd0>)
 8000306:	f001 fc05 	bl	8001b14 <HAL_TIM_Base_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000310:	f000 fb3e 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000318:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	@ 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0320 	add.w	r3, r7, #32
 800032a:	4619      	mov	r1, r3
 800032c:	4814      	ldr	r0, [pc, #80]	@ (8000380 <MX_TIM2_Init+0xd0>)
 800032e:	f001 fe7a 	bl	8002026 <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000338:	f000 fb2a 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800033c:	2305      	movs	r3, #5
 800033e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	4619      	mov	r1, r3
 800034a:	480d      	ldr	r0, [pc, #52]	@ (8000380 <MX_TIM2_Init+0xd0>)
 800034c:	f001 ff32 	bl	80021b4 <HAL_TIM_SlaveConfigSynchro>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000356:	f000 fb1b 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800035a:	2320      	movs	r3, #32
 800035c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4806      	ldr	r0, [pc, #24]	@ (8000380 <MX_TIM2_Init+0xd0>)
 8000368:	f002 f920 	bl	80025ac <HAL_TIMEx_MasterConfigSynchronization>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000372:	f000 fb0d 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	3730      	adds	r7, #48	@ 0x30
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000c0 	.word	0x200000c0

08000384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a2:	4b1e      	ldr	r3, [pc, #120]	@ (800041c <MX_TIM3_Init+0x98>)
 80003a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <MX_TIM3_Init+0x9c>)
 80003a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <MX_TIM3_Init+0x98>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_TIM3_Init+0x98>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003b4:	4b19      	ldr	r3, [pc, #100]	@ (800041c <MX_TIM3_Init+0x98>)
 80003b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_TIM3_Init+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b16      	ldr	r3, [pc, #88]	@ (800041c <MX_TIM3_Init+0x98>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c8:	4814      	ldr	r0, [pc, #80]	@ (800041c <MX_TIM3_Init+0x98>)
 80003ca:	f001 fba3 	bl	8001b14 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003d4:	f000 fadc 	bl	8000990 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80003d8:	2307      	movs	r3, #7
 80003da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80003dc:	2310      	movs	r3, #16
 80003de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	4619      	mov	r1, r3
 80003e6:	480d      	ldr	r0, [pc, #52]	@ (800041c <MX_TIM3_Init+0x98>)
 80003e8:	f001 fee4 	bl	80021b4 <HAL_TIM_SlaveConfigSynchro>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80003f2:	f000 facd 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	@ (800041c <MX_TIM3_Init+0x98>)
 8000404:	f002 f8d2 	bl	80025ac <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800040e:	f000 fabf 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	3720      	adds	r7, #32
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000108 	.word	0x20000108
 8000420:	40000400 	.word	0x40000400

08000424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	@ (8000474 <MX_USART2_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042e:	4b10      	ldr	r3, [pc, #64]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_USART2_UART_Init+0x4c>)
 800045c:	f002 f916 	bl	800268c <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 fa93 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000150 	.word	0x20000150
 8000474:	40004400 	.word	0x40004400

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4b39      	ldr	r3, [pc, #228]	@ (8000574 <MX_GPIO_Init+0xfc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a38      	ldr	r2, [pc, #224]	@ (8000574 <MX_GPIO_Init+0xfc>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b36      	ldr	r3, [pc, #216]	@ (8000574 <MX_GPIO_Init+0xfc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b33      	ldr	r3, [pc, #204]	@ (8000574 <MX_GPIO_Init+0xfc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a32      	ldr	r2, [pc, #200]	@ (8000574 <MX_GPIO_Init+0xfc>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b30      	ldr	r3, [pc, #192]	@ (8000574 <MX_GPIO_Init+0xfc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000574 <MX_GPIO_Init+0xfc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000574 <MX_GPIO_Init+0xfc>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000574 <MX_GPIO_Init+0xfc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80004da:	4827      	ldr	r0, [pc, #156]	@ (8000578 <MX_GPIO_Init+0x100>)
 80004dc:	f000 feda 	bl	8001294 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004e6:	4825      	ldr	r0, [pc, #148]	@ (800057c <MX_GPIO_Init+0x104>)
 80004e8:	f000 fed4 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80004ec:	2302      	movs	r3, #2
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f0:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <MX_GPIO_Init+0x108>)
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	481e      	ldr	r0, [pc, #120]	@ (8000578 <MX_GPIO_Init+0x100>)
 8000500:	f000 fd44 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000504:	23f0      	movs	r3, #240	@ 0xf0
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4817      	ldr	r0, [pc, #92]	@ (8000578 <MX_GPIO_Init+0x100>)
 800051c:	f000 fd36 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000520:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	4810      	ldr	r0, [pc, #64]	@ (800057c <MX_GPIO_Init+0x104>)
 800053a:	f000 fd27 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800053e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4808      	ldr	r0, [pc, #32]	@ (8000578 <MX_GPIO_Init+0x100>)
 8000558:	f000 fd18 	bl	8000f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2007      	movs	r0, #7
 8000562:	f000 fcdc 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000566:	2007      	movs	r0, #7
 8000568:	f000 fcf5 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800
 800057c:	40010c00 	.word	0x40010c00
 8000580:	10110000 	.word	0x10110000

08000584 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a61      	ldr	r2, [pc, #388]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000590:	4293      	cmp	r3, r2
 8000592:	f040 80bb 	bne.w	800070c <HAL_TIM_PeriodElapsedCallback+0x188>
		HAL_TIM_Base_Stop_IT(&htim1);
 8000596:	485f      	ldr	r0, [pc, #380]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000598:	f001 fbce 	bl	8001d38 <HAL_TIM_Base_Stop_IT>
		if(capture_count < MAX_SAMPLES){
 800059c:	4b5e      	ldr	r3, [pc, #376]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d82e      	bhi.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x7e>
			uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2); // значение в счётчике таймера №2
 80005a4:	4b5d      	ldr	r3, [pc, #372]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	81fb      	strh	r3, [r7, #14]
			uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3); // значение в счётчике таймера №3
 80005ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b2:	81bb      	strh	r3, [r7, #12]
			uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2); // значение переполнения таймера №2 (65535)
 80005b4:	4b59      	ldr	r3, [pc, #356]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ba:	817b      	strh	r3, [r7, #10]
			frequenciesForCurrentSensor[capture_count] = (count_main + (count_secondary * (arr + 1)))*10; // вычисляем
 80005bc:	89fa      	ldrh	r2, [r7, #14]
 80005be:	89bb      	ldrh	r3, [r7, #12]
 80005c0:	8979      	ldrh	r1, [r7, #10]
 80005c2:	3101      	adds	r1, #1
 80005c4:	fb01 f303 	mul.w	r3, r1, r3
 80005c8:	441a      	add	r2, r3
 80005ca:	4613      	mov	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4611      	mov	r1, r2
 80005da:	4a52      	ldr	r2, [pc, #328]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80005dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			// uint32_t freq = TIM2->CNT + (TIM3->CNT << 16); // это вариант на регистрах, предыдущие четыре строчки можно закомментить


			//////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80005e0:	4b4e      	ldr	r3, [pc, #312]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 80005e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	@ 0x24
			capture_count++;
 80005f0:	4b49      	ldr	r3, [pc, #292]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a48      	ldr	r2, [pc, #288]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80005f8:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 80005fa:	4846      	ldr	r0, [pc, #280]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80005fc:	f001 fb4a 	bl	8001c94 <HAL_TIM_Base_Start_IT>
				isProccess = 0;
			}

		}
	}
}
 8000600:	e084      	b.n	800070c <HAL_TIM_PeriodElapsedCallback+0x188>
			HAL_TIM_Base_Stop_IT(&htim1);                 // Остановить
 8000602:	4844      	ldr	r0, [pc, #272]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000604:	f001 fb98 	bl	8001d38 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim2);
 8000608:	4844      	ldr	r0, [pc, #272]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800060a:	f001 fb1d 	bl	8001c48 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim3);
 800060e:	4844      	ldr	r0, [pc, #272]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000610:	f001 fb1a 	bl	8001c48 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim1, 0x0000);             // обнуляем таймеры
 8000614:	4b3f      	ldr	r3, [pc, #252]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 800061c:	4b3f      	ldr	r3, [pc, #252]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000624:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2200      	movs	r2, #0
 800062a:	625a      	str	r2, [r3, #36]	@ 0x24
			for (int i = 1; i < MAX_SAMPLES; i++) {
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	e027      	b.n	8000682 <HAL_TIM_PeriodElapsedCallback+0xfe>
				uint32_t key = frequenciesForCurrentSensor[i];
 8000632:	4a3c      	ldr	r2, [pc, #240]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	613b      	str	r3, [r7, #16]
				int j = i - 1;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3b01      	subs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 8000642:	e00b      	b.n	800065c <HAL_TIM_PeriodElapsedCallback+0xd8>
					frequenciesForCurrentSensor[j + 1] = frequenciesForCurrentSensor[j];
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	3301      	adds	r3, #1
 8000648:	4936      	ldr	r1, [pc, #216]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000650:	4934      	ldr	r1, [pc, #208]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					j--;
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	3b01      	subs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	2b00      	cmp	r3, #0
 8000660:	db06      	blt.n	8000670 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000662:	4a30      	ldr	r2, [pc, #192]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3e9      	bcc.n	8000644 <HAL_TIM_PeriodElapsedCallback+0xc0>
				frequenciesForCurrentSensor[j + 1] = key;
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	3301      	adds	r3, #1
 8000674:	492b      	ldr	r1, [pc, #172]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 1; i < MAX_SAMPLES; i++) {
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	3301      	adds	r3, #1
 8000680:	61fb      	str	r3, [r7, #28]
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	2b0a      	cmp	r3, #10
 8000686:	ddd4      	ble.n	8000632 <HAL_TIM_PeriodElapsedCallback+0xae>
			uint32_t frequency_median = frequenciesForCurrentSensor[MAX_SAMPLES / 2];
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	617b      	str	r3, [r7, #20]
			frequenciesResults[currentSensor] = frequency_median;
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	4a25      	ldr	r2, [pc, #148]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			capture_count = 0;
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
			currentSensor++;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006ac:	701a      	strb	r2, [r3, #0]
			if(currentSensor < NUMBER_OF_SENSORS){
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b07      	cmp	r3, #7
 80006b4:	d80e      	bhi.n	80006d4 <HAL_TIM_PeriodElapsedCallback+0x150>
				SelectMuxChannel(currentSensor);
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f896 	bl	80007ec <SelectMuxChannel>
				HAL_TIM_Base_Start_IT(&htim1);
 80006c0:	4814      	ldr	r0, [pc, #80]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80006c2:	f001 fae7 	bl	8001c94 <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start(&htim2);
 80006c6:	4815      	ldr	r0, [pc, #84]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80006c8:	f001 fa74 	bl	8001bb4 <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start(&htim3);
 80006cc:	4814      	ldr	r0, [pc, #80]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80006ce:	f001 fa71 	bl	8001bb4 <HAL_TIM_Base_Start>
}
 80006d2:	e01b      	b.n	800070c <HAL_TIM_PeriodElapsedCallback+0x188>
				PrintSensorFrequencies();
 80006d4:	f000 f91e 	bl	8000914 <PrintSensorFrequencies>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	210f      	movs	r1, #15
 80006dc:	4814      	ldr	r0, [pc, #80]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80006de:	f000 fdd9 	bl	8001294 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006e8:	4811      	ldr	r0, [pc, #68]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80006ea:	f000 fdd3 	bl	8001294 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80006f6:	f000 fdcd 	bl	8001294 <HAL_GPIO_WritePin>
			    capture_count = 0;
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
			    currentSensor = 0;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
				isProccess = 0;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000078 	.word	0x20000078
 8000718:	200001c8 	.word	0x200001c8
 800071c:	200000c0 	.word	0x200000c0
 8000720:	20000108 	.word	0x20000108
 8000724:	2000019c 	.word	0x2000019c
 8000728:	200001d0 	.word	0x200001d0
 800072c:	200001d4 	.word	0x200001d4
 8000730:	40010c00 	.word	0x40010c00
 8000734:	40010800 	.word	0x40010800
 8000738:	20000198 	.word	0x20000198

0800073c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	@ 0x50
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 8000746:	f000 fb09 	bl	8000d5c <HAL_GetTick>
 800074a:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (now - lastInterruptTime < 200) return;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x90>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	2bc7      	cmp	r3, #199	@ 0xc7
 8000756:	d932      	bls.n	80007be <HAL_GPIO_EXTI_Callback+0x82>
	lastInterruptTime = now;
 8000758:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x90>)
 800075a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800075c:	6013      	str	r3, [r2, #0]
	if(isProccess) return;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d12c      	bne.n	80007c2 <HAL_GPIO_EXTI_Callback+0x86>

  if (GPIO_Pin == GPIO_PIN_1 && !isProccess){
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d12a      	bne.n	80007c4 <HAL_GPIO_EXTI_Callback+0x88>
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d125      	bne.n	80007c4 <HAL_GPIO_EXTI_Callback+0x88>
		isProccess = 1;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x94>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
	    char buffer[64]; // Буфер для формирования строки
	    int len = snprintf(buffer, sizeof(buffer), "Counter is started\r\n");
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x98>)
 8000784:	2140      	movs	r1, #64	@ 0x40
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f9a4 	bl	8002ad4 <sniprintf>
 800078c:	64b8      	str	r0, [r7, #72]	@ 0x48
	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800078e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000790:	b29a      	uxth	r2, r3
 8000792:	f107 0108 	add.w	r1, r7, #8
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800079c:	f001 ffc6 	bl	800272c <HAL_UART_Transmit>
		SelectMuxChannel(currentSensor);
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_GPIO_EXTI_Callback+0xa0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f821 	bl	80007ec <SelectMuxChannel>

		HAL_TIM_Base_Start_IT(&htim1);
 80007aa:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <HAL_GPIO_EXTI_Callback+0xa4>)
 80007ac:	f001 fa72 	bl	8001c94 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim2);
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80007b2:	f001 f9ff 	bl	8001bb4 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 80007b6:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <HAL_GPIO_EXTI_Callback+0xac>)
 80007b8:	f001 f9fc 	bl	8001bb4 <HAL_TIM_Base_Start>
 80007bc:	e002      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x88>
	if (now - lastInterruptTime < 200) return;
 80007be:	bf00      	nop
 80007c0:	e000      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x88>
	if(isProccess) return;
 80007c2:	bf00      	nop
  }
}
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001cc 	.word	0x200001cc
 80007d0:	20000198 	.word	0x20000198
 80007d4:	08003474 	.word	0x08003474
 80007d8:	20000150 	.word	0x20000150
 80007dc:	200001d0 	.word	0x200001d0
 80007e0:	20000078 	.word	0x20000078
 80007e4:	200000c0 	.word	0x200000c0
 80007e8:	20000108 	.word	0x20000108

080007ec <SelectMuxChannel>:


void SelectMuxChannel(uint8_t channel) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
    // 1. Отключаем все датчики (опционально, если нужно строгое управление)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007fc:	4842      	ldr	r0, [pc, #264]	@ (8000908 <SelectMuxChannel+0x11c>)
 80007fe:	f000 fd49 	bl	8001294 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000808:	4840      	ldr	r0, [pc, #256]	@ (800090c <SelectMuxChannel+0x120>)
 800080a:	f000 fd43 	bl	8001294 <HAL_GPIO_WritePin>

    // 2. Устанавливаем канал мультиплексора
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, muxChannels[channel].s0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	493f      	ldr	r1, [pc, #252]	@ (8000910 <SelectMuxChannel+0x124>)
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	4837      	ldr	r0, [pc, #220]	@ (800090c <SelectMuxChannel+0x120>)
 800082e:	f000 fd31 	bl	8001294 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, muxChannels[channel].s1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4936      	ldr	r1, [pc, #216]	@ (8000910 <SelectMuxChannel+0x124>)
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	3301      	adds	r3, #1
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	482e      	ldr	r0, [pc, #184]	@ (800090c <SelectMuxChannel+0x120>)
 8000854:	f000 fd1e 	bl	8001294 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, muxChannels[channel].s2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	492d      	ldr	r1, [pc, #180]	@ (8000910 <SelectMuxChannel+0x124>)
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	3302      	adds	r3, #2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	2120      	movs	r1, #32
 8000878:	4824      	ldr	r0, [pc, #144]	@ (800090c <SelectMuxChannel+0x120>)
 800087a:	f000 fd0b 	bl	8001294 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, muxChannels[channel].s3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	4923      	ldr	r1, [pc, #140]	@ (8000910 <SelectMuxChannel+0x124>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	3303      	adds	r3, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	2110      	movs	r1, #16
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <SelectMuxChannel+0x120>)
 80008a0:	f000 fcf8 	bl	8001294 <HAL_GPIO_WritePin>

    // 3. Включаем питание датчика, если указаны порт и пин
    if (muxChannels[channel].power_port != NULL) {
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	491a      	ldr	r1, [pc, #104]	@ (8000910 <SelectMuxChannel+0x124>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	3304      	adds	r3, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d015      	beq.n	80008e6 <SelectMuxChannel+0xfa>
        HAL_GPIO_WritePin(muxChannels[channel].power_port, muxChannels[channel].power_pin, GPIO_PIN_SET);
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4914      	ldr	r1, [pc, #80]	@ (8000910 <SelectMuxChannel+0x124>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	3304      	adds	r3, #4
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	4910      	ldr	r1, [pc, #64]	@ (8000910 <SelectMuxChannel+0x124>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	f000 fcd7 	bl	8001294 <HAL_GPIO_WritePin>
    }

    // 4. Задержка для стабилизации
    for (volatile int i = 0; i < 10000; i++);
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e002      	b.n	80008f2 <SelectMuxChannel+0x106>
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008f8:	4293      	cmp	r3, r2
 80008fa:	ddf7      	ble.n	80008ec <SelectMuxChannel+0x100>
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010c00 	.word	0x40010c00
 800090c:	40010800 	.word	0x40010800
 8000910:	080034d8 	.word	0x080034d8

08000914 <PrintSensorFrequencies>:


void PrintSensorFrequencies() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	@ 0x58
 8000918:	af02      	add	r7, sp, #8
    char buffer[64]; // Буфер для формирования строки

    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800091e:	e018      	b.n	8000952 <PrintSensorFrequencies+0x3e>
        // Форматируем строку для каждого датчика
        int len = snprintf(buffer, sizeof(buffer), "Датчик %d: частота %lu Гц\r\n",
 8000920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	4916      	ldr	r1, [pc, #88]	@ (8000980 <PrintSensorFrequencies+0x6c>)
 8000926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000928:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800092c:	1d38      	adds	r0, r7, #4
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	4a14      	ldr	r2, [pc, #80]	@ (8000984 <PrintSensorFrequencies+0x70>)
 8000934:	2140      	movs	r1, #64	@ 0x40
 8000936:	f002 f8cd 	bl	8002ad4 <sniprintf>
 800093a:	6478      	str	r0, [r7, #68]	@ 0x44
                          i + 1, frequenciesResults[i]);

        // Отправляем в UART
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800093c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800093e:	b29a      	uxth	r2, r3
 8000940:	1d39      	adds	r1, r7, #4
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	4810      	ldr	r0, [pc, #64]	@ (8000988 <PrintSensorFrequencies+0x74>)
 8000948:	f001 fef0 	bl	800272c <HAL_UART_Transmit>
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800094c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800094e:	3301      	adds	r3, #1
 8000950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000954:	2b07      	cmp	r3, #7
 8000956:	dde3      	ble.n	8000920 <PrintSensorFrequencies+0xc>
    }

    int len = snprintf(buffer, sizeof(buffer), "-------------------------\r\n\r\n");
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4a0c      	ldr	r2, [pc, #48]	@ (800098c <PrintSensorFrequencies+0x78>)
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f8b8 	bl	8002ad4 <sniprintf>
 8000964:	64b8      	str	r0, [r7, #72]	@ 0x48
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000968:	b29a      	uxth	r2, r3
 800096a:	1d39      	adds	r1, r7, #4
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <PrintSensorFrequencies+0x74>)
 8000972:	f001 fedb 	bl	800272c <HAL_UART_Transmit>
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	@ 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001d4 	.word	0x200001d4
 8000984:	0800348c 	.word	0x0800348c
 8000988:	20000150 	.word	0x20000150
 800098c:	080034b8 	.word	0x080034b8

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a14      	ldr	r2, [pc, #80]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a0e      	ldr	r2, [pc, #56]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_MspInit+0x60>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_MspInit+0x60>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010000 	.word	0x40010000

08000a00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac8 <HAL_TIM_Base_MspInit+0xc8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d114      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a20:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a29      	ldr	r2, [pc, #164]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2019      	movs	r0, #25
 8000a3e:	f000 fa6e 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 fa87 	bl	8000f56 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a48:	e03a      	b.n	8000ac0 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a52:	d124      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a16      	ldr	r2, [pc, #88]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	4619      	mov	r1, r3
 8000a96:	480e      	ldr	r0, [pc, #56]	@ (8000ad0 <HAL_TIM_Base_MspInit+0xd0>)
 8000a98:	f000 fa78 	bl	8000f8c <HAL_GPIO_Init>
}
 8000a9c:	e010      	b.n	8000ac0 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <HAL_TIM_Base_MspInit+0xd4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d10b      	bne.n	8000ac0 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	61d3      	str	r3, [r2, #28]
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <HAL_TIM_Base_MspInit+0xcc>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	@ 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40000400 	.word	0x40000400

08000ad8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d12f      	bne.n	8000b58 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b02:	61d3      	str	r3, [r2, #28]
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480b      	ldr	r0, [pc, #44]	@ (8000b68 <HAL_UART_MspInit+0x90>)
 8000b3c:	f000 fa26 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b40:	2308      	movs	r3, #8
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_UART_MspInit+0x90>)
 8000b54:	f000 fa1a 	bl	8000f8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8bc 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f000 fb7b 	bl	80012c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//    char msg[64];
//    int len = snprintf(msg, sizeof(msg), "РАБОТАЕТ!!!");
//    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM1_UP_IRQHandler+0x10>)
 8000bda:	f001 f934 	bl	8001e46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000078 	.word	0x20000078

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f001 ff9a 	bl	8002b50 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20005000 	.word	0x20005000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	200001f4 	.word	0x200001f4
 8000c50:	20000348 	.word	0x20000348

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff fff8 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c66:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c68:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c7c:	4c09      	ldr	r4, [pc, #36]	@ (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f001 ff67 	bl	8002b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fa5d 	bl	800014c <main>
  bx lr
 8000c92:	4770      	bx	lr
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c9c:	08003600 	.word	0x08003600
  ldr r2, =_sbss
 8000ca0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ca4:	20000344 	.word	0x20000344

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_Init+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_Init+0x28>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f923 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe68 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f93b 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f903 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	@ (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a03      	ldr	r2, [pc, #12]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200001f8 	.word	0x200001f8

08000d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b02      	ldr	r3, [pc, #8]	@ (8000d6c <HAL_GetTick+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	200001f8 	.word	0x200001f8

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4906      	ldr	r1, [pc, #24]	@ (8000e08 <__NVIC_EnableIRQ+0x34>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff90 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff2d 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff42 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff90 	bl	8000e60 <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5f 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff35 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b08b      	sub	sp, #44	@ 0x2c
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e169      	b.n	8001274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8158 	bne.w	800126e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d05e      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a98      	ldr	r2, [pc, #608]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d875      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fce:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d058      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a96      	ldr	r2, [pc, #600]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d86f      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fda:	4a96      	ldr	r2, [pc, #600]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d052      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a94      	ldr	r2, [pc, #592]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d869      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fe6:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fec:	4a92      	ldr	r2, [pc, #584]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d863      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ff2:	4a92      	ldr	r2, [pc, #584]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d046      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a90      	ldr	r2, [pc, #576]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d85d      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d82a      	bhi.n	8001058 <HAL_GPIO_Init+0xcc>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d859      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8001006:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <HAL_GPIO_Init+0x80>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001087 	.word	0x08001087
 8001010:	08001061 	.word	0x08001061
 8001014:	08001073 	.word	0x08001073
 8001018:	080010b5 	.word	0x080010b5
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	080010bb 	.word	0x080010bb
 800104c:	080010bb 	.word	0x080010bb
 8001050:	08001069 	.word	0x08001069
 8001054:	0800107d 	.word	0x0800107d
 8001058:	4a79      	ldr	r2, [pc, #484]	@ (8001240 <HAL_GPIO_Init+0x2b4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105e:	e02c      	b.n	80010ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e029      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e024      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e01f      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	330c      	adds	r3, #12
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108e:	2304      	movs	r3, #4
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e013      	b.n	80010bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	611a      	str	r2, [r3, #16]
          break;
 80010a6:	e009      	b.n	80010bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	615a      	str	r2, [r3, #20]
          break;
 80010b2:	e003      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x130>
          break;
 80010ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	@ 0xff
 80010c0:	d801      	bhi.n	80010c6 <HAL_GPIO_Init+0x13a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_Init+0x13e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	@ 0xff
 80010d0:	d802      	bhi.n	80010d8 <HAL_GPIO_Init+0x14c>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x152>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	3b08      	subs	r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	6a39      	ldr	r1, [r7, #32]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80b1 	beq.w	800126e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001124:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a40      	ldr	r2, [pc, #256]	@ (800124c <HAL_GPIO_Init+0x2c0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <HAL_GPIO_Init+0x2c4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_GPIO_Init+0x2c8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1e4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <HAL_GPIO_Init+0x2cc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1e0>
 8001168:	2303      	movs	r3, #3
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 800116c:	2304      	movs	r3, #4
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	492c      	ldr	r1, [pc, #176]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4928      	ldr	r1, [pc, #160]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4922      	ldr	r1, [pc, #136]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491e      	ldr	r1, [pc, #120]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4918      	ldr	r1, [pc, #96]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4914      	ldr	r1, [pc, #80]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	490e      	ldr	r1, [pc, #56]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x2e2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	43db      	mvns	r3, r3
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <HAL_GPIO_Init+0x304>)
 800126a:	4013      	ands	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f ae8e 	bne.w	8000fa0 <HAL_GPIO_Init+0x14>
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	372c      	adds	r7, #44	@ 0x2c
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	611a      	str	r2, [r3, #16]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fa2a 	bl	800073c <HAL_GPIO_EXTI_Callback>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e272      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b92      	ldr	r3, [pc, #584]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001320:	4b8f      	ldr	r3, [pc, #572]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
 800132c:	4b8c      	ldr	r3, [pc, #560]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b89      	ldr	r3, [pc, #548]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x12c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e24c      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x76>
 800135c:	4b80      	ldr	r3, [pc, #512]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a7f      	ldr	r2, [pc, #508]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b7b      	ldr	r3, [pc, #492]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7a      	ldr	r2, [pc, #488]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b78      	ldr	r3, [pc, #480]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a77      	ldr	r2, [pc, #476]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xbc>
 8001396:	4b72      	ldr	r3, [pc, #456]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a71      	ldr	r2, [pc, #452]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 80013b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b68      	ldr	r3, [pc, #416]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a67      	ldr	r2, [pc, #412]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fcc4 	bl	8000d5c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fcc0 	bl	8000d5c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e200      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe4>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcb0 	bl	8000d5c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fcac 	bl	8000d5c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1ec      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b53      	ldr	r3, [pc, #332]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x10c>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b4c      	ldr	r3, [pc, #304]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800143a:	4b49      	ldr	r3, [pc, #292]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
 8001446:	4b46      	ldr	r3, [pc, #280]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b43      	ldr	r3, [pc, #268]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c0      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4939      	ldr	r1, [pc, #228]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x270>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fc65 	bl	8000d5c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fc61 	bl	8000d5c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4927      	ldr	r1, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_RCC_OscConfig+0x270>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc44 	bl	8000d5c <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc40 	bl	8000d5c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e180      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03a      	beq.n	8001578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <HAL_RCC_OscConfig+0x274>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fc24 	bl	8000d5c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fc20 	bl	8000d5c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e160      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f000 face 	bl	8001ad8 <RCC_Delay>
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_RCC_OscConfig+0x274>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fc0a 	bl	8000d5c <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154a:	e00f      	b.n	800156c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fc06 	bl	8000d5c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d908      	bls.n	800156c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e146      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	42420000 	.word	0x42420000
 8001568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b92      	ldr	r3, [pc, #584]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e9      	bne.n	800154c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a6 	beq.w	80016d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b8b      	ldr	r3, [pc, #556]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b88      	ldr	r3, [pc, #544]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a87      	ldr	r2, [pc, #540]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b85      	ldr	r3, [pc, #532]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7e      	ldr	r2, [pc, #504]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbc7 	bl	8000d5c <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fbc3 	bl	8000d5c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b64      	cmp	r3, #100	@ 0x64
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e103      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x312>
 80015f8:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a6e      	ldr	r2, [pc, #440]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e02d      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x334>
 800160e:	4b6a      	ldr	r3, [pc, #424]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a69      	ldr	r2, [pc, #420]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4b67      	ldr	r3, [pc, #412]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a66      	ldr	r2, [pc, #408]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e01c      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d10c      	bne.n	800164a <HAL_RCC_OscConfig+0x356>
 8001630:	4b61      	ldr	r3, [pc, #388]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a60      	ldr	r2, [pc, #384]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	4b5e      	ldr	r3, [pc, #376]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a5d      	ldr	r2, [pc, #372]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 800164a:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a5a      	ldr	r2, [pc, #360]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4b58      	ldr	r3, [pc, #352]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a57      	ldr	r2, [pc, #348]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d015      	beq.n	8001696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fb77 	bl	8000d5c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fb73 	bl	8000d5c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0b1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <HAL_RCC_OscConfig+0x37e>
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb61 	bl	8000d5c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fb5d 	bl	8000d5c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e09b      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	4b40      	ldr	r3, [pc, #256]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ee      	bne.n	800169e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a3b      	ldr	r2, [pc, #236]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	4b36      	ldr	r3, [pc, #216]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d061      	beq.n	80017ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d146      	bne.n	800177e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb31 	bl	8000d5c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb2d 	bl	8000d5c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e06d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001726:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4921      	ldr	r1, [pc, #132]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a19      	ldr	r1, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	430b      	orrs	r3, r1
 800174a:	491b      	ldr	r1, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fb01 	bl	8000d5c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fafd 	bl	8000d5c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e03d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x46a>
 800177c:	e035      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff faea 	bl	8000d5c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fae6 	bl	8000d5c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e026      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x498>
 80017aa:	e01e      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e019      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_OscConfig+0x500>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4965      	ldr	r1, [pc, #404]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800185e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff fa38 	bl	8000d5c <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff fa34 	bl	8000d5c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4922      	ldr	r1, [pc, #136]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	@ (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x1cc>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_ClockConfig+0x1d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f996 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08003598 	.word	0x08003598
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x30>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x36>
 80019fa:	e027      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fe:	613b      	str	r3, [r7, #16]
      break;
 8001a00:	e027      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0c9b      	lsrs	r3, r3, #18
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d010      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0c5b      	lsrs	r3, r3, #17
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2e:	fb03 f202 	mul.w	r2, r3, r2
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e004      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	613b      	str	r3, [r7, #16]
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4e:	613b      	str	r3, [r7, #16]
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	693b      	ldr	r3, [r7, #16]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	080035b0 	.word	0x080035b0
 8001a6c:	080035c0 	.word	0x080035c0
 8001a70:	003d0900 	.word	0x003d0900

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	@ (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	080035a8 	.word	0x080035a8

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0adb      	lsrs	r3, r3, #11
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	080035a8 	.word	0x080035a8

08001ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <RCC_Delay+0x34>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <RCC_Delay+0x38>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af4:	bf00      	nop
  }
  while (Delay --);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <RCC_Delay+0x1c>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e041      	b.n	8001baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe ff60 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 fb94 	bl	8002280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d001      	beq.n	8001bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <HAL_TIM_Base_Start+0x88>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <HAL_TIM_Base_Start+0x48>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be6:	d009      	beq.n	8001bfc <HAL_TIM_Base_Start+0x48>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_TIM_Base_Start+0x8c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_Base_Start+0x48>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a13      	ldr	r2, [pc, #76]	@ (8001c44 <HAL_TIM_Base_Start+0x90>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d010      	beq.n	8001c30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1e:	e007      	b.n	8001c30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800

08001c48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <HAL_TIM_Base_Stop+0x38>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	f240 4344 	movw	r3, #1092	@ 0x444
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_Base_Stop+0x38>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d001      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e03a      	b.n	8001d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <HAL_TIM_Base_Start_IT+0x98>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x58>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x58>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x58>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a13      	ldr	r2, [pc, #76]	@ (8001d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d010      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e007      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40000800 	.word	0x40000800

08001d38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10f      	bne.n	8001d80 <HAL_TIM_Base_Stop_IT+0x48>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	f240 4344 	movw	r3, #1092	@ 0x444
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_TIM_Base_Stop_IT+0x48>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e041      	b.n	8001e2c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f839 	bl	8001e34 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	f000 fa53 	bl	8002280 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0208 	bic.w	r2, r2, #8
 8001de8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01b      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0202 	mvn.w	r2, #2
 8001e7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f9da 	bl	800224a <HAL_TIM_IC_CaptureCallback>
 8001e96:	e005      	b.n	8001ea4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f9cd 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f9dc 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01b      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f06f 0204 	mvn.w	r2, #4
 8001ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f9b4 	bl	800224a <HAL_TIM_IC_CaptureCallback>
 8001ee2:	e005      	b.n	8001ef0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f9a7 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f9b6 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01b      	beq.n	8001f42 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0208 	mvn.w	r2, #8
 8001f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2204      	movs	r2, #4
 8001f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f98e 	bl	800224a <HAL_TIM_IC_CaptureCallback>
 8001f2e:	e005      	b.n	8001f3c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f981 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f990 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01b      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0210 	mvn.w	r2, #16
 8001f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2208      	movs	r2, #8
 8001f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f968 	bl	800224a <HAL_TIM_IC_CaptureCallback>
 8001f7a:	e005      	b.n	8001f88 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f95b 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f96a 	bl	800225c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0201 	mvn.w	r2, #1
 8001faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fae9 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00c      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fb52 	bl	800267a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f93a 	bl	800226e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00c      	beq.n	800201e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0220 	mvn.w	r2, #32
 8002016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fb25 	bl	8002668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_TIM_ConfigClockSource+0x1c>
 800203e:	2302      	movs	r3, #2
 8002040:	e0b4      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x186>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002060:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002068:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800207a:	d03e      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0xd4>
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002080:	f200 8087 	bhi.w	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002088:	f000 8086 	beq.w	8002198 <HAL_TIM_ConfigClockSource+0x172>
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002090:	d87f      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 8002092:	2b70      	cmp	r3, #112	@ 0x70
 8002094:	d01a      	beq.n	80020cc <HAL_TIM_ConfigClockSource+0xa6>
 8002096:	2b70      	cmp	r3, #112	@ 0x70
 8002098:	d87b      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 800209a:	2b60      	cmp	r3, #96	@ 0x60
 800209c:	d050      	beq.n	8002140 <HAL_TIM_ConfigClockSource+0x11a>
 800209e:	2b60      	cmp	r3, #96	@ 0x60
 80020a0:	d877      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 80020a2:	2b50      	cmp	r3, #80	@ 0x50
 80020a4:	d03c      	beq.n	8002120 <HAL_TIM_ConfigClockSource+0xfa>
 80020a6:	2b50      	cmp	r3, #80	@ 0x50
 80020a8:	d873      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 80020aa:	2b40      	cmp	r3, #64	@ 0x40
 80020ac:	d058      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0x13a>
 80020ae:	2b40      	cmp	r3, #64	@ 0x40
 80020b0:	d86f      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 80020b2:	2b30      	cmp	r3, #48	@ 0x30
 80020b4:	d064      	beq.n	8002180 <HAL_TIM_ConfigClockSource+0x15a>
 80020b6:	2b30      	cmp	r3, #48	@ 0x30
 80020b8:	d86b      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d060      	beq.n	8002180 <HAL_TIM_ConfigClockSource+0x15a>
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d867      	bhi.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d05c      	beq.n	8002180 <HAL_TIM_ConfigClockSource+0x15a>
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d05a      	beq.n	8002180 <HAL_TIM_ConfigClockSource+0x15a>
 80020ca:	e062      	b.n	8002192 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020dc:	f000 fa46 	bl	800256c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	609a      	str	r2, [r3, #8]
      break;
 80020f8:	e04f      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800210a:	f000 fa2f 	bl	800256c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800211c:	609a      	str	r2, [r3, #8]
      break;
 800211e:	e03c      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212c:	461a      	mov	r2, r3
 800212e:	f000 f9a6 	bl	800247e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2150      	movs	r1, #80	@ 0x50
 8002138:	4618      	mov	r0, r3
 800213a:	f000 f9fd 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 800213e:	e02c      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214c:	461a      	mov	r2, r3
 800214e:	f000 f9c4 	bl	80024da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2160      	movs	r1, #96	@ 0x60
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f9ed 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 800215e:	e01c      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216c:	461a      	mov	r2, r3
 800216e:	f000 f986 	bl	800247e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2140      	movs	r1, #64	@ 0x40
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f9dd 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 800217e:	e00c      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 f9d4 	bl	8002538 <TIM_ITRx_SetConfig>
      break;
 8002190:	e003      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
      break;
 8002196:	e000      	b.n	800219a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002198:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e031      	b.n	8002230 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80021dc:	6839      	ldr	r1, [r7, #0]
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8bc 	bl	800235c <TIM_SlaveTimer_SetConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e018      	b.n	8002230 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800220c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800221c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2f      	ldr	r2, [pc, #188]	@ (8002350 <TIM_Base_SetConfig+0xd0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00b      	beq.n	80022b0 <TIM_Base_SetConfig+0x30>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229e:	d007      	beq.n	80022b0 <TIM_Base_SetConfig+0x30>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <TIM_Base_SetConfig+0xd4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0x30>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <TIM_Base_SetConfig+0xd8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a22      	ldr	r2, [pc, #136]	@ (8002350 <TIM_Base_SetConfig+0xd0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00b      	beq.n	80022e2 <TIM_Base_SetConfig+0x62>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d0:	d007      	beq.n	80022e2 <TIM_Base_SetConfig+0x62>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <TIM_Base_SetConfig+0xd4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d003      	beq.n	80022e2 <TIM_Base_SetConfig+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002358 <TIM_Base_SetConfig+0xd8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d108      	bne.n	80022f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <TIM_Base_SetConfig+0xd0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d103      	bne.n	8002328 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
  }
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800

0800235c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002378:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f023 0307 	bic.w	r3, r3, #7
 800238a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b70      	cmp	r3, #112	@ 0x70
 80023a4:	d01a      	beq.n	80023dc <TIM_SlaveTimer_SetConfig+0x80>
 80023a6:	2b70      	cmp	r3, #112	@ 0x70
 80023a8:	d860      	bhi.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
 80023aa:	2b60      	cmp	r3, #96	@ 0x60
 80023ac:	d054      	beq.n	8002458 <TIM_SlaveTimer_SetConfig+0xfc>
 80023ae:	2b60      	cmp	r3, #96	@ 0x60
 80023b0:	d85c      	bhi.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
 80023b2:	2b50      	cmp	r3, #80	@ 0x50
 80023b4:	d046      	beq.n	8002444 <TIM_SlaveTimer_SetConfig+0xe8>
 80023b6:	2b50      	cmp	r3, #80	@ 0x50
 80023b8:	d858      	bhi.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
 80023ba:	2b40      	cmp	r3, #64	@ 0x40
 80023bc:	d019      	beq.n	80023f2 <TIM_SlaveTimer_SetConfig+0x96>
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	d854      	bhi.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
 80023c2:	2b30      	cmp	r3, #48	@ 0x30
 80023c4:	d055      	beq.n	8002472 <TIM_SlaveTimer_SetConfig+0x116>
 80023c6:	2b30      	cmp	r3, #48	@ 0x30
 80023c8:	d850      	bhi.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d051      	beq.n	8002472 <TIM_SlaveTimer_SetConfig+0x116>
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d84c      	bhi.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d04d      	beq.n	8002472 <TIM_SlaveTimer_SetConfig+0x116>
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d04b      	beq.n	8002472 <TIM_SlaveTimer_SetConfig+0x116>
 80023da:	e047      	b.n	800246c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80023ec:	f000 f8be 	bl	800256c <TIM_ETR_SetConfig>
      break;
 80023f0:	e040      	b.n	8002474 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d101      	bne.n	80023fe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e03b      	b.n	8002476 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002424:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4313      	orrs	r3, r2
 8002430:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
      break;
 8002442:	e017      	b.n	8002474 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002450:	461a      	mov	r2, r3
 8002452:	f000 f814 	bl	800247e <TIM_TI1_ConfigInputStage>
      break;
 8002456:	e00d      	b.n	8002474 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002464:	461a      	mov	r2, r3
 8002466:	f000 f838 	bl	80024da <TIM_TI2_ConfigInputStage>
      break;
 800246a:	e003      	b.n	8002474 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	75fb      	strb	r3, [r7, #23]
      break;
 8002470:	e000      	b.n	8002474 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002472:	bf00      	nop
  }

  return status;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f023 0201 	bic.w	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 030a 	bic.w	r3, r3, #10
 80024ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f023 0210 	bic.w	r2, r3, #16
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	031b      	lsls	r3, r3, #12
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	f043 0307 	orr.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	609a      	str	r2, [r3, #8]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	021a      	lsls	r2, r3, #8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	431a      	orrs	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	609a      	str	r2, [r3, #8]
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e046      	b.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a16      	ldr	r2, [pc, #88]	@ (800265c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00e      	beq.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002610:	d009      	beq.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a10      	ldr	r2, [pc, #64]	@ (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10c      	bne.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800262c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4313      	orrs	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800

08002668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e042      	b.n	8002724 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fa10 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f971 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	d175      	bne.n	8002838 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_UART_Transmit+0x2c>
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06e      	b.n	800283a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2221      	movs	r2, #33	@ 0x21
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276a:	f7fe faf7 	bl	8000d5c <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002784:	d108      	bne.n	8002798 <HAL_UART_Transmit+0x6c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	e003      	b.n	80027a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a0:	e02e      	b.n	8002800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f848 	bl	8002842 <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e03a      	b.n	800283a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3302      	adds	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	e007      	b.n	80027f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cb      	bne.n	80027a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	@ 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f814 	bl	8002842 <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e006      	b.n	800283a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002852:	e03b      	b.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d037      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe fa7e 	bl	8000d5c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <UART_WaitOnFlagUntilTimeout+0x30>
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e03a      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b80      	cmp	r3, #128	@ 0x80
 8002888:	d020      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b40      	cmp	r3, #64	@ 0x40
 800288e:	d01d      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d116      	bne.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f81d 	bl	80028f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2208      	movs	r2, #8
 80028be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e00f      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d0b4      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b095      	sub	sp, #84	@ 0x54
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002906:	e853 3f00 	ldrex	r3, [r3]
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800291c:	643a      	str	r2, [r7, #64]	@ 0x40
 800291e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002924:	e841 2300 	strex	r3, r2, [r1]
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e5      	bne.n	80028fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3314      	adds	r3, #20
 8002936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e5      	bne.n	8002930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	2b01      	cmp	r3, #1
 800296a:	d119      	bne.n	80029a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	60bb      	str	r3, [r7, #8]
   return(result);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f023 0310 	bic.w	r3, r3, #16
 8002982:	647b      	str	r3, [r7, #68]	@ 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800298c:	61ba      	str	r2, [r7, #24]
 800298e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	613b      	str	r3, [r7, #16]
   return(result);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029ae:	bf00      	nop
 80029b0:	3754      	adds	r7, #84	@ 0x54
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029f2:	f023 030c 	bic.w	r3, r3, #12
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002acc <UART_SetConfig+0x114>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d103      	bne.n	8002a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a20:	f7ff f846 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	e002      	b.n	8002a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a28:	f7ff f82e 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <UART_SetConfig+0x118>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	0119      	lsls	r1, r3, #4
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <UART_SetConfig+0x118>)
 8002a66:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2064      	movs	r0, #100	@ 0x64
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	3332      	adds	r3, #50	@ 0x32
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <UART_SetConfig+0x118>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a84:	4419      	add	r1, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <UART_SetConfig+0x118>)
 8002a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2064      	movs	r0, #100	@ 0x64
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	@ 0x32
 8002ab0:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <UART_SetConfig+0x118>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <sniprintf>:
 8002ad4:	b40c      	push	{r2, r3}
 8002ad6:	b530      	push	{r4, r5, lr}
 8002ad8:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <sniprintf+0x68>)
 8002ada:	1e0c      	subs	r4, r1, #0
 8002adc:	681d      	ldr	r5, [r3, #0]
 8002ade:	b09d      	sub	sp, #116	@ 0x74
 8002ae0:	da08      	bge.n	8002af4 <sniprintf+0x20>
 8002ae2:	238b      	movs	r3, #139	@ 0x8b
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	602b      	str	r3, [r5, #0]
 8002aea:	b01d      	add	sp, #116	@ 0x74
 8002aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002af0:	b002      	add	sp, #8
 8002af2:	4770      	bx	lr
 8002af4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002b02:	bf0c      	ite	eq
 8002b04:	4623      	moveq	r3, r4
 8002b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	9307      	str	r3, [sp, #28]
 8002b0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b12:	9002      	str	r0, [sp, #8]
 8002b14:	9006      	str	r0, [sp, #24]
 8002b16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	ab21      	add	r3, sp, #132	@ 0x84
 8002b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b20:	a902      	add	r1, sp, #8
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	f000 f992 	bl	8002e4c <_svfiprintf_r>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	bfbc      	itt	lt
 8002b2c:	238b      	movlt	r3, #139	@ 0x8b
 8002b2e:	602b      	strlt	r3, [r5, #0]
 8002b30:	2c00      	cmp	r4, #0
 8002b32:	d0da      	beq.n	8002aea <sniprintf+0x16>
 8002b34:	2200      	movs	r2, #0
 8002b36:	9b02      	ldr	r3, [sp, #8]
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e7d6      	b.n	8002aea <sniprintf+0x16>
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <memset>:
 8002b40:	4603      	mov	r3, r0
 8002b42:	4402      	add	r2, r0
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d100      	bne.n	8002b4a <memset+0xa>
 8002b48:	4770      	bx	lr
 8002b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4e:	e7f9      	b.n	8002b44 <memset+0x4>

08002b50 <__errno>:
 8002b50:	4b01      	ldr	r3, [pc, #4]	@ (8002b58 <__errno+0x8>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c

08002b5c <__libc_init_array>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	2600      	movs	r6, #0
 8002b60:	4d0c      	ldr	r5, [pc, #48]	@ (8002b94 <__libc_init_array+0x38>)
 8002b62:	4c0d      	ldr	r4, [pc, #52]	@ (8002b98 <__libc_init_array+0x3c>)
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	42a6      	cmp	r6, r4
 8002b6a:	d109      	bne.n	8002b80 <__libc_init_array+0x24>
 8002b6c:	f000 fc76 	bl	800345c <_init>
 8002b70:	2600      	movs	r6, #0
 8002b72:	4d0a      	ldr	r5, [pc, #40]	@ (8002b9c <__libc_init_array+0x40>)
 8002b74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba0 <__libc_init_array+0x44>)
 8002b76:	1b64      	subs	r4, r4, r5
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	42a6      	cmp	r6, r4
 8002b7c:	d105      	bne.n	8002b8a <__libc_init_array+0x2e>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b84:	4798      	blx	r3
 8002b86:	3601      	adds	r6, #1
 8002b88:	e7ee      	b.n	8002b68 <__libc_init_array+0xc>
 8002b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8e:	4798      	blx	r3
 8002b90:	3601      	adds	r6, #1
 8002b92:	e7f2      	b.n	8002b7a <__libc_init_array+0x1e>
 8002b94:	080035f8 	.word	0x080035f8
 8002b98:	080035f8 	.word	0x080035f8
 8002b9c:	080035f8 	.word	0x080035f8
 8002ba0:	080035fc 	.word	0x080035fc

08002ba4 <__retarget_lock_acquire_recursive>:
 8002ba4:	4770      	bx	lr

08002ba6 <__retarget_lock_release_recursive>:
 8002ba6:	4770      	bx	lr

08002ba8 <_free_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4605      	mov	r5, r0
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d040      	beq.n	8002c32 <_free_r+0x8a>
 8002bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bb4:	1f0c      	subs	r4, r1, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bfb8      	it	lt
 8002bba:	18e4      	addlt	r4, r4, r3
 8002bbc:	f000 f8de 	bl	8002d7c <__malloc_lock>
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <_free_r+0x8c>)
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	b933      	cbnz	r3, 8002bd4 <_free_r+0x2c>
 8002bc6:	6063      	str	r3, [r4, #4]
 8002bc8:	6014      	str	r4, [r2, #0]
 8002bca:	4628      	mov	r0, r5
 8002bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bd0:	f000 b8da 	b.w	8002d88 <__malloc_unlock>
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	d908      	bls.n	8002bea <_free_r+0x42>
 8002bd8:	6820      	ldr	r0, [r4, #0]
 8002bda:	1821      	adds	r1, r4, r0
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	bf01      	itttt	eq
 8002be0:	6819      	ldreq	r1, [r3, #0]
 8002be2:	685b      	ldreq	r3, [r3, #4]
 8002be4:	1809      	addeq	r1, r1, r0
 8002be6:	6021      	streq	r1, [r4, #0]
 8002be8:	e7ed      	b.n	8002bc6 <_free_r+0x1e>
 8002bea:	461a      	mov	r2, r3
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	b10b      	cbz	r3, 8002bf4 <_free_r+0x4c>
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	d9fa      	bls.n	8002bea <_free_r+0x42>
 8002bf4:	6811      	ldr	r1, [r2, #0]
 8002bf6:	1850      	adds	r0, r2, r1
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d10b      	bne.n	8002c14 <_free_r+0x6c>
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	4401      	add	r1, r0
 8002c00:	1850      	adds	r0, r2, r1
 8002c02:	4283      	cmp	r3, r0
 8002c04:	6011      	str	r1, [r2, #0]
 8002c06:	d1e0      	bne.n	8002bca <_free_r+0x22>
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4408      	add	r0, r1
 8002c0e:	6010      	str	r0, [r2, #0]
 8002c10:	6053      	str	r3, [r2, #4]
 8002c12:	e7da      	b.n	8002bca <_free_r+0x22>
 8002c14:	d902      	bls.n	8002c1c <_free_r+0x74>
 8002c16:	230c      	movs	r3, #12
 8002c18:	602b      	str	r3, [r5, #0]
 8002c1a:	e7d6      	b.n	8002bca <_free_r+0x22>
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	1821      	adds	r1, r4, r0
 8002c20:	428b      	cmp	r3, r1
 8002c22:	bf01      	itttt	eq
 8002c24:	6819      	ldreq	r1, [r3, #0]
 8002c26:	685b      	ldreq	r3, [r3, #4]
 8002c28:	1809      	addeq	r1, r1, r0
 8002c2a:	6021      	streq	r1, [r4, #0]
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	6054      	str	r4, [r2, #4]
 8002c30:	e7cb      	b.n	8002bca <_free_r+0x22>
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	20000340 	.word	0x20000340

08002c38 <sbrk_aligned>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c78 <sbrk_aligned+0x40>)
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	6831      	ldr	r1, [r6, #0]
 8002c40:	4605      	mov	r5, r0
 8002c42:	b911      	cbnz	r1, 8002c4a <sbrk_aligned+0x12>
 8002c44:	f000 fba8 	bl	8003398 <_sbrk_r>
 8002c48:	6030      	str	r0, [r6, #0]
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 fba3 	bl	8003398 <_sbrk_r>
 8002c52:	1c43      	adds	r3, r0, #1
 8002c54:	d103      	bne.n	8002c5e <sbrk_aligned+0x26>
 8002c56:	f04f 34ff 	mov.w	r4, #4294967295
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
 8002c5e:	1cc4      	adds	r4, r0, #3
 8002c60:	f024 0403 	bic.w	r4, r4, #3
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d0f8      	beq.n	8002c5a <sbrk_aligned+0x22>
 8002c68:	1a21      	subs	r1, r4, r0
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f000 fb94 	bl	8003398 <_sbrk_r>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d1f2      	bne.n	8002c5a <sbrk_aligned+0x22>
 8002c74:	e7ef      	b.n	8002c56 <sbrk_aligned+0x1e>
 8002c76:	bf00      	nop
 8002c78:	2000033c 	.word	0x2000033c

08002c7c <_malloc_r>:
 8002c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c80:	1ccd      	adds	r5, r1, #3
 8002c82:	f025 0503 	bic.w	r5, r5, #3
 8002c86:	3508      	adds	r5, #8
 8002c88:	2d0c      	cmp	r5, #12
 8002c8a:	bf38      	it	cc
 8002c8c:	250c      	movcc	r5, #12
 8002c8e:	2d00      	cmp	r5, #0
 8002c90:	4606      	mov	r6, r0
 8002c92:	db01      	blt.n	8002c98 <_malloc_r+0x1c>
 8002c94:	42a9      	cmp	r1, r5
 8002c96:	d904      	bls.n	8002ca2 <_malloc_r+0x26>
 8002c98:	230c      	movs	r3, #12
 8002c9a:	6033      	str	r3, [r6, #0]
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d78 <_malloc_r+0xfc>
 8002ca6:	f000 f869 	bl	8002d7c <__malloc_lock>
 8002caa:	f8d8 3000 	ldr.w	r3, [r8]
 8002cae:	461c      	mov	r4, r3
 8002cb0:	bb44      	cbnz	r4, 8002d04 <_malloc_r+0x88>
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f7ff ffbf 	bl	8002c38 <sbrk_aligned>
 8002cba:	1c43      	adds	r3, r0, #1
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	d158      	bne.n	8002d72 <_malloc_r+0xf6>
 8002cc0:	f8d8 4000 	ldr.w	r4, [r8]
 8002cc4:	4627      	mov	r7, r4
 8002cc6:	2f00      	cmp	r7, #0
 8002cc8:	d143      	bne.n	8002d52 <_malloc_r+0xd6>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d04b      	beq.n	8002d66 <_malloc_r+0xea>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	4639      	mov	r1, r7
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	eb04 0903 	add.w	r9, r4, r3
 8002cd8:	f000 fb5e 	bl	8003398 <_sbrk_r>
 8002cdc:	4581      	cmp	r9, r0
 8002cde:	d142      	bne.n	8002d66 <_malloc_r+0xea>
 8002ce0:	6821      	ldr	r1, [r4, #0]
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	1a6d      	subs	r5, r5, r1
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	f7ff ffa6 	bl	8002c38 <sbrk_aligned>
 8002cec:	3001      	adds	r0, #1
 8002cee:	d03a      	beq.n	8002d66 <_malloc_r+0xea>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	442b      	add	r3, r5
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	bb62      	cbnz	r2, 8002d58 <_malloc_r+0xdc>
 8002cfe:	f8c8 7000 	str.w	r7, [r8]
 8002d02:	e00f      	b.n	8002d24 <_malloc_r+0xa8>
 8002d04:	6822      	ldr	r2, [r4, #0]
 8002d06:	1b52      	subs	r2, r2, r5
 8002d08:	d420      	bmi.n	8002d4c <_malloc_r+0xd0>
 8002d0a:	2a0b      	cmp	r2, #11
 8002d0c:	d917      	bls.n	8002d3e <_malloc_r+0xc2>
 8002d0e:	1961      	adds	r1, r4, r5
 8002d10:	42a3      	cmp	r3, r4
 8002d12:	6025      	str	r5, [r4, #0]
 8002d14:	bf18      	it	ne
 8002d16:	6059      	strne	r1, [r3, #4]
 8002d18:	6863      	ldr	r3, [r4, #4]
 8002d1a:	bf08      	it	eq
 8002d1c:	f8c8 1000 	streq.w	r1, [r8]
 8002d20:	5162      	str	r2, [r4, r5]
 8002d22:	604b      	str	r3, [r1, #4]
 8002d24:	4630      	mov	r0, r6
 8002d26:	f000 f82f 	bl	8002d88 <__malloc_unlock>
 8002d2a:	f104 000b 	add.w	r0, r4, #11
 8002d2e:	1d23      	adds	r3, r4, #4
 8002d30:	f020 0007 	bic.w	r0, r0, #7
 8002d34:	1ac2      	subs	r2, r0, r3
 8002d36:	bf1c      	itt	ne
 8002d38:	1a1b      	subne	r3, r3, r0
 8002d3a:	50a3      	strne	r3, [r4, r2]
 8002d3c:	e7af      	b.n	8002c9e <_malloc_r+0x22>
 8002d3e:	6862      	ldr	r2, [r4, #4]
 8002d40:	42a3      	cmp	r3, r4
 8002d42:	bf0c      	ite	eq
 8002d44:	f8c8 2000 	streq.w	r2, [r8]
 8002d48:	605a      	strne	r2, [r3, #4]
 8002d4a:	e7eb      	b.n	8002d24 <_malloc_r+0xa8>
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	6864      	ldr	r4, [r4, #4]
 8002d50:	e7ae      	b.n	8002cb0 <_malloc_r+0x34>
 8002d52:	463c      	mov	r4, r7
 8002d54:	687f      	ldr	r7, [r7, #4]
 8002d56:	e7b6      	b.n	8002cc6 <_malloc_r+0x4a>
 8002d58:	461a      	mov	r2, r3
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	d1fb      	bne.n	8002d58 <_malloc_r+0xdc>
 8002d60:	2300      	movs	r3, #0
 8002d62:	6053      	str	r3, [r2, #4]
 8002d64:	e7de      	b.n	8002d24 <_malloc_r+0xa8>
 8002d66:	230c      	movs	r3, #12
 8002d68:	4630      	mov	r0, r6
 8002d6a:	6033      	str	r3, [r6, #0]
 8002d6c:	f000 f80c 	bl	8002d88 <__malloc_unlock>
 8002d70:	e794      	b.n	8002c9c <_malloc_r+0x20>
 8002d72:	6005      	str	r5, [r0, #0]
 8002d74:	e7d6      	b.n	8002d24 <_malloc_r+0xa8>
 8002d76:	bf00      	nop
 8002d78:	20000340 	.word	0x20000340

08002d7c <__malloc_lock>:
 8002d7c:	4801      	ldr	r0, [pc, #4]	@ (8002d84 <__malloc_lock+0x8>)
 8002d7e:	f7ff bf11 	b.w	8002ba4 <__retarget_lock_acquire_recursive>
 8002d82:	bf00      	nop
 8002d84:	20000338 	.word	0x20000338

08002d88 <__malloc_unlock>:
 8002d88:	4801      	ldr	r0, [pc, #4]	@ (8002d90 <__malloc_unlock+0x8>)
 8002d8a:	f7ff bf0c 	b.w	8002ba6 <__retarget_lock_release_recursive>
 8002d8e:	bf00      	nop
 8002d90:	20000338 	.word	0x20000338

08002d94 <__ssputs_r>:
 8002d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d98:	461f      	mov	r7, r3
 8002d9a:	688e      	ldr	r6, [r1, #8]
 8002d9c:	4682      	mov	sl, r0
 8002d9e:	42be      	cmp	r6, r7
 8002da0:	460c      	mov	r4, r1
 8002da2:	4690      	mov	r8, r2
 8002da4:	680b      	ldr	r3, [r1, #0]
 8002da6:	d82d      	bhi.n	8002e04 <__ssputs_r+0x70>
 8002da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002db0:	d026      	beq.n	8002e00 <__ssputs_r+0x6c>
 8002db2:	6965      	ldr	r5, [r4, #20]
 8002db4:	6909      	ldr	r1, [r1, #16]
 8002db6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dba:	eba3 0901 	sub.w	r9, r3, r1
 8002dbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dc2:	1c7b      	adds	r3, r7, #1
 8002dc4:	444b      	add	r3, r9
 8002dc6:	106d      	asrs	r5, r5, #1
 8002dc8:	429d      	cmp	r5, r3
 8002dca:	bf38      	it	cc
 8002dcc:	461d      	movcc	r5, r3
 8002dce:	0553      	lsls	r3, r2, #21
 8002dd0:	d527      	bpl.n	8002e22 <__ssputs_r+0x8e>
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f7ff ff52 	bl	8002c7c <_malloc_r>
 8002dd8:	4606      	mov	r6, r0
 8002dda:	b360      	cbz	r0, 8002e36 <__ssputs_r+0xa2>
 8002ddc:	464a      	mov	r2, r9
 8002dde:	6921      	ldr	r1, [r4, #16]
 8002de0:	f000 faf8 	bl	80033d4 <memcpy>
 8002de4:	89a3      	ldrh	r3, [r4, #12]
 8002de6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dee:	81a3      	strh	r3, [r4, #12]
 8002df0:	6126      	str	r6, [r4, #16]
 8002df2:	444e      	add	r6, r9
 8002df4:	6026      	str	r6, [r4, #0]
 8002df6:	463e      	mov	r6, r7
 8002df8:	6165      	str	r5, [r4, #20]
 8002dfa:	eba5 0509 	sub.w	r5, r5, r9
 8002dfe:	60a5      	str	r5, [r4, #8]
 8002e00:	42be      	cmp	r6, r7
 8002e02:	d900      	bls.n	8002e06 <__ssputs_r+0x72>
 8002e04:	463e      	mov	r6, r7
 8002e06:	4632      	mov	r2, r6
 8002e08:	4641      	mov	r1, r8
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	f000 faaa 	bl	8003364 <memmove>
 8002e10:	2000      	movs	r0, #0
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	1b9b      	subs	r3, r3, r6
 8002e16:	60a3      	str	r3, [r4, #8]
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	4433      	add	r3, r6
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e22:	462a      	mov	r2, r5
 8002e24:	f000 fae4 	bl	80033f0 <_realloc_r>
 8002e28:	4606      	mov	r6, r0
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d1e0      	bne.n	8002df0 <__ssputs_r+0x5c>
 8002e2e:	4650      	mov	r0, sl
 8002e30:	6921      	ldr	r1, [r4, #16]
 8002e32:	f7ff feb9 	bl	8002ba8 <_free_r>
 8002e36:	230c      	movs	r3, #12
 8002e38:	f8ca 3000 	str.w	r3, [sl]
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e46:	81a3      	strh	r3, [r4, #12]
 8002e48:	e7e9      	b.n	8002e1e <__ssputs_r+0x8a>
	...

08002e4c <_svfiprintf_r>:
 8002e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e50:	4698      	mov	r8, r3
 8002e52:	898b      	ldrh	r3, [r1, #12]
 8002e54:	4607      	mov	r7, r0
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	460d      	mov	r5, r1
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	b09d      	sub	sp, #116	@ 0x74
 8002e5e:	d510      	bpl.n	8002e82 <_svfiprintf_r+0x36>
 8002e60:	690b      	ldr	r3, [r1, #16]
 8002e62:	b973      	cbnz	r3, 8002e82 <_svfiprintf_r+0x36>
 8002e64:	2140      	movs	r1, #64	@ 0x40
 8002e66:	f7ff ff09 	bl	8002c7c <_malloc_r>
 8002e6a:	6028      	str	r0, [r5, #0]
 8002e6c:	6128      	str	r0, [r5, #16]
 8002e6e:	b930      	cbnz	r0, 8002e7e <_svfiprintf_r+0x32>
 8002e70:	230c      	movs	r3, #12
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	b01d      	add	sp, #116	@ 0x74
 8002e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e7e:	2340      	movs	r3, #64	@ 0x40
 8002e80:	616b      	str	r3, [r5, #20]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e86:	2320      	movs	r3, #32
 8002e88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e8c:	2330      	movs	r3, #48	@ 0x30
 8002e8e:	f04f 0901 	mov.w	r9, #1
 8002e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003030 <_svfiprintf_r+0x1e4>
 8002e9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	469a      	mov	sl, r3
 8002ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ea6:	b10a      	cbz	r2, 8002eac <_svfiprintf_r+0x60>
 8002ea8:	2a25      	cmp	r2, #37	@ 0x25
 8002eaa:	d1f9      	bne.n	8002ea0 <_svfiprintf_r+0x54>
 8002eac:	ebba 0b04 	subs.w	fp, sl, r4
 8002eb0:	d00b      	beq.n	8002eca <_svfiprintf_r+0x7e>
 8002eb2:	465b      	mov	r3, fp
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f7ff ff6b 	bl	8002d94 <__ssputs_r>
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	f000 80a7 	beq.w	8003012 <_svfiprintf_r+0x1c6>
 8002ec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ec6:	445a      	add	r2, fp
 8002ec8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eca:	f89a 3000 	ldrb.w	r3, [sl]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 809f 	beq.w	8003012 <_svfiprintf_r+0x1c6>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ede:	f10a 0a01 	add.w	sl, sl, #1
 8002ee2:	9304      	str	r3, [sp, #16]
 8002ee4:	9307      	str	r3, [sp, #28]
 8002ee6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002eea:	931a      	str	r3, [sp, #104]	@ 0x68
 8002eec:	4654      	mov	r4, sl
 8002eee:	2205      	movs	r2, #5
 8002ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef4:	484e      	ldr	r0, [pc, #312]	@ (8003030 <_svfiprintf_r+0x1e4>)
 8002ef6:	f000 fa5f 	bl	80033b8 <memchr>
 8002efa:	9a04      	ldr	r2, [sp, #16]
 8002efc:	b9d8      	cbnz	r0, 8002f36 <_svfiprintf_r+0xea>
 8002efe:	06d0      	lsls	r0, r2, #27
 8002f00:	bf44      	itt	mi
 8002f02:	2320      	movmi	r3, #32
 8002f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f08:	0711      	lsls	r1, r2, #28
 8002f0a:	bf44      	itt	mi
 8002f0c:	232b      	movmi	r3, #43	@ 0x2b
 8002f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f12:	f89a 3000 	ldrb.w	r3, [sl]
 8002f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f18:	d015      	beq.n	8002f46 <_svfiprintf_r+0xfa>
 8002f1a:	4654      	mov	r4, sl
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f04f 0c0a 	mov.w	ip, #10
 8002f22:	9a07      	ldr	r2, [sp, #28]
 8002f24:	4621      	mov	r1, r4
 8002f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f2a:	3b30      	subs	r3, #48	@ 0x30
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d94b      	bls.n	8002fc8 <_svfiprintf_r+0x17c>
 8002f30:	b1b0      	cbz	r0, 8002f60 <_svfiprintf_r+0x114>
 8002f32:	9207      	str	r2, [sp, #28]
 8002f34:	e014      	b.n	8002f60 <_svfiprintf_r+0x114>
 8002f36:	eba0 0308 	sub.w	r3, r0, r8
 8002f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	46a2      	mov	sl, r4
 8002f42:	9304      	str	r3, [sp, #16]
 8002f44:	e7d2      	b.n	8002eec <_svfiprintf_r+0xa0>
 8002f46:	9b03      	ldr	r3, [sp, #12]
 8002f48:	1d19      	adds	r1, r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	9103      	str	r1, [sp, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bfbb      	ittet	lt
 8002f52:	425b      	neglt	r3, r3
 8002f54:	f042 0202 	orrlt.w	r2, r2, #2
 8002f58:	9307      	strge	r3, [sp, #28]
 8002f5a:	9307      	strlt	r3, [sp, #28]
 8002f5c:	bfb8      	it	lt
 8002f5e:	9204      	strlt	r2, [sp, #16]
 8002f60:	7823      	ldrb	r3, [r4, #0]
 8002f62:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f64:	d10a      	bne.n	8002f7c <_svfiprintf_r+0x130>
 8002f66:	7863      	ldrb	r3, [r4, #1]
 8002f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6a:	d132      	bne.n	8002fd2 <_svfiprintf_r+0x186>
 8002f6c:	9b03      	ldr	r3, [sp, #12]
 8002f6e:	3402      	adds	r4, #2
 8002f70:	1d1a      	adds	r2, r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	9203      	str	r2, [sp, #12]
 8002f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f7a:	9305      	str	r3, [sp, #20]
 8002f7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003034 <_svfiprintf_r+0x1e8>
 8002f80:	2203      	movs	r2, #3
 8002f82:	4650      	mov	r0, sl
 8002f84:	7821      	ldrb	r1, [r4, #0]
 8002f86:	f000 fa17 	bl	80033b8 <memchr>
 8002f8a:	b138      	cbz	r0, 8002f9c <_svfiprintf_r+0x150>
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	9b04      	ldr	r3, [sp, #16]
 8002f90:	eba0 000a 	sub.w	r0, r0, sl
 8002f94:	4082      	lsls	r2, r0
 8002f96:	4313      	orrs	r3, r2
 8002f98:	3401      	adds	r4, #1
 8002f9a:	9304      	str	r3, [sp, #16]
 8002f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa0:	2206      	movs	r2, #6
 8002fa2:	4825      	ldr	r0, [pc, #148]	@ (8003038 <_svfiprintf_r+0x1ec>)
 8002fa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fa8:	f000 fa06 	bl	80033b8 <memchr>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d036      	beq.n	800301e <_svfiprintf_r+0x1d2>
 8002fb0:	4b22      	ldr	r3, [pc, #136]	@ (800303c <_svfiprintf_r+0x1f0>)
 8002fb2:	bb1b      	cbnz	r3, 8002ffc <_svfiprintf_r+0x1b0>
 8002fb4:	9b03      	ldr	r3, [sp, #12]
 8002fb6:	3307      	adds	r3, #7
 8002fb8:	f023 0307 	bic.w	r3, r3, #7
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	9303      	str	r3, [sp, #12]
 8002fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fc2:	4433      	add	r3, r6
 8002fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fc6:	e76a      	b.n	8002e9e <_svfiprintf_r+0x52>
 8002fc8:	460c      	mov	r4, r1
 8002fca:	2001      	movs	r0, #1
 8002fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fd0:	e7a8      	b.n	8002f24 <_svfiprintf_r+0xd8>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f04f 0c0a 	mov.w	ip, #10
 8002fd8:	4619      	mov	r1, r3
 8002fda:	3401      	adds	r4, #1
 8002fdc:	9305      	str	r3, [sp, #20]
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fe4:	3a30      	subs	r2, #48	@ 0x30
 8002fe6:	2a09      	cmp	r2, #9
 8002fe8:	d903      	bls.n	8002ff2 <_svfiprintf_r+0x1a6>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0c6      	beq.n	8002f7c <_svfiprintf_r+0x130>
 8002fee:	9105      	str	r1, [sp, #20]
 8002ff0:	e7c4      	b.n	8002f7c <_svfiprintf_r+0x130>
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ffa:	e7f0      	b.n	8002fde <_svfiprintf_r+0x192>
 8002ffc:	ab03      	add	r3, sp, #12
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	462a      	mov	r2, r5
 8003002:	4638      	mov	r0, r7
 8003004:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <_svfiprintf_r+0x1f4>)
 8003006:	a904      	add	r1, sp, #16
 8003008:	f3af 8000 	nop.w
 800300c:	1c42      	adds	r2, r0, #1
 800300e:	4606      	mov	r6, r0
 8003010:	d1d6      	bne.n	8002fc0 <_svfiprintf_r+0x174>
 8003012:	89ab      	ldrh	r3, [r5, #12]
 8003014:	065b      	lsls	r3, r3, #25
 8003016:	f53f af2d 	bmi.w	8002e74 <_svfiprintf_r+0x28>
 800301a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800301c:	e72c      	b.n	8002e78 <_svfiprintf_r+0x2c>
 800301e:	ab03      	add	r3, sp, #12
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	462a      	mov	r2, r5
 8003024:	4638      	mov	r0, r7
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <_svfiprintf_r+0x1f4>)
 8003028:	a904      	add	r1, sp, #16
 800302a:	f000 f87d 	bl	8003128 <_printf_i>
 800302e:	e7ed      	b.n	800300c <_svfiprintf_r+0x1c0>
 8003030:	080035c2 	.word	0x080035c2
 8003034:	080035c8 	.word	0x080035c8
 8003038:	080035cc 	.word	0x080035cc
 800303c:	00000000 	.word	0x00000000
 8003040:	08002d95 	.word	0x08002d95

08003044 <_printf_common>:
 8003044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003048:	4616      	mov	r6, r2
 800304a:	4698      	mov	r8, r3
 800304c:	688a      	ldr	r2, [r1, #8]
 800304e:	690b      	ldr	r3, [r1, #16]
 8003050:	4607      	mov	r7, r0
 8003052:	4293      	cmp	r3, r2
 8003054:	bfb8      	it	lt
 8003056:	4613      	movlt	r3, r2
 8003058:	6033      	str	r3, [r6, #0]
 800305a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800305e:	460c      	mov	r4, r1
 8003060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003064:	b10a      	cbz	r2, 800306a <_printf_common+0x26>
 8003066:	3301      	adds	r3, #1
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	0699      	lsls	r1, r3, #26
 800306e:	bf42      	ittt	mi
 8003070:	6833      	ldrmi	r3, [r6, #0]
 8003072:	3302      	addmi	r3, #2
 8003074:	6033      	strmi	r3, [r6, #0]
 8003076:	6825      	ldr	r5, [r4, #0]
 8003078:	f015 0506 	ands.w	r5, r5, #6
 800307c:	d106      	bne.n	800308c <_printf_common+0x48>
 800307e:	f104 0a19 	add.w	sl, r4, #25
 8003082:	68e3      	ldr	r3, [r4, #12]
 8003084:	6832      	ldr	r2, [r6, #0]
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	42ab      	cmp	r3, r5
 800308a:	dc2b      	bgt.n	80030e4 <_printf_common+0xa0>
 800308c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	3b00      	subs	r3, #0
 8003094:	bf18      	it	ne
 8003096:	2301      	movne	r3, #1
 8003098:	0692      	lsls	r2, r2, #26
 800309a:	d430      	bmi.n	80030fe <_printf_common+0xba>
 800309c:	4641      	mov	r1, r8
 800309e:	4638      	mov	r0, r7
 80030a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030a4:	47c8      	blx	r9
 80030a6:	3001      	adds	r0, #1
 80030a8:	d023      	beq.n	80030f2 <_printf_common+0xae>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	6922      	ldr	r2, [r4, #16]
 80030ae:	f003 0306 	and.w	r3, r3, #6
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf14      	ite	ne
 80030b6:	2500      	movne	r5, #0
 80030b8:	6833      	ldreq	r3, [r6, #0]
 80030ba:	f04f 0600 	mov.w	r6, #0
 80030be:	bf08      	it	eq
 80030c0:	68e5      	ldreq	r5, [r4, #12]
 80030c2:	f104 041a 	add.w	r4, r4, #26
 80030c6:	bf08      	it	eq
 80030c8:	1aed      	subeq	r5, r5, r3
 80030ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030ce:	bf08      	it	eq
 80030d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bfc4      	itt	gt
 80030d8:	1a9b      	subgt	r3, r3, r2
 80030da:	18ed      	addgt	r5, r5, r3
 80030dc:	42b5      	cmp	r5, r6
 80030de:	d11a      	bne.n	8003116 <_printf_common+0xd2>
 80030e0:	2000      	movs	r0, #0
 80030e2:	e008      	b.n	80030f6 <_printf_common+0xb2>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4652      	mov	r2, sl
 80030e8:	4641      	mov	r1, r8
 80030ea:	4638      	mov	r0, r7
 80030ec:	47c8      	blx	r9
 80030ee:	3001      	adds	r0, #1
 80030f0:	d103      	bne.n	80030fa <_printf_common+0xb6>
 80030f2:	f04f 30ff 	mov.w	r0, #4294967295
 80030f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fa:	3501      	adds	r5, #1
 80030fc:	e7c1      	b.n	8003082 <_printf_common+0x3e>
 80030fe:	2030      	movs	r0, #48	@ 0x30
 8003100:	18e1      	adds	r1, r4, r3
 8003102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800310c:	4422      	add	r2, r4
 800310e:	3302      	adds	r3, #2
 8003110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003114:	e7c2      	b.n	800309c <_printf_common+0x58>
 8003116:	2301      	movs	r3, #1
 8003118:	4622      	mov	r2, r4
 800311a:	4641      	mov	r1, r8
 800311c:	4638      	mov	r0, r7
 800311e:	47c8      	blx	r9
 8003120:	3001      	adds	r0, #1
 8003122:	d0e6      	beq.n	80030f2 <_printf_common+0xae>
 8003124:	3601      	adds	r6, #1
 8003126:	e7d9      	b.n	80030dc <_printf_common+0x98>

08003128 <_printf_i>:
 8003128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800312c:	7e0f      	ldrb	r7, [r1, #24]
 800312e:	4691      	mov	r9, r2
 8003130:	2f78      	cmp	r7, #120	@ 0x78
 8003132:	4680      	mov	r8, r0
 8003134:	460c      	mov	r4, r1
 8003136:	469a      	mov	sl, r3
 8003138:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800313a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800313e:	d807      	bhi.n	8003150 <_printf_i+0x28>
 8003140:	2f62      	cmp	r7, #98	@ 0x62
 8003142:	d80a      	bhi.n	800315a <_printf_i+0x32>
 8003144:	2f00      	cmp	r7, #0
 8003146:	f000 80d1 	beq.w	80032ec <_printf_i+0x1c4>
 800314a:	2f58      	cmp	r7, #88	@ 0x58
 800314c:	f000 80b8 	beq.w	80032c0 <_printf_i+0x198>
 8003150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003158:	e03a      	b.n	80031d0 <_printf_i+0xa8>
 800315a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800315e:	2b15      	cmp	r3, #21
 8003160:	d8f6      	bhi.n	8003150 <_printf_i+0x28>
 8003162:	a101      	add	r1, pc, #4	@ (adr r1, 8003168 <_printf_i+0x40>)
 8003164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003168:	080031c1 	.word	0x080031c1
 800316c:	080031d5 	.word	0x080031d5
 8003170:	08003151 	.word	0x08003151
 8003174:	08003151 	.word	0x08003151
 8003178:	08003151 	.word	0x08003151
 800317c:	08003151 	.word	0x08003151
 8003180:	080031d5 	.word	0x080031d5
 8003184:	08003151 	.word	0x08003151
 8003188:	08003151 	.word	0x08003151
 800318c:	08003151 	.word	0x08003151
 8003190:	08003151 	.word	0x08003151
 8003194:	080032d3 	.word	0x080032d3
 8003198:	080031ff 	.word	0x080031ff
 800319c:	0800328d 	.word	0x0800328d
 80031a0:	08003151 	.word	0x08003151
 80031a4:	08003151 	.word	0x08003151
 80031a8:	080032f5 	.word	0x080032f5
 80031ac:	08003151 	.word	0x08003151
 80031b0:	080031ff 	.word	0x080031ff
 80031b4:	08003151 	.word	0x08003151
 80031b8:	08003151 	.word	0x08003151
 80031bc:	08003295 	.word	0x08003295
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6032      	str	r2, [r6, #0]
 80031c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031d0:	2301      	movs	r3, #1
 80031d2:	e09c      	b.n	800330e <_printf_i+0x1e6>
 80031d4:	6833      	ldr	r3, [r6, #0]
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	1d19      	adds	r1, r3, #4
 80031da:	6031      	str	r1, [r6, #0]
 80031dc:	0606      	lsls	r6, r0, #24
 80031de:	d501      	bpl.n	80031e4 <_printf_i+0xbc>
 80031e0:	681d      	ldr	r5, [r3, #0]
 80031e2:	e003      	b.n	80031ec <_printf_i+0xc4>
 80031e4:	0645      	lsls	r5, r0, #25
 80031e6:	d5fb      	bpl.n	80031e0 <_printf_i+0xb8>
 80031e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	da03      	bge.n	80031f8 <_printf_i+0xd0>
 80031f0:	232d      	movs	r3, #45	@ 0x2d
 80031f2:	426d      	negs	r5, r5
 80031f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031f8:	230a      	movs	r3, #10
 80031fa:	4858      	ldr	r0, [pc, #352]	@ (800335c <_printf_i+0x234>)
 80031fc:	e011      	b.n	8003222 <_printf_i+0xfa>
 80031fe:	6821      	ldr	r1, [r4, #0]
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	0608      	lsls	r0, r1, #24
 8003204:	f853 5b04 	ldr.w	r5, [r3], #4
 8003208:	d402      	bmi.n	8003210 <_printf_i+0xe8>
 800320a:	0649      	lsls	r1, r1, #25
 800320c:	bf48      	it	mi
 800320e:	b2ad      	uxthmi	r5, r5
 8003210:	2f6f      	cmp	r7, #111	@ 0x6f
 8003212:	6033      	str	r3, [r6, #0]
 8003214:	bf14      	ite	ne
 8003216:	230a      	movne	r3, #10
 8003218:	2308      	moveq	r3, #8
 800321a:	4850      	ldr	r0, [pc, #320]	@ (800335c <_printf_i+0x234>)
 800321c:	2100      	movs	r1, #0
 800321e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003222:	6866      	ldr	r6, [r4, #4]
 8003224:	2e00      	cmp	r6, #0
 8003226:	60a6      	str	r6, [r4, #8]
 8003228:	db05      	blt.n	8003236 <_printf_i+0x10e>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	432e      	orrs	r6, r5
 800322e:	f021 0104 	bic.w	r1, r1, #4
 8003232:	6021      	str	r1, [r4, #0]
 8003234:	d04b      	beq.n	80032ce <_printf_i+0x1a6>
 8003236:	4616      	mov	r6, r2
 8003238:	fbb5 f1f3 	udiv	r1, r5, r3
 800323c:	fb03 5711 	mls	r7, r3, r1, r5
 8003240:	5dc7      	ldrb	r7, [r0, r7]
 8003242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003246:	462f      	mov	r7, r5
 8003248:	42bb      	cmp	r3, r7
 800324a:	460d      	mov	r5, r1
 800324c:	d9f4      	bls.n	8003238 <_printf_i+0x110>
 800324e:	2b08      	cmp	r3, #8
 8003250:	d10b      	bne.n	800326a <_printf_i+0x142>
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	07df      	lsls	r7, r3, #31
 8003256:	d508      	bpl.n	800326a <_printf_i+0x142>
 8003258:	6923      	ldr	r3, [r4, #16]
 800325a:	6861      	ldr	r1, [r4, #4]
 800325c:	4299      	cmp	r1, r3
 800325e:	bfde      	ittt	le
 8003260:	2330      	movle	r3, #48	@ 0x30
 8003262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800326a:	1b92      	subs	r2, r2, r6
 800326c:	6122      	str	r2, [r4, #16]
 800326e:	464b      	mov	r3, r9
 8003270:	4621      	mov	r1, r4
 8003272:	4640      	mov	r0, r8
 8003274:	f8cd a000 	str.w	sl, [sp]
 8003278:	aa03      	add	r2, sp, #12
 800327a:	f7ff fee3 	bl	8003044 <_printf_common>
 800327e:	3001      	adds	r0, #1
 8003280:	d14a      	bne.n	8003318 <_printf_i+0x1f0>
 8003282:	f04f 30ff 	mov.w	r0, #4294967295
 8003286:	b004      	add	sp, #16
 8003288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	f043 0320 	orr.w	r3, r3, #32
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	2778      	movs	r7, #120	@ 0x78
 8003296:	4832      	ldr	r0, [pc, #200]	@ (8003360 <_printf_i+0x238>)
 8003298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	6831      	ldr	r1, [r6, #0]
 80032a0:	061f      	lsls	r7, r3, #24
 80032a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80032a6:	d402      	bmi.n	80032ae <_printf_i+0x186>
 80032a8:	065f      	lsls	r7, r3, #25
 80032aa:	bf48      	it	mi
 80032ac:	b2ad      	uxthmi	r5, r5
 80032ae:	6031      	str	r1, [r6, #0]
 80032b0:	07d9      	lsls	r1, r3, #31
 80032b2:	bf44      	itt	mi
 80032b4:	f043 0320 	orrmi.w	r3, r3, #32
 80032b8:	6023      	strmi	r3, [r4, #0]
 80032ba:	b11d      	cbz	r5, 80032c4 <_printf_i+0x19c>
 80032bc:	2310      	movs	r3, #16
 80032be:	e7ad      	b.n	800321c <_printf_i+0xf4>
 80032c0:	4826      	ldr	r0, [pc, #152]	@ (800335c <_printf_i+0x234>)
 80032c2:	e7e9      	b.n	8003298 <_printf_i+0x170>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f023 0320 	bic.w	r3, r3, #32
 80032ca:	6023      	str	r3, [r4, #0]
 80032cc:	e7f6      	b.n	80032bc <_printf_i+0x194>
 80032ce:	4616      	mov	r6, r2
 80032d0:	e7bd      	b.n	800324e <_printf_i+0x126>
 80032d2:	6833      	ldr	r3, [r6, #0]
 80032d4:	6825      	ldr	r5, [r4, #0]
 80032d6:	1d18      	adds	r0, r3, #4
 80032d8:	6961      	ldr	r1, [r4, #20]
 80032da:	6030      	str	r0, [r6, #0]
 80032dc:	062e      	lsls	r6, r5, #24
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	d501      	bpl.n	80032e6 <_printf_i+0x1be>
 80032e2:	6019      	str	r1, [r3, #0]
 80032e4:	e002      	b.n	80032ec <_printf_i+0x1c4>
 80032e6:	0668      	lsls	r0, r5, #25
 80032e8:	d5fb      	bpl.n	80032e2 <_printf_i+0x1ba>
 80032ea:	8019      	strh	r1, [r3, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	4616      	mov	r6, r2
 80032f0:	6123      	str	r3, [r4, #16]
 80032f2:	e7bc      	b.n	800326e <_printf_i+0x146>
 80032f4:	6833      	ldr	r3, [r6, #0]
 80032f6:	2100      	movs	r1, #0
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	6032      	str	r2, [r6, #0]
 80032fc:	681e      	ldr	r6, [r3, #0]
 80032fe:	6862      	ldr	r2, [r4, #4]
 8003300:	4630      	mov	r0, r6
 8003302:	f000 f859 	bl	80033b8 <memchr>
 8003306:	b108      	cbz	r0, 800330c <_printf_i+0x1e4>
 8003308:	1b80      	subs	r0, r0, r6
 800330a:	6060      	str	r0, [r4, #4]
 800330c:	6863      	ldr	r3, [r4, #4]
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	2300      	movs	r3, #0
 8003312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003316:	e7aa      	b.n	800326e <_printf_i+0x146>
 8003318:	4632      	mov	r2, r6
 800331a:	4649      	mov	r1, r9
 800331c:	4640      	mov	r0, r8
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	47d0      	blx	sl
 8003322:	3001      	adds	r0, #1
 8003324:	d0ad      	beq.n	8003282 <_printf_i+0x15a>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	079b      	lsls	r3, r3, #30
 800332a:	d413      	bmi.n	8003354 <_printf_i+0x22c>
 800332c:	68e0      	ldr	r0, [r4, #12]
 800332e:	9b03      	ldr	r3, [sp, #12]
 8003330:	4298      	cmp	r0, r3
 8003332:	bfb8      	it	lt
 8003334:	4618      	movlt	r0, r3
 8003336:	e7a6      	b.n	8003286 <_printf_i+0x15e>
 8003338:	2301      	movs	r3, #1
 800333a:	4632      	mov	r2, r6
 800333c:	4649      	mov	r1, r9
 800333e:	4640      	mov	r0, r8
 8003340:	47d0      	blx	sl
 8003342:	3001      	adds	r0, #1
 8003344:	d09d      	beq.n	8003282 <_printf_i+0x15a>
 8003346:	3501      	adds	r5, #1
 8003348:	68e3      	ldr	r3, [r4, #12]
 800334a:	9903      	ldr	r1, [sp, #12]
 800334c:	1a5b      	subs	r3, r3, r1
 800334e:	42ab      	cmp	r3, r5
 8003350:	dcf2      	bgt.n	8003338 <_printf_i+0x210>
 8003352:	e7eb      	b.n	800332c <_printf_i+0x204>
 8003354:	2500      	movs	r5, #0
 8003356:	f104 0619 	add.w	r6, r4, #25
 800335a:	e7f5      	b.n	8003348 <_printf_i+0x220>
 800335c:	080035d3 	.word	0x080035d3
 8003360:	080035e4 	.word	0x080035e4

08003364 <memmove>:
 8003364:	4288      	cmp	r0, r1
 8003366:	b510      	push	{r4, lr}
 8003368:	eb01 0402 	add.w	r4, r1, r2
 800336c:	d902      	bls.n	8003374 <memmove+0x10>
 800336e:	4284      	cmp	r4, r0
 8003370:	4623      	mov	r3, r4
 8003372:	d807      	bhi.n	8003384 <memmove+0x20>
 8003374:	1e43      	subs	r3, r0, #1
 8003376:	42a1      	cmp	r1, r4
 8003378:	d008      	beq.n	800338c <memmove+0x28>
 800337a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800337e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003382:	e7f8      	b.n	8003376 <memmove+0x12>
 8003384:	4601      	mov	r1, r0
 8003386:	4402      	add	r2, r0
 8003388:	428a      	cmp	r2, r1
 800338a:	d100      	bne.n	800338e <memmove+0x2a>
 800338c:	bd10      	pop	{r4, pc}
 800338e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003396:	e7f7      	b.n	8003388 <memmove+0x24>

08003398 <_sbrk_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	2300      	movs	r3, #0
 800339c:	4d05      	ldr	r5, [pc, #20]	@ (80033b4 <_sbrk_r+0x1c>)
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	602b      	str	r3, [r5, #0]
 80033a4:	f7fd fc20 	bl	8000be8 <_sbrk>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_sbrk_r+0x1a>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_sbrk_r+0x1a>
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	20000334 	.word	0x20000334

080033b8 <memchr>:
 80033b8:	4603      	mov	r3, r0
 80033ba:	b510      	push	{r4, lr}
 80033bc:	b2c9      	uxtb	r1, r1
 80033be:	4402      	add	r2, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	d101      	bne.n	80033ca <memchr+0x12>
 80033c6:	2000      	movs	r0, #0
 80033c8:	e003      	b.n	80033d2 <memchr+0x1a>
 80033ca:	7804      	ldrb	r4, [r0, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	428c      	cmp	r4, r1
 80033d0:	d1f6      	bne.n	80033c0 <memchr+0x8>
 80033d2:	bd10      	pop	{r4, pc}

080033d4 <memcpy>:
 80033d4:	440a      	add	r2, r1
 80033d6:	4291      	cmp	r1, r2
 80033d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033dc:	d100      	bne.n	80033e0 <memcpy+0xc>
 80033de:	4770      	bx	lr
 80033e0:	b510      	push	{r4, lr}
 80033e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e6:	4291      	cmp	r1, r2
 80033e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033ec:	d1f9      	bne.n	80033e2 <memcpy+0xe>
 80033ee:	bd10      	pop	{r4, pc}

080033f0 <_realloc_r>:
 80033f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f4:	4607      	mov	r7, r0
 80033f6:	4614      	mov	r4, r2
 80033f8:	460d      	mov	r5, r1
 80033fa:	b921      	cbnz	r1, 8003406 <_realloc_r+0x16>
 80033fc:	4611      	mov	r1, r2
 80033fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003402:	f7ff bc3b 	b.w	8002c7c <_malloc_r>
 8003406:	b92a      	cbnz	r2, 8003414 <_realloc_r+0x24>
 8003408:	f7ff fbce 	bl	8002ba8 <_free_r>
 800340c:	4625      	mov	r5, r4
 800340e:	4628      	mov	r0, r5
 8003410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003414:	f000 f81a 	bl	800344c <_malloc_usable_size_r>
 8003418:	4284      	cmp	r4, r0
 800341a:	4606      	mov	r6, r0
 800341c:	d802      	bhi.n	8003424 <_realloc_r+0x34>
 800341e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003422:	d8f4      	bhi.n	800340e <_realloc_r+0x1e>
 8003424:	4621      	mov	r1, r4
 8003426:	4638      	mov	r0, r7
 8003428:	f7ff fc28 	bl	8002c7c <_malloc_r>
 800342c:	4680      	mov	r8, r0
 800342e:	b908      	cbnz	r0, 8003434 <_realloc_r+0x44>
 8003430:	4645      	mov	r5, r8
 8003432:	e7ec      	b.n	800340e <_realloc_r+0x1e>
 8003434:	42b4      	cmp	r4, r6
 8003436:	4622      	mov	r2, r4
 8003438:	4629      	mov	r1, r5
 800343a:	bf28      	it	cs
 800343c:	4632      	movcs	r2, r6
 800343e:	f7ff ffc9 	bl	80033d4 <memcpy>
 8003442:	4629      	mov	r1, r5
 8003444:	4638      	mov	r0, r7
 8003446:	f7ff fbaf 	bl	8002ba8 <_free_r>
 800344a:	e7f1      	b.n	8003430 <_realloc_r+0x40>

0800344c <_malloc_usable_size_r>:
 800344c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003450:	1f18      	subs	r0, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfbc      	itt	lt
 8003456:	580b      	ldrlt	r3, [r1, r0]
 8003458:	18c0      	addlt	r0, r0, r3
 800345a:	4770      	bx	lr

0800345c <_init>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr

08003468 <_fini>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	bf00      	nop
 800346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346e:	bc08      	pop	{r3}
 8003470:	469e      	mov	lr, r3
 8003472:	4770      	bx	lr
