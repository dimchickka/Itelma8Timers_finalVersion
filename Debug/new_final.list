
new_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004058  08004058  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004058  08004058  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004058  08004058  00005058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800405c  0800405c  0000505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004060  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  2000005c  080040bc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080040bc  00006348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c20d  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c42  00000000  00000000  00012292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00013ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a3  00000000  00000000  00014b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bf0  00000000  00000000  000154ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e249  00000000  00000000  0002d09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7ec  00000000  00000000  0003b2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000382c  00000000  00000000  000c5b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c9340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f10 	.word	0x08003f10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f10 	.word	0x08003f10

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe0e 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f998 	bl	800048c <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f858 	bl	8000210 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f96a 	bl	8000438 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f8ae 	bl	80002c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f916 	bl	8000398 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 800016c:	2201      	movs	r2, #1
 800016e:	4903      	ldr	r1, [pc, #12]	@ (800017c <main+0x30>)
 8000170:	4803      	ldr	r0, [pc, #12]	@ (8000180 <main+0x34>)
 8000172:	f002 fc7a 	bl	8002a6a <HAL_UART_Receive_IT>
  while (1)
 8000176:	bf00      	nop
 8000178:	e7fd      	b.n	8000176 <main+0x2a>
 800017a:	bf00      	nop
 800017c:	200001f4 	.word	0x200001f4
 8000180:	20000150 	.word	0x20000150

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b090      	sub	sp, #64	@ 0x40
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	2228      	movs	r2, #40	@ 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f003 fa2e 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a6:	2301      	movs	r3, #1
 80001a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b4:	2301      	movs	r3, #1
 80001b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b8:	2302      	movs	r3, #2
 80001ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0318 	add.w	r3, r7, #24
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 f9a5 	bl	800151c <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d8:	f000 fc2a 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2102      	movs	r1, #2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fc12 	bl	8001a20 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000202:	f000 fc15 	bl	8000a30 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	@ 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800022c:	4b23      	ldr	r3, [pc, #140]	@ (80002bc <MX_TIM1_Init+0xac>)
 800022e:	4a24      	ldr	r2, [pc, #144]	@ (80002c0 <MX_TIM1_Init+0xb0>)
 8000230:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000232:	4b22      	ldr	r3, [pc, #136]	@ (80002bc <MX_TIM1_Init+0xac>)
 8000234:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800023a:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <MX_TIM1_Init+0xac>)
 800023c:	2210      	movs	r2, #16
 800023e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000240:	4b1e      	ldr	r3, [pc, #120]	@ (80002bc <MX_TIM1_Init+0xac>)
 8000242:	2263      	movs	r2, #99	@ 0x63
 8000244:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000246:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <MX_TIM1_Init+0xac>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800024c:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <MX_TIM1_Init+0xac>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000252:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <MX_TIM1_Init+0xac>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000258:	4818      	ldr	r0, [pc, #96]	@ (80002bc <MX_TIM1_Init+0xac>)
 800025a:	f001 fd6f 	bl	8001d3c <HAL_TIM_Base_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000264:	f000 fbe4 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800026c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	4619      	mov	r1, r3
 8000274:	4811      	ldr	r0, [pc, #68]	@ (80002bc <MX_TIM1_Init+0xac>)
 8000276:	f001 ffea 	bl	800224e <HAL_TIM_ConfigClockSource>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000280:	f000 fbd6 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000284:	2108      	movs	r1, #8
 8000286:	480d      	ldr	r0, [pc, #52]	@ (80002bc <MX_TIM1_Init+0xac>)
 8000288:	f001 fe98 	bl	8001fbc <HAL_TIM_OnePulse_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000292:	f000 fbcd 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000296:	2310      	movs	r3, #16
 8000298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800029a:	2380      	movs	r3, #128	@ 0x80
 800029c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	4619      	mov	r1, r3
 80002a2:	4806      	ldr	r0, [pc, #24]	@ (80002bc <MX_TIM1_Init+0xac>)
 80002a4:	f002 fa96 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80002ae:	f000 fbbf 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000078 	.word	0x20000078
 80002c0:	40012c00 	.word	0x40012c00

080002c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08c      	sub	sp, #48	@ 0x30
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f0:	4b28      	ldr	r3, [pc, #160]	@ (8000394 <MX_TIM2_Init+0xd0>)
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002f8:	4b26      	ldr	r3, [pc, #152]	@ (8000394 <MX_TIM2_Init+0xd0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <MX_TIM2_Init+0xd0>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000304:	4b23      	ldr	r3, [pc, #140]	@ (8000394 <MX_TIM2_Init+0xd0>)
 8000306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800030a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030c:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <MX_TIM2_Init+0xd0>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000312:	4b20      	ldr	r3, [pc, #128]	@ (8000394 <MX_TIM2_Init+0xd0>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000318:	481e      	ldr	r0, [pc, #120]	@ (8000394 <MX_TIM2_Init+0xd0>)
 800031a:	f001 fd0f 	bl	8001d3c <HAL_TIM_Base_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000324:	f000 fb84 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032c:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800032e:	2300      	movs	r3, #0
 8000330:	627b      	str	r3, [r7, #36]	@ 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033a:	f107 0320 	add.w	r3, r7, #32
 800033e:	4619      	mov	r1, r3
 8000340:	4814      	ldr	r0, [pc, #80]	@ (8000394 <MX_TIM2_Init+0xd0>)
 8000342:	f001 ff84 	bl	800224e <HAL_TIM_ConfigClockSource>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800034c:	f000 fb70 	bl	8000a30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000350:	2305      	movs	r3, #5
 8000352:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4619      	mov	r1, r3
 800035e:	480d      	ldr	r0, [pc, #52]	@ (8000394 <MX_TIM2_Init+0xd0>)
 8000360:	f002 f83c 	bl	80023dc <HAL_TIM_SlaveConfigSynchro>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800036a:	f000 fb61 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800036e:	2320      	movs	r3, #32
 8000370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	@ (8000394 <MX_TIM2_Init+0xd0>)
 800037c:	f002 fa2a 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000386:	f000 fb53 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	3730      	adds	r7, #48	@ 0x30
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200000c0 	.word	0x200000c0

08000398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000434 <MX_TIM3_Init+0x9c>)
 80003ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003c8:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b17      	ldr	r3, [pc, #92]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	4b16      	ldr	r3, [pc, #88]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003dc:	4814      	ldr	r0, [pc, #80]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003de:	f001 fcad 	bl	8001d3c <HAL_TIM_Base_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003e8:	f000 fb22 	bl	8000a30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80003ec:	2307      	movs	r3, #7
 80003ee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80003f0:	2310      	movs	r3, #16
 80003f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4619      	mov	r1, r3
 80003fa:	480d      	ldr	r0, [pc, #52]	@ (8000430 <MX_TIM3_Init+0x98>)
 80003fc:	f001 ffee 	bl	80023dc <HAL_TIM_SlaveConfigSynchro>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000406:	f000 fb13 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4806      	ldr	r0, [pc, #24]	@ (8000430 <MX_TIM3_Init+0x98>)
 8000418:	f002 f9dc 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000422:	f000 fb05 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	3720      	adds	r7, #32
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000108 	.word	0x20000108
 8000434:	40000400 	.word	0x40000400

08000438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 800043e:	4a12      	ldr	r2, [pc, #72]	@ (8000488 <MX_USART2_UART_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000442:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_USART2_UART_Init+0x4c>)
 8000470:	f002 fa20 	bl	80028b4 <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800047a:	f000 fad9 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000150 	.word	0x20000150
 8000488:	40004400 	.word	0x40004400

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a0:	4b39      	ldr	r3, [pc, #228]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a38      	ldr	r2, [pc, #224]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b36      	ldr	r3, [pc, #216]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0320 	and.w	r3, r3, #32
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b33      	ldr	r3, [pc, #204]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a32      	ldr	r2, [pc, #200]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b30      	ldr	r3, [pc, #192]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000588 <MX_GPIO_Init+0xfc>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80004ee:	4827      	ldr	r0, [pc, #156]	@ (800058c <MX_GPIO_Init+0x100>)
 80004f0:	f000 ffe4 	bl	80014bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin|led4_Pin
 80004f4:	2200      	movs	r2, #0
 80004f6:	f24f 4107 	movw	r1, #62471	@ 0xf407
 80004fa:	4825      	ldr	r0, [pc, #148]	@ (8000590 <MX_GPIO_Init+0x104>)
 80004fc:	f000 ffde 	bl	80014bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000500:	2302      	movs	r3, #2
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000504:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <MX_GPIO_Init+0x108>)
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	481e      	ldr	r0, [pc, #120]	@ (800058c <MX_GPIO_Init+0x100>)
 8000514:	f000 fe4e 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000518:	23f0      	movs	r3, #240	@ 0xf0
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4817      	ldr	r0, [pc, #92]	@ (800058c <MX_GPIO_Init+0x100>)
 8000530:	f000 fe40 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin
 8000534:	f24f 4307 	movw	r3, #62471	@ 0xf407
 8000538:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	@ (8000590 <MX_GPIO_Init+0x104>)
 800054e:	f000 fe31 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000552:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2302      	movs	r3, #2
 8000562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <MX_GPIO_Init+0x100>)
 800056c:	f000 fe22 	bl	80011b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2007      	movs	r0, #7
 8000576:	f000 fd34 	bl	8000fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800057a:	2007      	movs	r0, #7
 800057c:	f000 fd4d 	bl	800101a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	40010800 	.word	0x40010800
 8000590:	40010c00 	.word	0x40010c00
 8000594:	10110000 	.word	0x10110000

08000598 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a66      	ldr	r2, [pc, #408]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	f040 80c5 	bne.w	8000734 <HAL_TIM_PeriodElapsedCallback+0x19c>
		HAL_TIM_Base_Stop_IT(&htim1);
 80005aa:	4864      	ldr	r0, [pc, #400]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80005ac:	f001 fcd8 	bl	8001f60 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim2);
 80005b0:	4863      	ldr	r0, [pc, #396]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005b2:	f001 fc5d 	bl	8001e70 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim3);
 80005b6:	4863      	ldr	r0, [pc, #396]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80005b8:	f001 fc5a 	bl	8001e70 <HAL_TIM_Base_Stop>
		if(capture_count < MAX_SAMPLES){
 80005bc:	4b62      	ldr	r3, [pc, #392]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b0a      	cmp	r3, #10
 80005c2:	d832      	bhi.n	800062a <HAL_TIM_PeriodElapsedCallback+0x92>
			uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim2); // значение в счётчике таймера №2
 80005c4:	4b5e      	ldr	r3, [pc, #376]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ca:	81fb      	strh	r3, [r7, #14]
			uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3); // значение в счётчике таймера №3
 80005cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d2:	81bb      	strh	r3, [r7, #12]
			uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2); // значение переполнения таймера №2 (65535)
 80005d4:	4b5a      	ldr	r3, [pc, #360]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005da:	817b      	strh	r3, [r7, #10]
			frequenciesForCurrentSensor[capture_count] = (count_main + (count_secondary * (arr + 1)))*100; // вычисляем
 80005dc:	89fa      	ldrh	r2, [r7, #14]
 80005de:	89bb      	ldrh	r3, [r7, #12]
 80005e0:	8979      	ldrh	r1, [r7, #10]
 80005e2:	3101      	adds	r1, #1
 80005e4:	fb01 f303 	mul.w	r3, r1, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	2264      	movs	r2, #100	@ 0x64
 80005ec:	fb03 f202 	mul.w	r2, r3, r2
 80005f0:	4b55      	ldr	r3, [pc, #340]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a55      	ldr	r2, [pc, #340]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

//			char debug[64];
//			snprintf(debug, sizeof(debug), "Sample = %lu\r\n", frequenciesForCurrentSensor[capture_count]);
//			HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
			//////////////// обнуляем счётчики и рестартуем таймер №1 /////////////////
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80005fc:	4b50      	ldr	r3, [pc, #320]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000604:	4b4f      	ldr	r3, [pc, #316]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2200      	movs	r2, #0
 800060a:	625a      	str	r2, [r3, #36]	@ 0x24
			capture_count++;
 800060c:	4b4e      	ldr	r3, [pc, #312]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a4d      	ldr	r2, [pc, #308]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000614:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000616:	4849      	ldr	r0, [pc, #292]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000618:	f001 fc50 	bl	8001ebc <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 800061c:	4848      	ldr	r0, [pc, #288]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800061e:	f001 fbdd 	bl	8001ddc <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start(&htim3);
 8000622:	4848      	ldr	r0, [pc, #288]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000624:	f001 fbda 	bl	8001ddc <HAL_TIM_Base_Start>
				isProccess = 0;
			}

		}
	}
}
 8000628:	e084      	b.n	8000734 <HAL_TIM_PeriodElapsedCallback+0x19c>
			HAL_TIM_Base_Stop_IT(&htim1);                 // Остановить
 800062a:	4844      	ldr	r0, [pc, #272]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800062c:	f001 fc98 	bl	8001f60 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim2);
 8000630:	4843      	ldr	r0, [pc, #268]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000632:	f001 fc1d 	bl	8001e70 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000636:	4843      	ldr	r0, [pc, #268]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000638:	f001 fc1a 	bl	8001e70 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 800063c:	4b40      	ldr	r3, [pc, #256]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000644:	4b3f      	ldr	r3, [pc, #252]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
			for (int i = 1; i < MAX_SAMPLES; i++) {
 800064c:	2301      	movs	r3, #1
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	e027      	b.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x10a>
				uint32_t key = frequenciesForCurrentSensor[i];
 8000652:	4a3e      	ldr	r2, [pc, #248]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	613b      	str	r3, [r7, #16]
				int j = i - 1;
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3b01      	subs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 8000662:	e00b      	b.n	800067c <HAL_TIM_PeriodElapsedCallback+0xe4>
					frequenciesForCurrentSensor[j + 1] = frequenciesForCurrentSensor[j];
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	3301      	adds	r3, #1
 8000668:	4938      	ldr	r1, [pc, #224]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800066a:	69ba      	ldr	r2, [r7, #24]
 800066c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000670:	4936      	ldr	r1, [pc, #216]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					j--;
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	3b01      	subs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
				while (j >= 0 && frequenciesForCurrentSensor[j] > key) {
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db06      	blt.n	8000690 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000682:	4a32      	ldr	r2, [pc, #200]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d3e9      	bcc.n	8000664 <HAL_TIM_PeriodElapsedCallback+0xcc>
				frequenciesForCurrentSensor[j + 1] = key;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	3301      	adds	r3, #1
 8000694:	492d      	ldr	r1, [pc, #180]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 1; i < MAX_SAMPLES; i++) {
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	3301      	adds	r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	2b0a      	cmp	r3, #10
 80006a6:	ddd4      	ble.n	8000652 <HAL_TIM_PeriodElapsedCallback+0xba>
			uint32_t frequency_median = frequenciesForCurrentSensor[MAX_SAMPLES / 2];
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	617b      	str	r3, [r7, #20]
			frequenciesResults[currentSensor] = frequency_median;
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			capture_count = 0;
 80006be:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
			currentSensor++;
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3301      	adds	r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80006d0:	701a      	strb	r2, [r3, #0]
			if(currentSensor < NUMBER_OF_SENSORS){
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b07      	cmp	r3, #7
 80006da:	d80f      	bhi.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x164>
				SelectMuxChannel(currentSensor);
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f882 	bl	80007ec <SelectMuxChannel>
				HAL_TIM_Base_Start_IT(&htim1);
 80006e8:	4814      	ldr	r0, [pc, #80]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006ea:	f001 fbe7 	bl	8001ebc <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start(&htim2);
 80006ee:	4814      	ldr	r0, [pc, #80]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80006f0:	f001 fb74 	bl	8001ddc <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start(&htim3);
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80006f6:	f001 fb71 	bl	8001ddc <HAL_TIM_Base_Start>
}
 80006fa:	e01b      	b.n	8000734 <HAL_TIM_PeriodElapsedCallback+0x19c>
				PrintSensorFrequencies();
 80006fc:	f000 f90a 	bl	8000914 <PrintSensorFrequencies>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	210f      	movs	r1, #15
 8000704:	4814      	ldr	r0, [pc, #80]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000706:	f000 fed9 	bl	80014bc <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000712:	f000 fed3 	bl	80014bc <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800071c:	480f      	ldr	r0, [pc, #60]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800071e:	f000 fecd 	bl	80014bc <HAL_GPIO_WritePin>
			    capture_count = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
			    currentSensor = 0;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
				isProccess = 0;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000078 	.word	0x20000078
 8000740:	200000c0 	.word	0x200000c0
 8000744:	20000108 	.word	0x20000108
 8000748:	200001c8 	.word	0x200001c8
 800074c:	2000019c 	.word	0x2000019c
 8000750:	200001d0 	.word	0x200001d0
 8000754:	200001d4 	.word	0x200001d4
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40010800 	.word	0x40010800
 8000760:	20000198 	.word	0x20000198

08000764 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
	uint32_t now = HAL_GetTick();
 800076e:	f000 fb57 	bl	8000e20 <HAL_GetTick>
 8000772:	60f8      	str	r0, [r7, #12]
	if (now - lastInterruptTime < 200) return;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	2bc7      	cmp	r3, #199	@ 0xc7
 800077e:	d922      	bls.n	80007c6 <HAL_GPIO_EXTI_Callback+0x62>
	lastInterruptTime = now;
 8000780:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6013      	str	r3, [r2, #0]
	if(isProccess) return;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d11c      	bne.n	80007ca <HAL_GPIO_EXTI_Callback+0x66>

  if (GPIO_Pin == GPIO_PIN_1 && !isProccess){
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d11a      	bne.n	80007cc <HAL_GPIO_EXTI_Callback+0x68>
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d115      	bne.n	80007cc <HAL_GPIO_EXTI_Callback+0x68>
		isProccess = 1;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x74>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
	   // char buffer[64]; // Буфер для формирования строки
//	    int len = snprintf(buffer, sizeof(buffer), "Counter is started\r\n");
	   // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
		SelectMuxChannel(currentSensor);
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x78>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f81d 	bl	80007ec <SelectMuxChannel>

		HAL_TIM_Base_Start_IT(&htim1);
 80007b2:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80007b4:	f001 fb82 	bl	8001ebc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim2);
 80007b8:	480a      	ldr	r0, [pc, #40]	@ (80007e4 <HAL_GPIO_EXTI_Callback+0x80>)
 80007ba:	f001 fb0f 	bl	8001ddc <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 80007be:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80007c0:	f001 fb0c 	bl	8001ddc <HAL_TIM_Base_Start>
 80007c4:	e002      	b.n	80007cc <HAL_GPIO_EXTI_Callback+0x68>
	if (now - lastInterruptTime < 200) return;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <HAL_GPIO_EXTI_Callback+0x68>
	if(isProccess) return;
 80007ca:	bf00      	nop
  }
}
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200001cc 	.word	0x200001cc
 80007d8:	20000198 	.word	0x20000198
 80007dc:	200001d0 	.word	0x200001d0
 80007e0:	20000078 	.word	0x20000078
 80007e4:	200000c0 	.word	0x200000c0
 80007e8:	20000108 	.word	0x20000108

080007ec <SelectMuxChannel>:


void SelectMuxChannel(uint8_t channel) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
    // 1. Отключаем все датчики (опционально, если нужно строгое управление)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007fc:	4842      	ldr	r0, [pc, #264]	@ (8000908 <SelectMuxChannel+0x11c>)
 80007fe:	f000 fe5d 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000808:	4840      	ldr	r0, [pc, #256]	@ (800090c <SelectMuxChannel+0x120>)
 800080a:	f000 fe57 	bl	80014bc <HAL_GPIO_WritePin>

    // 2. Устанавливаем канал мультиплексора
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, muxChannels[channel].s0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	493f      	ldr	r1, [pc, #252]	@ (8000910 <SelectMuxChannel+0x124>)
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	4837      	ldr	r0, [pc, #220]	@ (800090c <SelectMuxChannel+0x120>)
 800082e:	f000 fe45 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, muxChannels[channel].s1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	4936      	ldr	r1, [pc, #216]	@ (8000910 <SelectMuxChannel+0x124>)
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	3301      	adds	r3, #1
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	482e      	ldr	r0, [pc, #184]	@ (800090c <SelectMuxChannel+0x120>)
 8000854:	f000 fe32 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, muxChannels[channel].s2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	492d      	ldr	r1, [pc, #180]	@ (8000910 <SelectMuxChannel+0x124>)
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	3302      	adds	r3, #2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	2120      	movs	r1, #32
 8000878:	4824      	ldr	r0, [pc, #144]	@ (800090c <SelectMuxChannel+0x120>)
 800087a:	f000 fe1f 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, muxChannels[channel].s3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	4923      	ldr	r1, [pc, #140]	@ (8000910 <SelectMuxChannel+0x124>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	3303      	adds	r3, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	2110      	movs	r1, #16
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <SelectMuxChannel+0x120>)
 80008a0:	f000 fe0c 	bl	80014bc <HAL_GPIO_WritePin>

    // 3. Включаем питание датчика, если указаны порт и пин
    if (muxChannels[channel].power_port != NULL) {
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	491a      	ldr	r1, [pc, #104]	@ (8000910 <SelectMuxChannel+0x124>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	3304      	adds	r3, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d015      	beq.n	80008e6 <SelectMuxChannel+0xfa>
        HAL_GPIO_WritePin(muxChannels[channel].power_port, muxChannels[channel].power_pin, GPIO_PIN_SET);
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4914      	ldr	r1, [pc, #80]	@ (8000910 <SelectMuxChannel+0x124>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	3304      	adds	r3, #4
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	4910      	ldr	r1, [pc, #64]	@ (8000910 <SelectMuxChannel+0x124>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	f000 fdeb 	bl	80014bc <HAL_GPIO_WritePin>
    }

    // 4. Задержка для стабилизации
    for (volatile int i = 0; i < 10000; i++);
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e002      	b.n	80008f2 <SelectMuxChannel+0x106>
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008f8:	4293      	cmp	r3, r2
 80008fa:	ddf7      	ble.n	80008ec <SelectMuxChannel+0x100>
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010c00 	.word	0x40010c00
 800090c:	40010800 	.word	0x40010800
 8000910:	08003f38 	.word	0x08003f38

08000914 <PrintSensorFrequencies>:


void PrintSensorFrequencies() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	@ 0x50
 8000918:	af02      	add	r7, sp, #8
    char buffer[64]; // Буфер для формирования строки

    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800091a:	2300      	movs	r3, #0
 800091c:	647b      	str	r3, [r7, #68]	@ 0x44
 800091e:	e018      	b.n	8000952 <PrintSensorFrequencies+0x3e>
        // Форматируем строку для каждого датчика
        int len = snprintf(buffer, sizeof(buffer), "sensor%d:%lu\r\n",
 8000920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000922:	1c5a      	adds	r2, r3, #1
                          i + 1, frequenciesResults[i]);
 8000924:	490f      	ldr	r1, [pc, #60]	@ (8000964 <PrintSensorFrequencies+0x50>)
 8000926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000928:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        int len = snprintf(buffer, sizeof(buffer), "sensor%d:%lu\r\n",
 800092c:	4638      	mov	r0, r7
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <PrintSensorFrequencies+0x54>)
 8000934:	2140      	movs	r1, #64	@ 0x40
 8000936:	f002 fe27 	bl	8003588 <sniprintf>
 800093a:	6438      	str	r0, [r7, #64]	@ 0x40

        // Отправляем в UART
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800093c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800093e:	b29a      	uxth	r2, r3
 8000940:	4639      	mov	r1, r7
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	4809      	ldr	r0, [pc, #36]	@ (800096c <PrintSensorFrequencies+0x58>)
 8000948:	f002 f804 	bl	8002954 <HAL_UART_Transmit>
    for (int i = 0; i < NUMBER_OF_SENSORS; i++) {
 800094c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800094e:	3301      	adds	r3, #1
 8000950:	647b      	str	r3, [r7, #68]	@ 0x44
 8000952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000954:	2b07      	cmp	r3, #7
 8000956:	dde3      	ble.n	8000920 <PrintSensorFrequencies+0xc>
    }

    //int len = snprintf(buffer, sizeof(buffer), "-------------------------\r\n\r\n");
   // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3748      	adds	r7, #72	@ 0x48
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001d4 	.word	0x200001d4
 8000968:	08003f28 	.word	0x08003f28
 800096c:	20000150 	.word	0x20000150

08000970 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    if (huart == &huart2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a24 <HAL_UART_RxCpltCallback+0xb4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d14d      	bne.n	8000a1c <HAL_UART_RxCpltCallback+0xac>
    {
        // Преобразование ASCII символа '1'...'4' в число 1...4
        if (rxBuffer[0] >= '1' && rxBuffer[0] <= '4') {
 8000980:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <HAL_UART_RxCpltCallback+0xb8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b30      	cmp	r3, #48	@ 0x30
 8000986:	d944      	bls.n	8000a12 <HAL_UART_RxCpltCallback+0xa2>
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <HAL_UART_RxCpltCallback+0xb8>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b34      	cmp	r3, #52	@ 0x34
 800098e:	d840      	bhi.n	8000a12 <HAL_UART_RxCpltCallback+0xa2>
            uint8_t ledNumber = rxBuffer[0] - '0'; // '1' -> 1, '2' -> 2, и т.д.
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <HAL_UART_RxCpltCallback+0xb8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	3b30      	subs	r3, #48	@ 0x30
 8000996:	73fb      	strb	r3, [r7, #15]

            // Сброс всех светодиодов
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2101      	movs	r1, #1
 800099c:	4823      	ldr	r0, [pc, #140]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 800099e:	f000 fd8d 	bl	80014bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	4821      	ldr	r0, [pc, #132]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 80009a8:	f000 fd88 	bl	80014bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2104      	movs	r1, #4
 80009b0:	481e      	ldr	r0, [pc, #120]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 80009b2:	f000 fd83 	bl	80014bc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009bc:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 80009be:	f000 fd7d 	bl	80014bc <HAL_GPIO_WritePin>

            // Включение нужного светодиода
            switch (ledNumber) {
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d823      	bhi.n	8000a12 <HAL_UART_RxCpltCallback+0xa2>
 80009ca:	a201      	add	r2, pc, #4	@ (adr r2, 80009d0 <HAL_UART_RxCpltCallback+0x60>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	080009f9 	.word	0x080009f9
 80009dc:	08000a05 	.word	0x08000a05
                case 1:
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2101      	movs	r1, #1
 80009e4:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 80009e6:	f000 fd69 	bl	80014bc <HAL_GPIO_WritePin>
                    break;
 80009ea:	e012      	b.n	8000a12 <HAL_UART_RxCpltCallback+0xa2>
                case 2:
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2102      	movs	r1, #2
 80009f0:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 80009f2:	f000 fd63 	bl	80014bc <HAL_GPIO_WritePin>
                    break;
 80009f6:	e00c      	b.n	8000a12 <HAL_UART_RxCpltCallback+0xa2>
                case 3:
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2104      	movs	r1, #4
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 80009fe:	f000 fd5d 	bl	80014bc <HAL_GPIO_WritePin>
                    break;
 8000a02:	e006      	b.n	8000a12 <HAL_UART_RxCpltCallback+0xa2>
                case 4:
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a0a:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <HAL_UART_RxCpltCallback+0xbc>)
 8000a0c:	f000 fd56 	bl	80014bc <HAL_GPIO_WritePin>
                    break;
 8000a10:	bf00      	nop
            }
        }

        // Перезапуск приёма
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <HAL_UART_RxCpltCallback+0xb8>)
 8000a16:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <HAL_UART_RxCpltCallback+0xb4>)
 8000a18:	f002 f827 	bl	8002a6a <HAL_UART_Receive_IT>
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000150 	.word	0x20000150
 8000a28:	200001f4 	.word	0x200001f4
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <HAL_MspInit+0x5c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a98 <HAL_MspInit+0x5c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <HAL_MspInit+0x60>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <HAL_MspInit+0x60>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a2b      	ldr	r2, [pc, #172]	@ (8000b68 <HAL_TIM_Base_MspInit+0xc8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d114      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x4a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a29      	ldr	r2, [pc, #164]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000ac6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2019      	movs	r0, #25
 8000ade:	f000 fa80 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 fa99 	bl	800101a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae8:	e03a      	b.n	8000b60 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af2:	d124      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	61d3      	str	r3, [r2, #28]
 8000b00:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a16      	ldr	r2, [pc, #88]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4619      	mov	r1, r3
 8000b36:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <HAL_TIM_Base_MspInit+0xd0>)
 8000b38:	f000 fb3c 	bl	80011b4 <HAL_GPIO_Init>
}
 8000b3c:	e010      	b.n	8000b60 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	@ (8000b74 <HAL_TIM_Base_MspInit+0xd4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d10b      	bne.n	8000b60 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_TIM_Base_MspInit+0xcc>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	@ 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40012c00 	.word	0x40012c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40000400 	.word	0x40000400

08000b78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a1f      	ldr	r2, [pc, #124]	@ (8000c10 <HAL_UART_MspInit+0x98>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d137      	bne.n	8000c08 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b98:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <HAL_UART_MspInit+0x9c>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c14 <HAL_UART_MspInit+0x9c>)
 8000b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba2:	61d3      	str	r3, [r2, #28]
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <HAL_UART_MspInit+0x9c>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <HAL_UART_MspInit+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <HAL_UART_MspInit+0x9c>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <HAL_UART_MspInit+0x9c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <HAL_UART_MspInit+0xa0>)
 8000bdc:	f000 faea 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be0:	2308      	movs	r3, #8
 8000be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <HAL_UART_MspInit+0xa0>)
 8000bf4:	f000 fade 	bl	80011b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2026      	movs	r0, #38	@ 0x26
 8000bfe:	f000 f9f0 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c02:	2026      	movs	r0, #38	@ 0x26
 8000c04:	f000 fa09 	bl	800101a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8c6 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f000 fc37 	bl	80014ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//    char msg[64];
//    int len = snprintf(msg, sizeof(msg), "РАБОТАЕТ!!!");
//    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <TIM1_UP_IRQHandler+0x10>)
 8000c8a:	f001 f9f0 	bl	800206e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000078 	.word	0x20000078

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <USART2_IRQHandler+0x10>)
 8000c9e:	f001 ff09 	bl	8002ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000150 	.word	0x20000150

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f002 fc92 	bl	8003604 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20005000 	.word	0x20005000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	200001f8 	.word	0x200001f8
 8000d14:	20000348 	.word	0x20000348

08000d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d24:	f7ff fff8 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d2a:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d40:	4c09      	ldr	r4, [pc, #36]	@ (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 fc5f 	bl	8003610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff f9fb 	bl	800014c <main>
  bx lr
 8000d56:	4770      	bx	lr
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d60:	08004060 	.word	0x08004060
  ldr r2, =_sbss
 8000d64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d68:	20000348 	.word	0x20000348

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x28>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f923 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fe56 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f93b 	bl	8001036 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f903 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_IncTick+0x1c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <HAL_IncTick+0x20>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a03      	ldr	r2, [pc, #12]	@ (8000e1c <HAL_IncTick+0x20>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	200001fc 	.word	0x200001fc

08000e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b02      	ldr	r3, [pc, #8]	@ (8000e30 <HAL_GetTick+0x10>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	200001fc 	.word	0x200001fc

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4906      	ldr	r1, [pc, #24]	@ (8000ecc <__NVIC_EnableIRQ+0x34>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff90 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff2d 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff42 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff90 	bl	8000f24 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5f 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff35 	bl	8000e98 <__NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffa2 	bl	8000f88 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d008      	beq.n	8001078 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2204      	movs	r2, #4
 800106a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e020      	b.n	80010ba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020e 	bic.w	r2, r2, #14
 8001086:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d005      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2204      	movs	r2, #4
 80010e0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e051      	b.n	800118c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 020e 	bic.w	r2, r2, #14
 80010f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <HAL_DMA_Abort_IT+0xd4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d029      	beq.n	8001166 <HAL_DMA_Abort_IT+0xa2>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a21      	ldr	r2, [pc, #132]	@ (800119c <HAL_DMA_Abort_IT+0xd8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d022      	beq.n	8001162 <HAL_DMA_Abort_IT+0x9e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_DMA_Abort_IT+0xdc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01a      	beq.n	800115c <HAL_DMA_Abort_IT+0x98>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1e      	ldr	r2, [pc, #120]	@ (80011a4 <HAL_DMA_Abort_IT+0xe0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d012      	beq.n	8001156 <HAL_DMA_Abort_IT+0x92>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <HAL_DMA_Abort_IT+0xe4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00a      	beq.n	8001150 <HAL_DMA_Abort_IT+0x8c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <HAL_DMA_Abort_IT+0xe8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d102      	bne.n	800114a <HAL_DMA_Abort_IT+0x86>
 8001144:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001148:	e00e      	b.n	8001168 <HAL_DMA_Abort_IT+0xa4>
 800114a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800114e:	e00b      	b.n	8001168 <HAL_DMA_Abort_IT+0xa4>
 8001150:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001154:	e008      	b.n	8001168 <HAL_DMA_Abort_IT+0xa4>
 8001156:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115a:	e005      	b.n	8001168 <HAL_DMA_Abort_IT+0xa4>
 800115c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001160:	e002      	b.n	8001168 <HAL_DMA_Abort_IT+0xa4>
 8001162:	2310      	movs	r3, #16
 8001164:	e000      	b.n	8001168 <HAL_DMA_Abort_IT+0xa4>
 8001166:	2301      	movs	r3, #1
 8001168:	4a11      	ldr	r2, [pc, #68]	@ (80011b0 <HAL_DMA_Abort_IT+0xec>)
 800116a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	4798      	blx	r3
    } 
  }
  return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020008 	.word	0x40020008
 800119c:	4002001c 	.word	0x4002001c
 80011a0:	40020030 	.word	0x40020030
 80011a4:	40020044 	.word	0x40020044
 80011a8:	40020058 	.word	0x40020058
 80011ac:	4002006c 	.word	0x4002006c
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b08b      	sub	sp, #44	@ 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e169      	b.n	800149c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c8:	2201      	movs	r2, #1
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8158 	bne.w	8001496 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001454 <HAL_GPIO_Init+0x2a0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d05e      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 80011f0:	4a98      	ldr	r2, [pc, #608]	@ (8001454 <HAL_GPIO_Init+0x2a0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d875      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 80011f6:	4a98      	ldr	r2, [pc, #608]	@ (8001458 <HAL_GPIO_Init+0x2a4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d058      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 80011fc:	4a96      	ldr	r2, [pc, #600]	@ (8001458 <HAL_GPIO_Init+0x2a4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d86f      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 8001202:	4a96      	ldr	r2, [pc, #600]	@ (800145c <HAL_GPIO_Init+0x2a8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d052      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001208:	4a94      	ldr	r2, [pc, #592]	@ (800145c <HAL_GPIO_Init+0x2a8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d869      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800120e:	4a94      	ldr	r2, [pc, #592]	@ (8001460 <HAL_GPIO_Init+0x2ac>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d04c      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001214:	4a92      	ldr	r2, [pc, #584]	@ (8001460 <HAL_GPIO_Init+0x2ac>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d863      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800121a:	4a92      	ldr	r2, [pc, #584]	@ (8001464 <HAL_GPIO_Init+0x2b0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d046      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
 8001220:	4a90      	ldr	r2, [pc, #576]	@ (8001464 <HAL_GPIO_Init+0x2b0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d85d      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d82a      	bhi.n	8001280 <HAL_GPIO_Init+0xcc>
 800122a:	2b12      	cmp	r3, #18
 800122c:	d859      	bhi.n	80012e2 <HAL_GPIO_Init+0x12e>
 800122e:	a201      	add	r2, pc, #4	@ (adr r2, 8001234 <HAL_GPIO_Init+0x80>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	080012af 	.word	0x080012af
 8001238:	08001289 	.word	0x08001289
 800123c:	0800129b 	.word	0x0800129b
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012e3 	.word	0x080012e3
 8001248:	080012e3 	.word	0x080012e3
 800124c:	080012e3 	.word	0x080012e3
 8001250:	080012e3 	.word	0x080012e3
 8001254:	080012e3 	.word	0x080012e3
 8001258:	080012e3 	.word	0x080012e3
 800125c:	080012e3 	.word	0x080012e3
 8001260:	080012e3 	.word	0x080012e3
 8001264:	080012e3 	.word	0x080012e3
 8001268:	080012e3 	.word	0x080012e3
 800126c:	080012e3 	.word	0x080012e3
 8001270:	080012e3 	.word	0x080012e3
 8001274:	080012e3 	.word	0x080012e3
 8001278:	08001291 	.word	0x08001291
 800127c:	080012a5 	.word	0x080012a5
 8001280:	4a79      	ldr	r2, [pc, #484]	@ (8001468 <HAL_GPIO_Init+0x2b4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001286:	e02c      	b.n	80012e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e029      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	3304      	adds	r3, #4
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e024      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	3308      	adds	r3, #8
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e01f      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	330c      	adds	r3, #12
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e01a      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b6:	2304      	movs	r3, #4
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e013      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	611a      	str	r2, [r3, #16]
          break;
 80012ce:	e009      	b.n	80012e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	615a      	str	r2, [r3, #20]
          break;
 80012da:	e003      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x130>
          break;
 80012e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2bff      	cmp	r3, #255	@ 0xff
 80012e8:	d801      	bhi.n	80012ee <HAL_GPIO_Init+0x13a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	e001      	b.n	80012f2 <HAL_GPIO_Init+0x13e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2bff      	cmp	r3, #255	@ 0xff
 80012f8:	d802      	bhi.n	8001300 <HAL_GPIO_Init+0x14c>
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x152>
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	3b08      	subs	r3, #8
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	210f      	movs	r1, #15
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	6a39      	ldr	r1, [r7, #32]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	431a      	orrs	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80b1 	beq.w	8001496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001334:	4b4d      	ldr	r3, [pc, #308]	@ (800146c <HAL_GPIO_Init+0x2b8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a4c      	ldr	r2, [pc, #304]	@ (800146c <HAL_GPIO_Init+0x2b8>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b4a      	ldr	r3, [pc, #296]	@ (800146c <HAL_GPIO_Init+0x2b8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800134c:	4a48      	ldr	r2, [pc, #288]	@ (8001470 <HAL_GPIO_Init+0x2bc>)
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a40      	ldr	r2, [pc, #256]	@ (8001474 <HAL_GPIO_Init+0x2c0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d013      	beq.n	80013a0 <HAL_GPIO_Init+0x1ec>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a3f      	ldr	r2, [pc, #252]	@ (8001478 <HAL_GPIO_Init+0x2c4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00d      	beq.n	800139c <HAL_GPIO_Init+0x1e8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3e      	ldr	r2, [pc, #248]	@ (800147c <HAL_GPIO_Init+0x2c8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d007      	beq.n	8001398 <HAL_GPIO_Init+0x1e4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a3d      	ldr	r2, [pc, #244]	@ (8001480 <HAL_GPIO_Init+0x2cc>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_GPIO_Init+0x1e0>
 8001390:	2303      	movs	r3, #3
 8001392:	e006      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 8001394:	2304      	movs	r3, #4
 8001396:	e004      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 8001398:	2302      	movs	r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <HAL_GPIO_Init+0x1ee>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a4:	f002 0203 	and.w	r2, r2, #3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4093      	lsls	r3, r2
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b2:	492f      	ldr	r1, [pc, #188]	@ (8001470 <HAL_GPIO_Init+0x2bc>)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	492c      	ldr	r1, [pc, #176]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013da:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4928      	ldr	r1, [pc, #160]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f4:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4922      	ldr	r1, [pc, #136]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60cb      	str	r3, [r1, #12]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	491e      	ldr	r1, [pc, #120]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4918      	ldr	r1, [pc, #96]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4914      	ldr	r1, [pc, #80]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 8001434:	4013      	ands	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d021      	beq.n	8001488 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	490e      	ldr	r1, [pc, #56]	@ (8001484 <HAL_GPIO_Init+0x2d0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e021      	b.n	8001496 <HAL_GPIO_Init+0x2e2>
 8001452:	bf00      	nop
 8001454:	10320000 	.word	0x10320000
 8001458:	10310000 	.word	0x10310000
 800145c:	10220000 	.word	0x10220000
 8001460:	10210000 	.word	0x10210000
 8001464:	10120000 	.word	0x10120000
 8001468:	10110000 	.word	0x10110000
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	40010800 	.word	0x40010800
 8001478:	40010c00 	.word	0x40010c00
 800147c:	40011000 	.word	0x40011000
 8001480:	40011400 	.word	0x40011400
 8001484:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	43db      	mvns	r3, r3
 8001490:	4909      	ldr	r1, [pc, #36]	@ (80014b8 <HAL_GPIO_Init+0x304>)
 8001492:	4013      	ands	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	3301      	adds	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f47f ae8e 	bne.w	80011c8 <HAL_GPIO_Init+0x14>
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	372c      	adds	r7, #44	@ 0x2c
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f92a 	bl	8000764 <HAL_GPIO_EXTI_Callback>
  }
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e272      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8087 	beq.w	800164a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800153c:	4b92      	ldr	r3, [pc, #584]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b04      	cmp	r3, #4
 8001546:	d00c      	beq.n	8001562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001548:	4b8f      	ldr	r3, [pc, #572]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d112      	bne.n	800157a <HAL_RCC_OscConfig+0x5e>
 8001554:	4b8c      	ldr	r3, [pc, #560]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001560:	d10b      	bne.n	800157a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001562:	4b89      	ldr	r3, [pc, #548]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d06c      	beq.n	8001648 <HAL_RCC_OscConfig+0x12c>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d168      	bne.n	8001648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e24c      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x76>
 8001584:	4b80      	ldr	r3, [pc, #512]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a7f      	ldr	r2, [pc, #508]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0xd4>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b7b      	ldr	r3, [pc, #492]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7a      	ldr	r2, [pc, #488]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b78      	ldr	r3, [pc, #480]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a77      	ldr	r2, [pc, #476]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xd4>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0xbc>
 80015be:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a71      	ldr	r2, [pc, #452]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xd4>
 80015d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b68      	ldr	r3, [pc, #416]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a67      	ldr	r2, [pc, #412]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc12 	bl	8000e20 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc0e 	bl	8000e20 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e200      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b5d      	ldr	r3, [pc, #372]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xe4>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fbfe 	bl	8000e20 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fbfa 	bl	8000e20 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	@ 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1ec      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b53      	ldr	r3, [pc, #332]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x10c>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d063      	beq.n	800171e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001656:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001662:	4b49      	ldr	r3, [pc, #292]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x18c>
 800166e:	4b46      	ldr	r3, [pc, #280]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x176>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e1c0      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4939      	ldr	r1, [pc, #228]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e03a      	b.n	800171e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_RCC_OscConfig+0x270>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fbb3 	bl	8000e20 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fbaf 	bl	8000e20 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1a1      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4927      	ldr	r1, [pc, #156]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_RCC_OscConfig+0x270>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb92 	bl	8000e20 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fb8e 	bl	8000e20 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e180      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d03a      	beq.n	80017a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d019      	beq.n	8001766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_RCC_OscConfig+0x274>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff fb72 	bl	8000e20 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fb6e 	bl	8000e20 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e160      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_RCC_OscConfig+0x26c>)
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f000 face 	bl	8001d00 <RCC_Delay>
 8001764:	e01c      	b.n	80017a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_RCC_OscConfig+0x274>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff fb58 	bl	8000e20 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001772:	e00f      	b.n	8001794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fb54 	bl	8000e20 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d908      	bls.n	8001794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e146      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	42420000 	.word	0x42420000
 8001790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b92      	ldr	r3, [pc, #584]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e9      	bne.n	8001774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80a6 	beq.w	80018fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b2:	4b8b      	ldr	r3, [pc, #556]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10d      	bne.n	80017da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b88      	ldr	r3, [pc, #544]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a87      	ldr	r2, [pc, #540]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b85      	ldr	r3, [pc, #532]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d6:	2301      	movs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017da:	4b82      	ldr	r3, [pc, #520]	@ (80019e4 <HAL_RCC_OscConfig+0x4c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d118      	bne.n	8001818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e6:	4b7f      	ldr	r3, [pc, #508]	@ (80019e4 <HAL_RCC_OscConfig+0x4c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7e      	ldr	r2, [pc, #504]	@ (80019e4 <HAL_RCC_OscConfig+0x4c8>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fb15 	bl	8000e20 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fa:	f7ff fb11 	bl	8000e20 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	@ 0x64
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e103      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	4b75      	ldr	r3, [pc, #468]	@ (80019e4 <HAL_RCC_OscConfig+0x4c8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x312>
 8001820:	4b6f      	ldr	r3, [pc, #444]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a6e      	ldr	r2, [pc, #440]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	e02d      	b.n	800188a <HAL_RCC_OscConfig+0x36e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x334>
 8001836:	4b6a      	ldr	r3, [pc, #424]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a69      	ldr	r2, [pc, #420]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6213      	str	r3, [r2, #32]
 8001842:	4b67      	ldr	r3, [pc, #412]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a66      	ldr	r2, [pc, #408]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	6213      	str	r3, [r2, #32]
 800184e:	e01c      	b.n	800188a <HAL_RCC_OscConfig+0x36e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d10c      	bne.n	8001872 <HAL_RCC_OscConfig+0x356>
 8001858:	4b61      	ldr	r3, [pc, #388]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a60      	ldr	r2, [pc, #384]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	4b5e      	ldr	r3, [pc, #376]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a5d      	ldr	r2, [pc, #372]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0x36e>
 8001872:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4a5a      	ldr	r2, [pc, #360]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6213      	str	r3, [r2, #32]
 800187e:	4b58      	ldr	r3, [pc, #352]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a57      	ldr	r2, [pc, #348]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fac5 	bl	8000e20 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fac1 	bl	8000e20 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0b1      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ee      	beq.n	800189a <HAL_RCC_OscConfig+0x37e>
 80018bc:	e014      	b.n	80018e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff faaf 	bl	8000e20 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff faab 	bl	8000e20 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e09b      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ee      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d105      	bne.n	80018fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ee:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a3b      	ldr	r2, [pc, #236]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8087 	beq.w	8001a12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d061      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d146      	bne.n	80019a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001918:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <HAL_RCC_OscConfig+0x4cc>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fa7f 	bl	8000e20 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff fa7b 	bl	8000e20 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e06d      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800194c:	d108      	bne.n	8001960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800194e:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4921      	ldr	r1, [pc, #132]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a19      	ldr	r1, [r3, #32]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	430b      	orrs	r3, r1
 8001972:	491b      	ldr	r1, [pc, #108]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_RCC_OscConfig+0x4cc>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fa4f 	bl	8000e20 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fa4b 	bl	8000e20 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e03d      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x46a>
 80019a4:	e035      	b.n	8001a12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_RCC_OscConfig+0x4cc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa38 	bl	8000e20 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa34 	bl	8000e20 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e026      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x498>
 80019d2:	e01e      	b.n	8001a12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e019      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40007000 	.word	0x40007000
 80019e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_RCC_OscConfig+0x500>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0d0      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b6a      	ldr	r3, [pc, #424]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d910      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b67      	ldr	r3, [pc, #412]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4965      	ldr	r1, [pc, #404]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a52      	ldr	r2, [pc, #328]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d040      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d115      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e073      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e06b      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4936      	ldr	r1, [pc, #216]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7ff f986 	bl	8000e20 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff f982 	bl	8000e20 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e053      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b27      	ldr	r3, [pc, #156]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d210      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b24      	ldr	r3, [pc, #144]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4922      	ldr	r1, [pc, #136]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f821 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	@ (8001be8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	@ (8001bec <HAL_RCC_ClockConfig+0x1cc>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8e4 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	08003ff8 	.word	0x08003ff8
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d002      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x30>
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d003      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0x36>
 8001c22:	e027      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c26:	613b      	str	r3, [r7, #16]
      break;
 8001c28:	e027      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	0c9b      	lsrs	r3, r3, #18
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d010      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0c5b      	lsrs	r3, r3, #17
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	4a11      	ldr	r2, [pc, #68]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c56:	fb03 f202 	mul.w	r2, r3, r2
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e004      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	613b      	str	r3, [r7, #16]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	613b      	str	r3, [r7, #16]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	693b      	ldr	r3, [r7, #16]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	007a1200 	.word	0x007a1200
 8001c90:	08004010 	.word	0x08004010
 8001c94:	08004020 	.word	0x08004020
 8001c98:	003d0900 	.word	0x003d0900

08001c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	@ (8001cac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff2 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08004008 	.word	0x08004008

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	0adb      	lsrs	r3, r3, #11
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08004008 	.word	0x08004008

08001d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d08:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <RCC_Delay+0x34>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <RCC_Delay+0x38>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a5b      	lsrs	r3, r3, #9
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d1c:	bf00      	nop
  }
  while (Delay --);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	60fa      	str	r2, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f9      	bne.n	8001d1c <RCC_Delay+0x1c>
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000000 	.word	0x20000000
 8001d38:	10624dd3 	.word	0x10624dd3

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fe9c 	bl	8000aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 fb94 	bl	80024a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d001      	beq.n	8001df4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a18      	ldr	r2, [pc, #96]	@ (8001e64 <HAL_TIM_Base_Start+0x88>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_TIM_Base_Start+0x48>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Start+0x48>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_TIM_Base_Start+0x8c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Start+0x48>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <HAL_TIM_Base_Start+0x90>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d010      	beq.n	8001e58 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	e007      	b.n	8001e58 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800

08001e70 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10f      	bne.n	8001ea8 <HAL_TIM_Base_Stop+0x38>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a1a      	ldr	r2, [r3, #32]
 8001e8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_Base_Stop+0x38>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e03a      	b.n	8001f4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <HAL_TIM_Base_Start_IT+0x98>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x58>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efe:	d009      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x58>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x58>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <HAL_TIM_Base_Start_IT+0xa0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d010      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	e007      	b.n	8001f48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40000800 	.word	0x40000800

08001f60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10f      	bne.n	8001fa8 <HAL_TIM_Base_Stop_IT+0x48>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_Base_Stop_IT+0x48>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e041      	b.n	8002054 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f839 	bl	800205c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 fa53 	bl	80024a8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01b      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f06f 0202 	mvn.w	r2, #2
 80020a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f9da 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 80020be:	e005      	b.n	80020cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f9cd 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f9dc 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01b      	beq.n	800211e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0204 	mvn.w	r2, #4
 80020ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f9b4 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 800210a:	e005      	b.n	8002118 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f9a7 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9b6 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01b      	beq.n	800216a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0208 	mvn.w	r2, #8
 800213a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2204      	movs	r2, #4
 8002140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f98e 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 8002156:	e005      	b.n	8002164 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f981 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f990 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01b      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f06f 0210 	mvn.w	r2, #16
 8002186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2208      	movs	r2, #8
 800218c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f968 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
 80021a2:	e005      	b.n	80021b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f95b 	bl	8002460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f96a 	bl	8002484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00c      	beq.n	80021da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0201 	mvn.w	r2, #1
 80021d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe f9df 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00c      	beq.n	80021fe <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb52 	bl	80028a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800221a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f93a 	bl	8002496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00c      	beq.n	8002246 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d007      	beq.n	8002246 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 0220 	mvn.w	r2, #32
 800223e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fb25 	bl	8002890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_TIM_ConfigClockSource+0x1c>
 8002266:	2302      	movs	r3, #2
 8002268:	e0b4      	b.n	80023d4 <HAL_TIM_ConfigClockSource+0x186>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002288:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002290:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a2:	d03e      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0xd4>
 80022a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a8:	f200 8087 	bhi.w	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b0:	f000 8086 	beq.w	80023c0 <HAL_TIM_ConfigClockSource+0x172>
 80022b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b8:	d87f      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022ba:	2b70      	cmp	r3, #112	@ 0x70
 80022bc:	d01a      	beq.n	80022f4 <HAL_TIM_ConfigClockSource+0xa6>
 80022be:	2b70      	cmp	r3, #112	@ 0x70
 80022c0:	d87b      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022c2:	2b60      	cmp	r3, #96	@ 0x60
 80022c4:	d050      	beq.n	8002368 <HAL_TIM_ConfigClockSource+0x11a>
 80022c6:	2b60      	cmp	r3, #96	@ 0x60
 80022c8:	d877      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022ca:	2b50      	cmp	r3, #80	@ 0x50
 80022cc:	d03c      	beq.n	8002348 <HAL_TIM_ConfigClockSource+0xfa>
 80022ce:	2b50      	cmp	r3, #80	@ 0x50
 80022d0:	d873      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022d2:	2b40      	cmp	r3, #64	@ 0x40
 80022d4:	d058      	beq.n	8002388 <HAL_TIM_ConfigClockSource+0x13a>
 80022d6:	2b40      	cmp	r3, #64	@ 0x40
 80022d8:	d86f      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022da:	2b30      	cmp	r3, #48	@ 0x30
 80022dc:	d064      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x15a>
 80022de:	2b30      	cmp	r3, #48	@ 0x30
 80022e0:	d86b      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d060      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x15a>
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d867      	bhi.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d05c      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x15a>
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d05a      	beq.n	80023a8 <HAL_TIM_ConfigClockSource+0x15a>
 80022f2:	e062      	b.n	80023ba <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002304:	f000 fa46 	bl	8002794 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002316:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	609a      	str	r2, [r3, #8]
      break;
 8002320:	e04f      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002332:	f000 fa2f 	bl	8002794 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002344:	609a      	str	r2, [r3, #8]
      break;
 8002346:	e03c      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002354:	461a      	mov	r2, r3
 8002356:	f000 f9a6 	bl	80026a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2150      	movs	r1, #80	@ 0x50
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f9fd 	bl	8002760 <TIM_ITRx_SetConfig>
      break;
 8002366:	e02c      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002374:	461a      	mov	r2, r3
 8002376:	f000 f9c4 	bl	8002702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2160      	movs	r1, #96	@ 0x60
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f9ed 	bl	8002760 <TIM_ITRx_SetConfig>
      break;
 8002386:	e01c      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002394:	461a      	mov	r2, r3
 8002396:	f000 f986 	bl	80026a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2140      	movs	r1, #64	@ 0x40
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f9dd 	bl	8002760 <TIM_ITRx_SetConfig>
      break;
 80023a6:	e00c      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 f9d4 	bl	8002760 <TIM_ITRx_SetConfig>
      break;
 80023b8:	e003      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
      break;
 80023be:	e000      	b.n	80023c2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e031      	b.n	8002458 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8bc 	bl	8002584 <TIM_SlaveTimer_SetConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e018      	b.n	8002458 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002434:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002444:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002578 <TIM_Base_SetConfig+0xd0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00b      	beq.n	80024d8 <TIM_Base_SetConfig+0x30>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c6:	d007      	beq.n	80024d8 <TIM_Base_SetConfig+0x30>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a2c      	ldr	r2, [pc, #176]	@ (800257c <TIM_Base_SetConfig+0xd4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0x30>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002580 <TIM_Base_SetConfig+0xd8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a22      	ldr	r2, [pc, #136]	@ (8002578 <TIM_Base_SetConfig+0xd0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <TIM_Base_SetConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f8:	d007      	beq.n	800250a <TIM_Base_SetConfig+0x62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <TIM_Base_SetConfig+0xd4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_Base_SetConfig+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1e      	ldr	r2, [pc, #120]	@ (8002580 <TIM_Base_SetConfig+0xd8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d108      	bne.n	800251c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <TIM_Base_SetConfig+0xd0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]
  }
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800

08002584 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f023 0307 	bic.w	r3, r3, #7
 80025b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b70      	cmp	r3, #112	@ 0x70
 80025cc:	d01a      	beq.n	8002604 <TIM_SlaveTimer_SetConfig+0x80>
 80025ce:	2b70      	cmp	r3, #112	@ 0x70
 80025d0:	d860      	bhi.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
 80025d2:	2b60      	cmp	r3, #96	@ 0x60
 80025d4:	d054      	beq.n	8002680 <TIM_SlaveTimer_SetConfig+0xfc>
 80025d6:	2b60      	cmp	r3, #96	@ 0x60
 80025d8:	d85c      	bhi.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
 80025da:	2b50      	cmp	r3, #80	@ 0x50
 80025dc:	d046      	beq.n	800266c <TIM_SlaveTimer_SetConfig+0xe8>
 80025de:	2b50      	cmp	r3, #80	@ 0x50
 80025e0:	d858      	bhi.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
 80025e2:	2b40      	cmp	r3, #64	@ 0x40
 80025e4:	d019      	beq.n	800261a <TIM_SlaveTimer_SetConfig+0x96>
 80025e6:	2b40      	cmp	r3, #64	@ 0x40
 80025e8:	d854      	bhi.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
 80025ea:	2b30      	cmp	r3, #48	@ 0x30
 80025ec:	d055      	beq.n	800269a <TIM_SlaveTimer_SetConfig+0x116>
 80025ee:	2b30      	cmp	r3, #48	@ 0x30
 80025f0:	d850      	bhi.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d051      	beq.n	800269a <TIM_SlaveTimer_SetConfig+0x116>
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d84c      	bhi.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d04d      	beq.n	800269a <TIM_SlaveTimer_SetConfig+0x116>
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d04b      	beq.n	800269a <TIM_SlaveTimer_SetConfig+0x116>
 8002602:	e047      	b.n	8002694 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002614:	f000 f8be 	bl	8002794 <TIM_ETR_SetConfig>
      break;
 8002618:	e040      	b.n	800269c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d101      	bne.n	8002626 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e03b      	b.n	800269e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800264c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	4313      	orrs	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	621a      	str	r2, [r3, #32]
      break;
 800266a:	e017      	b.n	800269c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002678:	461a      	mov	r2, r3
 800267a:	f000 f814 	bl	80026a6 <TIM_TI1_ConfigInputStage>
      break;
 800267e:	e00d      	b.n	800269c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268c:	461a      	mov	r2, r3
 800268e:	f000 f838 	bl	8002702 <TIM_TI2_ConfigInputStage>
      break;
 8002692:	e003      	b.n	800269c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]
      break;
 8002698:	e000      	b.n	800269c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800269a:	bf00      	nop
  }

  return status;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b087      	sub	sp, #28
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 0201 	bic.w	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 030a 	bic.w	r3, r3, #10
 80026e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	621a      	str	r2, [r3, #32]
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002702:	b480      	push	{r7}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 0210 	bic.w	r2, r3, #16
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800272c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	031b      	lsls	r3, r3, #12
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800273e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002776:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	f043 0307 	orr.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	021a      	lsls	r2, r3, #8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e046      	b.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	@ (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002838:	d009      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a10      	ldr	r2, [pc, #64]	@ (800288c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800

08002890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e042      	b.n	800294c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f94c 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	@ 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fdb7 	bl	800346c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800290c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800292c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b20      	cmp	r3, #32
 8002972:	d175      	bne.n	8002a60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_UART_Transmit+0x2c>
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e06e      	b.n	8002a62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2221      	movs	r2, #33	@ 0x21
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002992:	f7fe fa45 	bl	8000e20 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ac:	d108      	bne.n	80029c0 <HAL_UART_Transmit+0x6c>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e003      	b.n	80029c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029c8:	e02e      	b.n	8002a28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2180      	movs	r1, #128	@ 0x80
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fb1c 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e03a      	b.n	8002a62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3302      	adds	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e007      	b.n	8002a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	3301      	adds	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1cb      	bne.n	80029ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2140      	movs	r1, #64	@ 0x40
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fae8 	bl	8003012 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e006      	b.n	8002a62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	4613      	mov	r3, r2
 8002a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d112      	bne.n	8002aaa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_UART_Receive_IT+0x26>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e00b      	b.n	8002aac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fb0f 	bl	80030c4 <UART_Start_Receive_IT>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	e000      	b.n	8002aac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0ba      	sub	sp, #232	@ 0xe8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_UART_IRQHandler+0x66>
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fbec 	bl	80032f0 <UART_Receive_IT>
      return;
 8002b18:	e25b      	b.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80de 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x22c>
 8002b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80d1 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xae>
 8002b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_UART_IRQHandler+0xd2>
 8002b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_UART_IRQHandler+0xf6>
 8002b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d011      	beq.n	8002bda <HAL_UART_IRQHandler+0x126>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f043 0208 	orr.w	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 81f2 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_UART_IRQHandler+0x14e>
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb77 	bl	80032f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_UART_IRQHandler+0x17a>
 8002c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04f      	beq.n	8002cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa81 	bl	8003136 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d041      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3314      	adds	r3, #20
 8002c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1d9      	bne.n	8002c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e94 <HAL_UART_IRQHandler+0x3e0>)
 8002c9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fa0e 	bl	80010c4 <HAL_DMA_Abort_IT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	e00e      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f993 	bl	8002fea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e00a      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f98f 	bl	8002fea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e006      	b.n	8002cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f98b 	bl	8002fea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002cda:	e175      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	bf00      	nop
    return;
 8002cde:	e173      	b.n	8002fc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 814f 	bne.w	8002f88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8148 	beq.w	8002f88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8141 	beq.w	8002f88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80b6 	beq.w	8002e98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8145 	beq.w	8002fcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	f080 813e 	bcs.w	8002fcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	f000 8088 	beq.w	8002e74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1d9      	bne.n	8002d64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3314      	adds	r3, #20
 8002dd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dd4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ddc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002de6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e1      	bne.n	8002db0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3314      	adds	r3, #20
 8002df2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e3      	bne.n	8002dec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e44:	f023 0310 	bic.w	r3, r3, #16
 8002e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e3      	bne.n	8002e32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f8ed 	bl	800104e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8b6 	bl	8002ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e90:	e09c      	b.n	8002fcc <HAL_UART_IRQHandler+0x518>
 8002e92:	bf00      	nop
 8002e94:	080031fb 	.word	0x080031fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 808e 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8089 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ee2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e3      	bne.n	8002ebe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	623b      	str	r3, [r7, #32]
   return(result);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e3      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f60:	61fa      	str	r2, [r7, #28]
 8002f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	69b9      	ldr	r1, [r7, #24]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e3      	bne.n	8002f3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f83b 	bl	8002ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f86:	e023      	b.n	8002fd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x4f4>
 8002f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f93e 	bl	8003222 <UART_Transmit_IT>
    return;
 8002fa6:	e014      	b.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f97d 	bl	80032c0 <UART_EndTransmit_IT>
    return;
 8002fc6:	e004      	b.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002fc8:	bf00      	nop
 8002fca:	e002      	b.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	37e8      	adds	r7, #232	@ 0xe8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	e03b      	b.n	800309c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d037      	beq.n	800309c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fd fef8 	bl	8000e20 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	6a3a      	ldr	r2, [r7, #32]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <UART_WaitOnFlagUntilTimeout+0x30>
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e03a      	b.n	80030bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d023      	beq.n	800309c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b80      	cmp	r3, #128	@ 0x80
 8003058:	d020      	beq.n	800309c <UART_WaitOnFlagUntilTimeout+0x8a>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d01d      	beq.n	800309c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b08      	cmp	r3, #8
 800306c:	d116      	bne.n	800309c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f856 	bl	8003136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2208      	movs	r2, #8
 800308e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e00f      	b.n	80030bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d0b4      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2222      	movs	r2, #34	@ 0x22
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003108:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0220 	orr.w	r2, r2, #32
 8003128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003136:	b480      	push	{r7}
 8003138:	b095      	sub	sp, #84	@ 0x54
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330c      	adds	r3, #12
 800315c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800315e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	61fb      	str	r3, [r7, #28]
   return(result);
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d119      	bne.n	80031e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f023 0310 	bic.w	r3, r3, #16
 80031c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ce:	61ba      	str	r2, [r7, #24]
 80031d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6979      	ldr	r1, [r7, #20]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	613b      	str	r3, [r7, #16]
   return(result);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031f0:	bf00      	nop
 80031f2:	3754      	adds	r7, #84	@ 0x54
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fee8 	bl	8002fea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b21      	cmp	r3, #33	@ 0x21
 8003234:	d13e      	bne.n	80032b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323e:	d114      	bne.n	800326a <UART_Transmit_IT+0x48>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d110      	bne.n	800326a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800325c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	621a      	str	r2, [r3, #32]
 8003268:	e008      	b.n	800327c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6211      	str	r1, [r2, #32]
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4619      	mov	r1, r3
 800328a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800329e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fe79 	bl	8002fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	@ 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b22      	cmp	r3, #34	@ 0x22
 8003302:	f040 80ae 	bne.w	8003462 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330e:	d117      	bne.n	8003340 <UART_Receive_IT+0x50>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d113      	bne.n	8003340 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	b29a      	uxth	r2, r3
 8003330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
 800333e:	e026      	b.n	800338e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003352:	d007      	beq.n	8003364 <UART_Receive_IT+0x74>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <UART_Receive_IT+0x82>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e008      	b.n	8003384 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800337e:	b2da      	uxtb	r2, r3
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29b      	uxth	r3, r3
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4619      	mov	r1, r3
 800339c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d15d      	bne.n	800345e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0220 	bic.w	r2, r2, #32
 80033b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d135      	bne.n	8003454 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f023 0310 	bic.w	r3, r3, #16
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340e:	623a      	str	r2, [r7, #32]
 8003410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	69f9      	ldr	r1, [r7, #28]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	61bb      	str	r3, [r7, #24]
   return(result);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e5      	bne.n	80033ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d10a      	bne.n	8003446 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fdd5 	bl	8002ffc <HAL_UARTEx_RxEventCallback>
 8003452:	e002      	b.n	800345a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fd fa8b 	bl	8000970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e002      	b.n	8003464 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3730      	adds	r7, #48	@ 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034a6:	f023 030c 	bic.w	r3, r3, #12
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <UART_SetConfig+0x114>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d103      	bne.n	80034dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7fe fc00 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	e002      	b.n	80034e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034dc:	f7fe fbe8 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 80034e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	009a      	lsls	r2, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <UART_SetConfig+0x118>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	0119      	lsls	r1, r3, #4
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fbb2 f2f3 	udiv	r2, r2, r3
 8003518:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <UART_SetConfig+0x118>)
 800351a:	fba3 0302 	umull	r0, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2064      	movs	r0, #100	@ 0x64
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	3332      	adds	r3, #50	@ 0x32
 800352c:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <UART_SetConfig+0x118>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003538:	4419      	add	r1, r3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009a      	lsls	r2, r3, #2
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <UART_SetConfig+0x118>)
 8003552:	fba3 0302 	umull	r0, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2064      	movs	r0, #100	@ 0x64
 800355a:	fb00 f303 	mul.w	r3, r0, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	3332      	adds	r3, #50	@ 0x32
 8003564:	4a07      	ldr	r2, [pc, #28]	@ (8003584 <UART_SetConfig+0x118>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	440a      	add	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40013800 	.word	0x40013800
 8003584:	51eb851f 	.word	0x51eb851f

08003588 <sniprintf>:
 8003588:	b40c      	push	{r2, r3}
 800358a:	b530      	push	{r4, r5, lr}
 800358c:	4b18      	ldr	r3, [pc, #96]	@ (80035f0 <sniprintf+0x68>)
 800358e:	1e0c      	subs	r4, r1, #0
 8003590:	681d      	ldr	r5, [r3, #0]
 8003592:	b09d      	sub	sp, #116	@ 0x74
 8003594:	da08      	bge.n	80035a8 <sniprintf+0x20>
 8003596:	238b      	movs	r3, #139	@ 0x8b
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	602b      	str	r3, [r5, #0]
 800359e:	b01d      	add	sp, #116	@ 0x74
 80035a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035a4:	b002      	add	sp, #8
 80035a6:	4770      	bx	lr
 80035a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80035ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80035b6:	bf0c      	ite	eq
 80035b8:	4623      	moveq	r3, r4
 80035ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80035be:	9304      	str	r3, [sp, #16]
 80035c0:	9307      	str	r3, [sp, #28]
 80035c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035c6:	9002      	str	r0, [sp, #8]
 80035c8:	9006      	str	r0, [sp, #24]
 80035ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80035ce:	4628      	mov	r0, r5
 80035d0:	ab21      	add	r3, sp, #132	@ 0x84
 80035d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80035d4:	a902      	add	r1, sp, #8
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	f000 f992 	bl	8003900 <_svfiprintf_r>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	bfbc      	itt	lt
 80035e0:	238b      	movlt	r3, #139	@ 0x8b
 80035e2:	602b      	strlt	r3, [r5, #0]
 80035e4:	2c00      	cmp	r4, #0
 80035e6:	d0da      	beq.n	800359e <sniprintf+0x16>
 80035e8:	2200      	movs	r2, #0
 80035ea:	9b02      	ldr	r3, [sp, #8]
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e7d6      	b.n	800359e <sniprintf+0x16>
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <__errno>:
 8003604:	4b01      	ldr	r3, [pc, #4]	@ (800360c <__errno+0x8>)
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	2600      	movs	r6, #0
 8003614:	4d0c      	ldr	r5, [pc, #48]	@ (8003648 <__libc_init_array+0x38>)
 8003616:	4c0d      	ldr	r4, [pc, #52]	@ (800364c <__libc_init_array+0x3c>)
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	42a6      	cmp	r6, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	f000 fc76 	bl	8003f10 <_init>
 8003624:	2600      	movs	r6, #0
 8003626:	4d0a      	ldr	r5, [pc, #40]	@ (8003650 <__libc_init_array+0x40>)
 8003628:	4c0a      	ldr	r4, [pc, #40]	@ (8003654 <__libc_init_array+0x44>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	42a6      	cmp	r6, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	f855 3b04 	ldr.w	r3, [r5], #4
 8003638:	4798      	blx	r3
 800363a:	3601      	adds	r6, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003642:	4798      	blx	r3
 8003644:	3601      	adds	r6, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	08004058 	.word	0x08004058
 800364c:	08004058 	.word	0x08004058
 8003650:	08004058 	.word	0x08004058
 8003654:	0800405c 	.word	0x0800405c

08003658 <__retarget_lock_acquire_recursive>:
 8003658:	4770      	bx	lr

0800365a <__retarget_lock_release_recursive>:
 800365a:	4770      	bx	lr

0800365c <_free_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4605      	mov	r5, r0
 8003660:	2900      	cmp	r1, #0
 8003662:	d040      	beq.n	80036e6 <_free_r+0x8a>
 8003664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003668:	1f0c      	subs	r4, r1, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfb8      	it	lt
 800366e:	18e4      	addlt	r4, r4, r3
 8003670:	f000 f8de 	bl	8003830 <__malloc_lock>
 8003674:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <_free_r+0x8c>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	b933      	cbnz	r3, 8003688 <_free_r+0x2c>
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	6014      	str	r4, [r2, #0]
 800367e:	4628      	mov	r0, r5
 8003680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003684:	f000 b8da 	b.w	800383c <__malloc_unlock>
 8003688:	42a3      	cmp	r3, r4
 800368a:	d908      	bls.n	800369e <_free_r+0x42>
 800368c:	6820      	ldr	r0, [r4, #0]
 800368e:	1821      	adds	r1, r4, r0
 8003690:	428b      	cmp	r3, r1
 8003692:	bf01      	itttt	eq
 8003694:	6819      	ldreq	r1, [r3, #0]
 8003696:	685b      	ldreq	r3, [r3, #4]
 8003698:	1809      	addeq	r1, r1, r0
 800369a:	6021      	streq	r1, [r4, #0]
 800369c:	e7ed      	b.n	800367a <_free_r+0x1e>
 800369e:	461a      	mov	r2, r3
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b10b      	cbz	r3, 80036a8 <_free_r+0x4c>
 80036a4:	42a3      	cmp	r3, r4
 80036a6:	d9fa      	bls.n	800369e <_free_r+0x42>
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	1850      	adds	r0, r2, r1
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d10b      	bne.n	80036c8 <_free_r+0x6c>
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	4401      	add	r1, r0
 80036b4:	1850      	adds	r0, r2, r1
 80036b6:	4283      	cmp	r3, r0
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	d1e0      	bne.n	800367e <_free_r+0x22>
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4408      	add	r0, r1
 80036c2:	6010      	str	r0, [r2, #0]
 80036c4:	6053      	str	r3, [r2, #4]
 80036c6:	e7da      	b.n	800367e <_free_r+0x22>
 80036c8:	d902      	bls.n	80036d0 <_free_r+0x74>
 80036ca:	230c      	movs	r3, #12
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	e7d6      	b.n	800367e <_free_r+0x22>
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	1821      	adds	r1, r4, r0
 80036d4:	428b      	cmp	r3, r1
 80036d6:	bf01      	itttt	eq
 80036d8:	6819      	ldreq	r1, [r3, #0]
 80036da:	685b      	ldreq	r3, [r3, #4]
 80036dc:	1809      	addeq	r1, r1, r0
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	6063      	str	r3, [r4, #4]
 80036e2:	6054      	str	r4, [r2, #4]
 80036e4:	e7cb      	b.n	800367e <_free_r+0x22>
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	20000344 	.word	0x20000344

080036ec <sbrk_aligned>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4e0f      	ldr	r6, [pc, #60]	@ (800372c <sbrk_aligned+0x40>)
 80036f0:	460c      	mov	r4, r1
 80036f2:	6831      	ldr	r1, [r6, #0]
 80036f4:	4605      	mov	r5, r0
 80036f6:	b911      	cbnz	r1, 80036fe <sbrk_aligned+0x12>
 80036f8:	f000 fba8 	bl	8003e4c <_sbrk_r>
 80036fc:	6030      	str	r0, [r6, #0]
 80036fe:	4621      	mov	r1, r4
 8003700:	4628      	mov	r0, r5
 8003702:	f000 fba3 	bl	8003e4c <_sbrk_r>
 8003706:	1c43      	adds	r3, r0, #1
 8003708:	d103      	bne.n	8003712 <sbrk_aligned+0x26>
 800370a:	f04f 34ff 	mov.w	r4, #4294967295
 800370e:	4620      	mov	r0, r4
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d0f8      	beq.n	800370e <sbrk_aligned+0x22>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fb94 	bl	8003e4c <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1f2      	bne.n	800370e <sbrk_aligned+0x22>
 8003728:	e7ef      	b.n	800370a <sbrk_aligned+0x1e>
 800372a:	bf00      	nop
 800372c:	20000340 	.word	0x20000340

08003730 <_malloc_r>:
 8003730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003734:	1ccd      	adds	r5, r1, #3
 8003736:	f025 0503 	bic.w	r5, r5, #3
 800373a:	3508      	adds	r5, #8
 800373c:	2d0c      	cmp	r5, #12
 800373e:	bf38      	it	cc
 8003740:	250c      	movcc	r5, #12
 8003742:	2d00      	cmp	r5, #0
 8003744:	4606      	mov	r6, r0
 8003746:	db01      	blt.n	800374c <_malloc_r+0x1c>
 8003748:	42a9      	cmp	r1, r5
 800374a:	d904      	bls.n	8003756 <_malloc_r+0x26>
 800374c:	230c      	movs	r3, #12
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	2000      	movs	r0, #0
 8003752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800382c <_malloc_r+0xfc>
 800375a:	f000 f869 	bl	8003830 <__malloc_lock>
 800375e:	f8d8 3000 	ldr.w	r3, [r8]
 8003762:	461c      	mov	r4, r3
 8003764:	bb44      	cbnz	r4, 80037b8 <_malloc_r+0x88>
 8003766:	4629      	mov	r1, r5
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffbf 	bl	80036ec <sbrk_aligned>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	4604      	mov	r4, r0
 8003772:	d158      	bne.n	8003826 <_malloc_r+0xf6>
 8003774:	f8d8 4000 	ldr.w	r4, [r8]
 8003778:	4627      	mov	r7, r4
 800377a:	2f00      	cmp	r7, #0
 800377c:	d143      	bne.n	8003806 <_malloc_r+0xd6>
 800377e:	2c00      	cmp	r4, #0
 8003780:	d04b      	beq.n	800381a <_malloc_r+0xea>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4639      	mov	r1, r7
 8003786:	4630      	mov	r0, r6
 8003788:	eb04 0903 	add.w	r9, r4, r3
 800378c:	f000 fb5e 	bl	8003e4c <_sbrk_r>
 8003790:	4581      	cmp	r9, r0
 8003792:	d142      	bne.n	800381a <_malloc_r+0xea>
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	4630      	mov	r0, r6
 8003798:	1a6d      	subs	r5, r5, r1
 800379a:	4629      	mov	r1, r5
 800379c:	f7ff ffa6 	bl	80036ec <sbrk_aligned>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d03a      	beq.n	800381a <_malloc_r+0xea>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	442b      	add	r3, r5
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	f8d8 3000 	ldr.w	r3, [r8]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	bb62      	cbnz	r2, 800380c <_malloc_r+0xdc>
 80037b2:	f8c8 7000 	str.w	r7, [r8]
 80037b6:	e00f      	b.n	80037d8 <_malloc_r+0xa8>
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	1b52      	subs	r2, r2, r5
 80037bc:	d420      	bmi.n	8003800 <_malloc_r+0xd0>
 80037be:	2a0b      	cmp	r2, #11
 80037c0:	d917      	bls.n	80037f2 <_malloc_r+0xc2>
 80037c2:	1961      	adds	r1, r4, r5
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	6025      	str	r5, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	6059      	strne	r1, [r3, #4]
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	bf08      	it	eq
 80037d0:	f8c8 1000 	streq.w	r1, [r8]
 80037d4:	5162      	str	r2, [r4, r5]
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 f82f 	bl	800383c <__malloc_unlock>
 80037de:	f104 000b 	add.w	r0, r4, #11
 80037e2:	1d23      	adds	r3, r4, #4
 80037e4:	f020 0007 	bic.w	r0, r0, #7
 80037e8:	1ac2      	subs	r2, r0, r3
 80037ea:	bf1c      	itt	ne
 80037ec:	1a1b      	subne	r3, r3, r0
 80037ee:	50a3      	strne	r3, [r4, r2]
 80037f0:	e7af      	b.n	8003752 <_malloc_r+0x22>
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	bf0c      	ite	eq
 80037f8:	f8c8 2000 	streq.w	r2, [r8]
 80037fc:	605a      	strne	r2, [r3, #4]
 80037fe:	e7eb      	b.n	80037d8 <_malloc_r+0xa8>
 8003800:	4623      	mov	r3, r4
 8003802:	6864      	ldr	r4, [r4, #4]
 8003804:	e7ae      	b.n	8003764 <_malloc_r+0x34>
 8003806:	463c      	mov	r4, r7
 8003808:	687f      	ldr	r7, [r7, #4]
 800380a:	e7b6      	b.n	800377a <_malloc_r+0x4a>
 800380c:	461a      	mov	r2, r3
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	42a3      	cmp	r3, r4
 8003812:	d1fb      	bne.n	800380c <_malloc_r+0xdc>
 8003814:	2300      	movs	r3, #0
 8003816:	6053      	str	r3, [r2, #4]
 8003818:	e7de      	b.n	80037d8 <_malloc_r+0xa8>
 800381a:	230c      	movs	r3, #12
 800381c:	4630      	mov	r0, r6
 800381e:	6033      	str	r3, [r6, #0]
 8003820:	f000 f80c 	bl	800383c <__malloc_unlock>
 8003824:	e794      	b.n	8003750 <_malloc_r+0x20>
 8003826:	6005      	str	r5, [r0, #0]
 8003828:	e7d6      	b.n	80037d8 <_malloc_r+0xa8>
 800382a:	bf00      	nop
 800382c:	20000344 	.word	0x20000344

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	@ (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff bf11 	b.w	8003658 <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	2000033c 	.word	0x2000033c

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff bf0c 	b.w	800365a <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	2000033c 	.word	0x2000033c

08003848 <__ssputs_r>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	461f      	mov	r7, r3
 800384e:	688e      	ldr	r6, [r1, #8]
 8003850:	4682      	mov	sl, r0
 8003852:	42be      	cmp	r6, r7
 8003854:	460c      	mov	r4, r1
 8003856:	4690      	mov	r8, r2
 8003858:	680b      	ldr	r3, [r1, #0]
 800385a:	d82d      	bhi.n	80038b8 <__ssputs_r+0x70>
 800385c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003864:	d026      	beq.n	80038b4 <__ssputs_r+0x6c>
 8003866:	6965      	ldr	r5, [r4, #20]
 8003868:	6909      	ldr	r1, [r1, #16]
 800386a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800386e:	eba3 0901 	sub.w	r9, r3, r1
 8003872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003876:	1c7b      	adds	r3, r7, #1
 8003878:	444b      	add	r3, r9
 800387a:	106d      	asrs	r5, r5, #1
 800387c:	429d      	cmp	r5, r3
 800387e:	bf38      	it	cc
 8003880:	461d      	movcc	r5, r3
 8003882:	0553      	lsls	r3, r2, #21
 8003884:	d527      	bpl.n	80038d6 <__ssputs_r+0x8e>
 8003886:	4629      	mov	r1, r5
 8003888:	f7ff ff52 	bl	8003730 <_malloc_r>
 800388c:	4606      	mov	r6, r0
 800388e:	b360      	cbz	r0, 80038ea <__ssputs_r+0xa2>
 8003890:	464a      	mov	r2, r9
 8003892:	6921      	ldr	r1, [r4, #16]
 8003894:	f000 faf8 	bl	8003e88 <memcpy>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800389e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	6126      	str	r6, [r4, #16]
 80038a6:	444e      	add	r6, r9
 80038a8:	6026      	str	r6, [r4, #0]
 80038aa:	463e      	mov	r6, r7
 80038ac:	6165      	str	r5, [r4, #20]
 80038ae:	eba5 0509 	sub.w	r5, r5, r9
 80038b2:	60a5      	str	r5, [r4, #8]
 80038b4:	42be      	cmp	r6, r7
 80038b6:	d900      	bls.n	80038ba <__ssputs_r+0x72>
 80038b8:	463e      	mov	r6, r7
 80038ba:	4632      	mov	r2, r6
 80038bc:	4641      	mov	r1, r8
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	f000 faaa 	bl	8003e18 <memmove>
 80038c4:	2000      	movs	r0, #0
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	1b9b      	subs	r3, r3, r6
 80038ca:	60a3      	str	r3, [r4, #8]
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	4433      	add	r3, r6
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d6:	462a      	mov	r2, r5
 80038d8:	f000 fae4 	bl	8003ea4 <_realloc_r>
 80038dc:	4606      	mov	r6, r0
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1e0      	bne.n	80038a4 <__ssputs_r+0x5c>
 80038e2:	4650      	mov	r0, sl
 80038e4:	6921      	ldr	r1, [r4, #16]
 80038e6:	f7ff feb9 	bl	800365c <_free_r>
 80038ea:	230c      	movs	r3, #12
 80038ec:	f8ca 3000 	str.w	r3, [sl]
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	f04f 30ff 	mov.w	r0, #4294967295
 80038f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	e7e9      	b.n	80038d2 <__ssputs_r+0x8a>
	...

08003900 <_svfiprintf_r>:
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	4698      	mov	r8, r3
 8003906:	898b      	ldrh	r3, [r1, #12]
 8003908:	4607      	mov	r7, r0
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	460d      	mov	r5, r1
 800390e:	4614      	mov	r4, r2
 8003910:	b09d      	sub	sp, #116	@ 0x74
 8003912:	d510      	bpl.n	8003936 <_svfiprintf_r+0x36>
 8003914:	690b      	ldr	r3, [r1, #16]
 8003916:	b973      	cbnz	r3, 8003936 <_svfiprintf_r+0x36>
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	f7ff ff09 	bl	8003730 <_malloc_r>
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	6128      	str	r0, [r5, #16]
 8003922:	b930      	cbnz	r0, 8003932 <_svfiprintf_r+0x32>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	b01d      	add	sp, #116	@ 0x74
 800392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003932:	2340      	movs	r3, #64	@ 0x40
 8003934:	616b      	str	r3, [r5, #20]
 8003936:	2300      	movs	r3, #0
 8003938:	9309      	str	r3, [sp, #36]	@ 0x24
 800393a:	2320      	movs	r3, #32
 800393c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003940:	2330      	movs	r3, #48	@ 0x30
 8003942:	f04f 0901 	mov.w	r9, #1
 8003946:	f8cd 800c 	str.w	r8, [sp, #12]
 800394a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003ae4 <_svfiprintf_r+0x1e4>
 800394e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003952:	4623      	mov	r3, r4
 8003954:	469a      	mov	sl, r3
 8003956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395a:	b10a      	cbz	r2, 8003960 <_svfiprintf_r+0x60>
 800395c:	2a25      	cmp	r2, #37	@ 0x25
 800395e:	d1f9      	bne.n	8003954 <_svfiprintf_r+0x54>
 8003960:	ebba 0b04 	subs.w	fp, sl, r4
 8003964:	d00b      	beq.n	800397e <_svfiprintf_r+0x7e>
 8003966:	465b      	mov	r3, fp
 8003968:	4622      	mov	r2, r4
 800396a:	4629      	mov	r1, r5
 800396c:	4638      	mov	r0, r7
 800396e:	f7ff ff6b 	bl	8003848 <__ssputs_r>
 8003972:	3001      	adds	r0, #1
 8003974:	f000 80a7 	beq.w	8003ac6 <_svfiprintf_r+0x1c6>
 8003978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800397a:	445a      	add	r2, fp
 800397c:	9209      	str	r2, [sp, #36]	@ 0x24
 800397e:	f89a 3000 	ldrb.w	r3, [sl]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809f 	beq.w	8003ac6 <_svfiprintf_r+0x1c6>
 8003988:	2300      	movs	r3, #0
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003992:	f10a 0a01 	add.w	sl, sl, #1
 8003996:	9304      	str	r3, [sp, #16]
 8003998:	9307      	str	r3, [sp, #28]
 800399a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800399e:	931a      	str	r3, [sp, #104]	@ 0x68
 80039a0:	4654      	mov	r4, sl
 80039a2:	2205      	movs	r2, #5
 80039a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a8:	484e      	ldr	r0, [pc, #312]	@ (8003ae4 <_svfiprintf_r+0x1e4>)
 80039aa:	f000 fa5f 	bl	8003e6c <memchr>
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	b9d8      	cbnz	r0, 80039ea <_svfiprintf_r+0xea>
 80039b2:	06d0      	lsls	r0, r2, #27
 80039b4:	bf44      	itt	mi
 80039b6:	2320      	movmi	r3, #32
 80039b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039bc:	0711      	lsls	r1, r2, #28
 80039be:	bf44      	itt	mi
 80039c0:	232b      	movmi	r3, #43	@ 0x2b
 80039c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80039cc:	d015      	beq.n	80039fa <_svfiprintf_r+0xfa>
 80039ce:	4654      	mov	r4, sl
 80039d0:	2000      	movs	r0, #0
 80039d2:	f04f 0c0a 	mov.w	ip, #10
 80039d6:	9a07      	ldr	r2, [sp, #28]
 80039d8:	4621      	mov	r1, r4
 80039da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039de:	3b30      	subs	r3, #48	@ 0x30
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d94b      	bls.n	8003a7c <_svfiprintf_r+0x17c>
 80039e4:	b1b0      	cbz	r0, 8003a14 <_svfiprintf_r+0x114>
 80039e6:	9207      	str	r2, [sp, #28]
 80039e8:	e014      	b.n	8003a14 <_svfiprintf_r+0x114>
 80039ea:	eba0 0308 	sub.w	r3, r0, r8
 80039ee:	fa09 f303 	lsl.w	r3, r9, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	46a2      	mov	sl, r4
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	e7d2      	b.n	80039a0 <_svfiprintf_r+0xa0>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9103      	str	r1, [sp, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfbb      	ittet	lt
 8003a06:	425b      	neglt	r3, r3
 8003a08:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0c:	9307      	strge	r3, [sp, #28]
 8003a0e:	9307      	strlt	r3, [sp, #28]
 8003a10:	bfb8      	it	lt
 8003a12:	9204      	strlt	r2, [sp, #16]
 8003a14:	7823      	ldrb	r3, [r4, #0]
 8003a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a18:	d10a      	bne.n	8003a30 <_svfiprintf_r+0x130>
 8003a1a:	7863      	ldrb	r3, [r4, #1]
 8003a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1e:	d132      	bne.n	8003a86 <_svfiprintf_r+0x186>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	3402      	adds	r4, #2
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	9203      	str	r2, [sp, #12]
 8003a2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a2e:	9305      	str	r3, [sp, #20]
 8003a30:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003ae8 <_svfiprintf_r+0x1e8>
 8003a34:	2203      	movs	r2, #3
 8003a36:	4650      	mov	r0, sl
 8003a38:	7821      	ldrb	r1, [r4, #0]
 8003a3a:	f000 fa17 	bl	8003e6c <memchr>
 8003a3e:	b138      	cbz	r0, 8003a50 <_svfiprintf_r+0x150>
 8003a40:	2240      	movs	r2, #64	@ 0x40
 8003a42:	9b04      	ldr	r3, [sp, #16]
 8003a44:	eba0 000a 	sub.w	r0, r0, sl
 8003a48:	4082      	lsls	r2, r0
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	3401      	adds	r4, #1
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a54:	2206      	movs	r2, #6
 8003a56:	4825      	ldr	r0, [pc, #148]	@ (8003aec <_svfiprintf_r+0x1ec>)
 8003a58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a5c:	f000 fa06 	bl	8003e6c <memchr>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d036      	beq.n	8003ad2 <_svfiprintf_r+0x1d2>
 8003a64:	4b22      	ldr	r3, [pc, #136]	@ (8003af0 <_svfiprintf_r+0x1f0>)
 8003a66:	bb1b      	cbnz	r3, 8003ab0 <_svfiprintf_r+0x1b0>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	3307      	adds	r3, #7
 8003a6c:	f023 0307 	bic.w	r3, r3, #7
 8003a70:	3308      	adds	r3, #8
 8003a72:	9303      	str	r3, [sp, #12]
 8003a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a76:	4433      	add	r3, r6
 8003a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a7a:	e76a      	b.n	8003952 <_svfiprintf_r+0x52>
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	2001      	movs	r0, #1
 8003a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a84:	e7a8      	b.n	80039d8 <_svfiprintf_r+0xd8>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f04f 0c0a 	mov.w	ip, #10
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	3401      	adds	r4, #1
 8003a90:	9305      	str	r3, [sp, #20]
 8003a92:	4620      	mov	r0, r4
 8003a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a98:	3a30      	subs	r2, #48	@ 0x30
 8003a9a:	2a09      	cmp	r2, #9
 8003a9c:	d903      	bls.n	8003aa6 <_svfiprintf_r+0x1a6>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0c6      	beq.n	8003a30 <_svfiprintf_r+0x130>
 8003aa2:	9105      	str	r1, [sp, #20]
 8003aa4:	e7c4      	b.n	8003a30 <_svfiprintf_r+0x130>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aae:	e7f0      	b.n	8003a92 <_svfiprintf_r+0x192>
 8003ab0:	ab03      	add	r3, sp, #12
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8003af4 <_svfiprintf_r+0x1f4>)
 8003aba:	a904      	add	r1, sp, #16
 8003abc:	f3af 8000 	nop.w
 8003ac0:	1c42      	adds	r2, r0, #1
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	d1d6      	bne.n	8003a74 <_svfiprintf_r+0x174>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	065b      	lsls	r3, r3, #25
 8003aca:	f53f af2d 	bmi.w	8003928 <_svfiprintf_r+0x28>
 8003ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ad0:	e72c      	b.n	800392c <_svfiprintf_r+0x2c>
 8003ad2:	ab03      	add	r3, sp, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	4638      	mov	r0, r7
 8003ada:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <_svfiprintf_r+0x1f4>)
 8003adc:	a904      	add	r1, sp, #16
 8003ade:	f000 f87d 	bl	8003bdc <_printf_i>
 8003ae2:	e7ed      	b.n	8003ac0 <_svfiprintf_r+0x1c0>
 8003ae4:	08004022 	.word	0x08004022
 8003ae8:	08004028 	.word	0x08004028
 8003aec:	0800402c 	.word	0x0800402c
 8003af0:	00000000 	.word	0x00000000
 8003af4:	08003849 	.word	0x08003849

08003af8 <_printf_common>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	4616      	mov	r6, r2
 8003afe:	4698      	mov	r8, r3
 8003b00:	688a      	ldr	r2, [r1, #8]
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	4607      	mov	r7, r0
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bfb8      	it	lt
 8003b0a:	4613      	movlt	r3, r2
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b12:	460c      	mov	r4, r1
 8003b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b18:	b10a      	cbz	r2, 8003b1e <_printf_common+0x26>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	6833      	ldrmi	r3, [r6, #0]
 8003b26:	3302      	addmi	r3, #2
 8003b28:	6033      	strmi	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	f015 0506 	ands.w	r5, r5, #6
 8003b30:	d106      	bne.n	8003b40 <_printf_common+0x48>
 8003b32:	f104 0a19 	add.w	sl, r4, #25
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dc2b      	bgt.n	8003b98 <_printf_common+0xa0>
 8003b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	3b00      	subs	r3, #0
 8003b48:	bf18      	it	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	0692      	lsls	r2, r2, #26
 8003b4e:	d430      	bmi.n	8003bb2 <_printf_common+0xba>
 8003b50:	4641      	mov	r1, r8
 8003b52:	4638      	mov	r0, r7
 8003b54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b58:	47c8      	blx	r9
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d023      	beq.n	8003ba6 <_printf_common+0xae>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	6922      	ldr	r2, [r4, #16]
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf14      	ite	ne
 8003b6a:	2500      	movne	r5, #0
 8003b6c:	6833      	ldreq	r3, [r6, #0]
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	bf08      	it	eq
 8003b74:	68e5      	ldreq	r5, [r4, #12]
 8003b76:	f104 041a 	add.w	r4, r4, #26
 8003b7a:	bf08      	it	eq
 8003b7c:	1aed      	subeq	r5, r5, r3
 8003b7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b82:	bf08      	it	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bfc4      	itt	gt
 8003b8c:	1a9b      	subgt	r3, r3, r2
 8003b8e:	18ed      	addgt	r5, r5, r3
 8003b90:	42b5      	cmp	r5, r6
 8003b92:	d11a      	bne.n	8003bca <_printf_common+0xd2>
 8003b94:	2000      	movs	r0, #0
 8003b96:	e008      	b.n	8003baa <_printf_common+0xb2>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4652      	mov	r2, sl
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	47c8      	blx	r9
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	d103      	bne.n	8003bae <_printf_common+0xb6>
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bae:	3501      	adds	r5, #1
 8003bb0:	e7c1      	b.n	8003b36 <_printf_common+0x3e>
 8003bb2:	2030      	movs	r0, #48	@ 0x30
 8003bb4:	18e1      	adds	r1, r4, r3
 8003bb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bc0:	4422      	add	r2, r4
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bc8:	e7c2      	b.n	8003b50 <_printf_common+0x58>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4622      	mov	r2, r4
 8003bce:	4641      	mov	r1, r8
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	47c8      	blx	r9
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d0e6      	beq.n	8003ba6 <_printf_common+0xae>
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7d9      	b.n	8003b90 <_printf_common+0x98>

08003bdc <_printf_i>:
 8003bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	7e0f      	ldrb	r7, [r1, #24]
 8003be2:	4691      	mov	r9, r2
 8003be4:	2f78      	cmp	r7, #120	@ 0x78
 8003be6:	4680      	mov	r8, r0
 8003be8:	460c      	mov	r4, r1
 8003bea:	469a      	mov	sl, r3
 8003bec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bf2:	d807      	bhi.n	8003c04 <_printf_i+0x28>
 8003bf4:	2f62      	cmp	r7, #98	@ 0x62
 8003bf6:	d80a      	bhi.n	8003c0e <_printf_i+0x32>
 8003bf8:	2f00      	cmp	r7, #0
 8003bfa:	f000 80d1 	beq.w	8003da0 <_printf_i+0x1c4>
 8003bfe:	2f58      	cmp	r7, #88	@ 0x58
 8003c00:	f000 80b8 	beq.w	8003d74 <_printf_i+0x198>
 8003c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c0c:	e03a      	b.n	8003c84 <_printf_i+0xa8>
 8003c0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c12:	2b15      	cmp	r3, #21
 8003c14:	d8f6      	bhi.n	8003c04 <_printf_i+0x28>
 8003c16:	a101      	add	r1, pc, #4	@ (adr r1, 8003c1c <_printf_i+0x40>)
 8003c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c89 	.word	0x08003c89
 8003c24:	08003c05 	.word	0x08003c05
 8003c28:	08003c05 	.word	0x08003c05
 8003c2c:	08003c05 	.word	0x08003c05
 8003c30:	08003c05 	.word	0x08003c05
 8003c34:	08003c89 	.word	0x08003c89
 8003c38:	08003c05 	.word	0x08003c05
 8003c3c:	08003c05 	.word	0x08003c05
 8003c40:	08003c05 	.word	0x08003c05
 8003c44:	08003c05 	.word	0x08003c05
 8003c48:	08003d87 	.word	0x08003d87
 8003c4c:	08003cb3 	.word	0x08003cb3
 8003c50:	08003d41 	.word	0x08003d41
 8003c54:	08003c05 	.word	0x08003c05
 8003c58:	08003c05 	.word	0x08003c05
 8003c5c:	08003da9 	.word	0x08003da9
 8003c60:	08003c05 	.word	0x08003c05
 8003c64:	08003cb3 	.word	0x08003cb3
 8003c68:	08003c05 	.word	0x08003c05
 8003c6c:	08003c05 	.word	0x08003c05
 8003c70:	08003d49 	.word	0x08003d49
 8003c74:	6833      	ldr	r3, [r6, #0]
 8003c76:	1d1a      	adds	r2, r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6032      	str	r2, [r6, #0]
 8003c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c84:	2301      	movs	r3, #1
 8003c86:	e09c      	b.n	8003dc2 <_printf_i+0x1e6>
 8003c88:	6833      	ldr	r3, [r6, #0]
 8003c8a:	6820      	ldr	r0, [r4, #0]
 8003c8c:	1d19      	adds	r1, r3, #4
 8003c8e:	6031      	str	r1, [r6, #0]
 8003c90:	0606      	lsls	r6, r0, #24
 8003c92:	d501      	bpl.n	8003c98 <_printf_i+0xbc>
 8003c94:	681d      	ldr	r5, [r3, #0]
 8003c96:	e003      	b.n	8003ca0 <_printf_i+0xc4>
 8003c98:	0645      	lsls	r5, r0, #25
 8003c9a:	d5fb      	bpl.n	8003c94 <_printf_i+0xb8>
 8003c9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	da03      	bge.n	8003cac <_printf_i+0xd0>
 8003ca4:	232d      	movs	r3, #45	@ 0x2d
 8003ca6:	426d      	negs	r5, r5
 8003ca8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cac:	230a      	movs	r3, #10
 8003cae:	4858      	ldr	r0, [pc, #352]	@ (8003e10 <_printf_i+0x234>)
 8003cb0:	e011      	b.n	8003cd6 <_printf_i+0xfa>
 8003cb2:	6821      	ldr	r1, [r4, #0]
 8003cb4:	6833      	ldr	r3, [r6, #0]
 8003cb6:	0608      	lsls	r0, r1, #24
 8003cb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cbc:	d402      	bmi.n	8003cc4 <_printf_i+0xe8>
 8003cbe:	0649      	lsls	r1, r1, #25
 8003cc0:	bf48      	it	mi
 8003cc2:	b2ad      	uxthmi	r5, r5
 8003cc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cc6:	6033      	str	r3, [r6, #0]
 8003cc8:	bf14      	ite	ne
 8003cca:	230a      	movne	r3, #10
 8003ccc:	2308      	moveq	r3, #8
 8003cce:	4850      	ldr	r0, [pc, #320]	@ (8003e10 <_printf_i+0x234>)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cd6:	6866      	ldr	r6, [r4, #4]
 8003cd8:	2e00      	cmp	r6, #0
 8003cda:	60a6      	str	r6, [r4, #8]
 8003cdc:	db05      	blt.n	8003cea <_printf_i+0x10e>
 8003cde:	6821      	ldr	r1, [r4, #0]
 8003ce0:	432e      	orrs	r6, r5
 8003ce2:	f021 0104 	bic.w	r1, r1, #4
 8003ce6:	6021      	str	r1, [r4, #0]
 8003ce8:	d04b      	beq.n	8003d82 <_printf_i+0x1a6>
 8003cea:	4616      	mov	r6, r2
 8003cec:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cf0:	fb03 5711 	mls	r7, r3, r1, r5
 8003cf4:	5dc7      	ldrb	r7, [r0, r7]
 8003cf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cfa:	462f      	mov	r7, r5
 8003cfc:	42bb      	cmp	r3, r7
 8003cfe:	460d      	mov	r5, r1
 8003d00:	d9f4      	bls.n	8003cec <_printf_i+0x110>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d10b      	bne.n	8003d1e <_printf_i+0x142>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	07df      	lsls	r7, r3, #31
 8003d0a:	d508      	bpl.n	8003d1e <_printf_i+0x142>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	6861      	ldr	r1, [r4, #4]
 8003d10:	4299      	cmp	r1, r3
 8003d12:	bfde      	ittt	le
 8003d14:	2330      	movle	r3, #48	@ 0x30
 8003d16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d1e:	1b92      	subs	r2, r2, r6
 8003d20:	6122      	str	r2, [r4, #16]
 8003d22:	464b      	mov	r3, r9
 8003d24:	4621      	mov	r1, r4
 8003d26:	4640      	mov	r0, r8
 8003d28:	f8cd a000 	str.w	sl, [sp]
 8003d2c:	aa03      	add	r2, sp, #12
 8003d2e:	f7ff fee3 	bl	8003af8 <_printf_common>
 8003d32:	3001      	adds	r0, #1
 8003d34:	d14a      	bne.n	8003dcc <_printf_i+0x1f0>
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	b004      	add	sp, #16
 8003d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	f043 0320 	orr.w	r3, r3, #32
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	2778      	movs	r7, #120	@ 0x78
 8003d4a:	4832      	ldr	r0, [pc, #200]	@ (8003e14 <_printf_i+0x238>)
 8003d4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	6831      	ldr	r1, [r6, #0]
 8003d54:	061f      	lsls	r7, r3, #24
 8003d56:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d5a:	d402      	bmi.n	8003d62 <_printf_i+0x186>
 8003d5c:	065f      	lsls	r7, r3, #25
 8003d5e:	bf48      	it	mi
 8003d60:	b2ad      	uxthmi	r5, r5
 8003d62:	6031      	str	r1, [r6, #0]
 8003d64:	07d9      	lsls	r1, r3, #31
 8003d66:	bf44      	itt	mi
 8003d68:	f043 0320 	orrmi.w	r3, r3, #32
 8003d6c:	6023      	strmi	r3, [r4, #0]
 8003d6e:	b11d      	cbz	r5, 8003d78 <_printf_i+0x19c>
 8003d70:	2310      	movs	r3, #16
 8003d72:	e7ad      	b.n	8003cd0 <_printf_i+0xf4>
 8003d74:	4826      	ldr	r0, [pc, #152]	@ (8003e10 <_printf_i+0x234>)
 8003d76:	e7e9      	b.n	8003d4c <_printf_i+0x170>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	f023 0320 	bic.w	r3, r3, #32
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	e7f6      	b.n	8003d70 <_printf_i+0x194>
 8003d82:	4616      	mov	r6, r2
 8003d84:	e7bd      	b.n	8003d02 <_printf_i+0x126>
 8003d86:	6833      	ldr	r3, [r6, #0]
 8003d88:	6825      	ldr	r5, [r4, #0]
 8003d8a:	1d18      	adds	r0, r3, #4
 8003d8c:	6961      	ldr	r1, [r4, #20]
 8003d8e:	6030      	str	r0, [r6, #0]
 8003d90:	062e      	lsls	r6, r5, #24
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	d501      	bpl.n	8003d9a <_printf_i+0x1be>
 8003d96:	6019      	str	r1, [r3, #0]
 8003d98:	e002      	b.n	8003da0 <_printf_i+0x1c4>
 8003d9a:	0668      	lsls	r0, r5, #25
 8003d9c:	d5fb      	bpl.n	8003d96 <_printf_i+0x1ba>
 8003d9e:	8019      	strh	r1, [r3, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	4616      	mov	r6, r2
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	e7bc      	b.n	8003d22 <_printf_i+0x146>
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	2100      	movs	r1, #0
 8003dac:	1d1a      	adds	r2, r3, #4
 8003dae:	6032      	str	r2, [r6, #0]
 8003db0:	681e      	ldr	r6, [r3, #0]
 8003db2:	6862      	ldr	r2, [r4, #4]
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 f859 	bl	8003e6c <memchr>
 8003dba:	b108      	cbz	r0, 8003dc0 <_printf_i+0x1e4>
 8003dbc:	1b80      	subs	r0, r0, r6
 8003dbe:	6060      	str	r0, [r4, #4]
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dca:	e7aa      	b.n	8003d22 <_printf_i+0x146>
 8003dcc:	4632      	mov	r2, r6
 8003dce:	4649      	mov	r1, r9
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	47d0      	blx	sl
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d0ad      	beq.n	8003d36 <_printf_i+0x15a>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	079b      	lsls	r3, r3, #30
 8003dde:	d413      	bmi.n	8003e08 <_printf_i+0x22c>
 8003de0:	68e0      	ldr	r0, [r4, #12]
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	4298      	cmp	r0, r3
 8003de6:	bfb8      	it	lt
 8003de8:	4618      	movlt	r0, r3
 8003dea:	e7a6      	b.n	8003d3a <_printf_i+0x15e>
 8003dec:	2301      	movs	r3, #1
 8003dee:	4632      	mov	r2, r6
 8003df0:	4649      	mov	r1, r9
 8003df2:	4640      	mov	r0, r8
 8003df4:	47d0      	blx	sl
 8003df6:	3001      	adds	r0, #1
 8003df8:	d09d      	beq.n	8003d36 <_printf_i+0x15a>
 8003dfa:	3501      	adds	r5, #1
 8003dfc:	68e3      	ldr	r3, [r4, #12]
 8003dfe:	9903      	ldr	r1, [sp, #12]
 8003e00:	1a5b      	subs	r3, r3, r1
 8003e02:	42ab      	cmp	r3, r5
 8003e04:	dcf2      	bgt.n	8003dec <_printf_i+0x210>
 8003e06:	e7eb      	b.n	8003de0 <_printf_i+0x204>
 8003e08:	2500      	movs	r5, #0
 8003e0a:	f104 0619 	add.w	r6, r4, #25
 8003e0e:	e7f5      	b.n	8003dfc <_printf_i+0x220>
 8003e10:	08004033 	.word	0x08004033
 8003e14:	08004044 	.word	0x08004044

08003e18 <memmove>:
 8003e18:	4288      	cmp	r0, r1
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	eb01 0402 	add.w	r4, r1, r2
 8003e20:	d902      	bls.n	8003e28 <memmove+0x10>
 8003e22:	4284      	cmp	r4, r0
 8003e24:	4623      	mov	r3, r4
 8003e26:	d807      	bhi.n	8003e38 <memmove+0x20>
 8003e28:	1e43      	subs	r3, r0, #1
 8003e2a:	42a1      	cmp	r1, r4
 8003e2c:	d008      	beq.n	8003e40 <memmove+0x28>
 8003e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e36:	e7f8      	b.n	8003e2a <memmove+0x12>
 8003e38:	4601      	mov	r1, r0
 8003e3a:	4402      	add	r2, r0
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	d100      	bne.n	8003e42 <memmove+0x2a>
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e4a:	e7f7      	b.n	8003e3c <memmove+0x24>

08003e4c <_sbrk_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	2300      	movs	r3, #0
 8003e50:	4d05      	ldr	r5, [pc, #20]	@ (8003e68 <_sbrk_r+0x1c>)
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fc ff28 	bl	8000cac <_sbrk>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_sbrk_r+0x1a>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_sbrk_r+0x1a>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20000338 	.word	0x20000338

08003e6c <memchr>:
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	b2c9      	uxtb	r1, r1
 8003e72:	4402      	add	r2, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	d101      	bne.n	8003e7e <memchr+0x12>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e003      	b.n	8003e86 <memchr+0x1a>
 8003e7e:	7804      	ldrb	r4, [r0, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	428c      	cmp	r4, r1
 8003e84:	d1f6      	bne.n	8003e74 <memchr+0x8>
 8003e86:	bd10      	pop	{r4, pc}

08003e88 <memcpy>:
 8003e88:	440a      	add	r2, r1
 8003e8a:	4291      	cmp	r1, r2
 8003e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e90:	d100      	bne.n	8003e94 <memcpy+0xc>
 8003e92:	4770      	bx	lr
 8003e94:	b510      	push	{r4, lr}
 8003e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e9a:	4291      	cmp	r1, r2
 8003e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea0:	d1f9      	bne.n	8003e96 <memcpy+0xe>
 8003ea2:	bd10      	pop	{r4, pc}

08003ea4 <_realloc_r>:
 8003ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	4614      	mov	r4, r2
 8003eac:	460d      	mov	r5, r1
 8003eae:	b921      	cbnz	r1, 8003eba <_realloc_r+0x16>
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb6:	f7ff bc3b 	b.w	8003730 <_malloc_r>
 8003eba:	b92a      	cbnz	r2, 8003ec8 <_realloc_r+0x24>
 8003ebc:	f7ff fbce 	bl	800365c <_free_r>
 8003ec0:	4625      	mov	r5, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec8:	f000 f81a 	bl	8003f00 <_malloc_usable_size_r>
 8003ecc:	4284      	cmp	r4, r0
 8003ece:	4606      	mov	r6, r0
 8003ed0:	d802      	bhi.n	8003ed8 <_realloc_r+0x34>
 8003ed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ed6:	d8f4      	bhi.n	8003ec2 <_realloc_r+0x1e>
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4638      	mov	r0, r7
 8003edc:	f7ff fc28 	bl	8003730 <_malloc_r>
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	b908      	cbnz	r0, 8003ee8 <_realloc_r+0x44>
 8003ee4:	4645      	mov	r5, r8
 8003ee6:	e7ec      	b.n	8003ec2 <_realloc_r+0x1e>
 8003ee8:	42b4      	cmp	r4, r6
 8003eea:	4622      	mov	r2, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	bf28      	it	cs
 8003ef0:	4632      	movcs	r2, r6
 8003ef2:	f7ff ffc9 	bl	8003e88 <memcpy>
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7ff fbaf 	bl	800365c <_free_r>
 8003efe:	e7f1      	b.n	8003ee4 <_realloc_r+0x40>

08003f00 <_malloc_usable_size_r>:
 8003f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f04:	1f18      	subs	r0, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bfbc      	itt	lt
 8003f0a:	580b      	ldrlt	r3, [r1, r0]
 8003f0c:	18c0      	addlt	r0, r0, r3
 8003f0e:	4770      	bx	lr

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr
